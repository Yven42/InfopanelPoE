
Infopanel_PoE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00041338  0800ce0c  0800ce0c  0001ce0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804e144  0804e144  000601e4  2**0
                  CONTENTS
  4 .ARM          00000000  0804e144  0804e144  000601e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0804e144  0804e144  000601e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804e144  0804e144  0005e144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804e148  0804e148  0005e148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0804e14c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  200001e4  0804e330  000601e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0804e330  000607ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000601e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00060214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019090  00000000  00000000  00060257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004380  00000000  00000000  000792e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001820  00000000  00000000  0007d668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000123d  00000000  00000000  0007ee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ab6  00000000  00000000  000800c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ea47  00000000  00000000  000a8b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fdded  00000000  00000000  000c75c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006dd8  00000000  00000000  001c53b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001cc188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cdf4 	.word	0x0800cdf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800cdf4 	.word	0x0800cdf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f006 fa82 	bl	800678c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f85e 	bl	8000348 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 fabc 	bl	8000808 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000290:	f000 f8d6 	bl	8000440 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000294:	f000 f912 	bl	80004bc <MX_SPI3_Init>
  MX_RTC_Init();
 8000298:	f000 f8aa 	bl	80003f0 <MX_RTC_Init>
  MX_TIM1_Init();
 800029c:	f000 f94c 	bl	8000538 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002a0:	f000 f99e 	bl	80005e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80002a4:	f000 f9ea 	bl	800067c <MX_TIM3_Init>
  MX_TIM5_Init();
 80002a8:	f000 fa36 	bl	8000718 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(WLAN_Power_GPIO_Port, WLAN_Power_Pin, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2140      	movs	r1, #64	; 0x40
 80002b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002b4:	f006 fe3a 	bl	8006f2c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80002b8:	200a      	movs	r0, #10
 80002ba:	f006 fae3 	bl	8006884 <HAL_Delay>
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 80002be:	4b1f      	ldr	r3, [pc, #124]	; (800033c <main+0xbc>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f06f 0201 	mvn.w	r2, #1
 80002c6:	611a      	str	r2, [r3, #16]

  HAL_TIM_Base_Start_IT(&htim2);
 80002c8:	481c      	ldr	r0, [pc, #112]	; (800033c <main+0xbc>)
 80002ca:	f009 fc17 	bl	8009afc <HAL_TIM_Base_Start_IT>

  //
  HAL_PWR_EnableBkUpAccess(); // Zugriff auf Backup-Register aktivieren
 80002ce:	f006 fe69 	bl	8006fa4 <HAL_PWR_EnableBkUpAccess>
  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == 0x1234)
 80002d2:	2101      	movs	r1, #1
 80002d4:	481a      	ldr	r0, [pc, #104]	; (8000340 <main+0xc0>)
 80002d6:	f008 fb62 	bl	800899e <HAL_RTCEx_BKUPRead>
 80002da:	4603      	mov	r3, r0
 80002dc:	f241 2234 	movw	r2, #4660	; 0x1234
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d107      	bne.n	80002f4 <main+0x74>
  {
	  Buzzer(200);
 80002e4:	20c8      	movs	r0, #200	; 0xc8
 80002e6:	f002 fa49 	bl	800277c <Buzzer>
	  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2101      	movs	r1, #1
 80002ee:	4814      	ldr	r0, [pc, #80]	; (8000340 <main+0xc0>)
 80002f0:	f008 fb3c 	bl	800896c <HAL_RTCEx_BKUPWrite>
  }

  HAL_GPIO_WritePin(RST_ETH_GPIO_Port, RST_ETH_Pin, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fa:	4812      	ldr	r0, [pc, #72]	; (8000344 <main+0xc4>)
 80002fc:	f006 fe16 	bl	8006f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ETH_Power_GPIO_Port, ETH_Power_Pin, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	2110      	movs	r1, #16
 8000304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000308:	f006 fe10 	bl	8006f2c <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800030c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000310:	f006 fab8 	bl	8006884 <HAL_Delay>
  HAL_GPIO_WritePin(ETH_Power_GPIO_Port, ETH_Power_Pin, 0);
 8000314:	2200      	movs	r2, #0
 8000316:	2110      	movs	r1, #16
 8000318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031c:	f006 fe06 	bl	8006f2c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EEPROM_Power_GPIO_Port, EEPROM_Power_Pin, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f006 fe00 	bl	8006f2c <HAL_GPIO_WritePin>
  
  u8Init_Ethernet();
 800032c:	f001 fa94 	bl	8001858 <u8Init_Ethernet>
  HAL_Delay(100);
 8000330:	2064      	movs	r0, #100	; 0x64
 8000332:	f006 faa7 	bl	8006884 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	u8Connection_Loop();
 8000336:	f001 f99f 	bl	8001678 <u8Connection_Loop>
 800033a:	e7fc      	b.n	8000336 <main+0xb6>
 800033c:	20000338 	.word	0x20000338
 8000340:	20000200 	.word	0x20000200
 8000344:	48000400 	.word	0x48000400

08000348 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b096      	sub	sp, #88	; 0x58
 800034c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	2244      	movs	r2, #68	; 0x44
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f00b fa94 	bl	800b884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035c:	463b      	mov	r3, r7
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
 8000368:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800036a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800036e:	f006 fe71 	bl	8007054 <HAL_PWREx_ControlVoltageScaling>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000378:	f000 faf8 	bl	800096c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800037c:	230a      	movs	r3, #10
 800037e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000384:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000386:	2310      	movs	r3, #16
 8000388:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800038a:	2301      	movs	r3, #1
 800038c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038e:	2302      	movs	r3, #2
 8000390:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000392:	2302      	movs	r3, #2
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000396:	2301      	movs	r3, #1
 8000398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800039a:	230a      	movs	r3, #10
 800039c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800039e:	2307      	movs	r3, #7
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003a2:	2302      	movs	r3, #2
 80003a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003a6:	2302      	movs	r3, #2
 80003a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0314 	add.w	r3, r7, #20
 80003ae:	4618      	mov	r0, r3
 80003b0:	f006 fea6 	bl	8007100 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x76>
  {
    Error_Handler();
 80003ba:	f000 fad7 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c2:	2303      	movs	r3, #3
 80003c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	2104      	movs	r1, #4
 80003d6:	4618      	mov	r0, r3
 80003d8:	f007 fa6e 	bl	80078b8 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80003e2:	f000 fac3 	bl	800096c <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3758      	adds	r7, #88	; 0x58
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <MX_RTC_Init+0x48>)
 80003f6:	4a11      	ldr	r2, [pc, #68]	; (800043c <MX_RTC_Init+0x4c>)
 80003f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003fa:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_RTC_Init+0x48>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <MX_RTC_Init+0x48>)
 8000402:	227f      	movs	r2, #127	; 0x7f
 8000404:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <MX_RTC_Init+0x48>)
 8000408:	22ff      	movs	r2, #255	; 0xff
 800040a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <MX_RTC_Init+0x48>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <MX_RTC_Init+0x48>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000418:	4b07      	ldr	r3, [pc, #28]	; (8000438 <MX_RTC_Init+0x48>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <MX_RTC_Init+0x48>)
 8000420:	2200      	movs	r2, #0
 8000422:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000424:	4804      	ldr	r0, [pc, #16]	; (8000438 <MX_RTC_Init+0x48>)
 8000426:	f008 f8ef 	bl	8008608 <HAL_RTC_Init>
 800042a:	4603      	mov	r3, r0
 800042c:	2b00      	cmp	r3, #0
 800042e:	d001      	beq.n	8000434 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000430:	f000 fa9c 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000434:	bf00      	nop
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000200 	.word	0x20000200
 800043c:	40002800 	.word	0x40002800

08000440 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000446:	4a1c      	ldr	r2, [pc, #112]	; (80004b8 <MX_SPI2_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_SPI2_Init+0x74>)
 800044c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000450:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000454:	2200      	movs	r2, #0
 8000456:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_SPI2_Init+0x74>)
 800045a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800045e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000462:	2200      	movs	r2, #0
 8000464:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000466:	4b13      	ldr	r3, [pc, #76]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000468:	2200      	movs	r2, #0
 800046a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_SPI2_Init+0x74>)
 800046e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000472:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000476:	2238      	movs	r2, #56	; 0x38
 8000478:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_SPI2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800048c:	4b09      	ldr	r3, [pc, #36]	; (80004b4 <MX_SPI2_Init+0x74>)
 800048e:	2207      	movs	r2, #7
 8000490:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000492:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <MX_SPI2_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000498:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <MX_SPI2_Init+0x74>)
 800049a:	2208      	movs	r2, #8
 800049c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_SPI2_Init+0x74>)
 80004a0:	f008 fa93 	bl	80089ca <HAL_SPI_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80004aa:	f000 fa5f 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000224 	.word	0x20000224
 80004b8:	40003800 	.word	0x40003800

080004bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_SPI3_Init+0x74>)
 80004c2:	4a1c      	ldr	r2, [pc, #112]	; (8000534 <MX_SPI3_Init+0x78>)
 80004c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <MX_SPI3_Init+0x74>)
 80004c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80004cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_SPI3_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80004d4:	4b16      	ldr	r3, [pc, #88]	; (8000530 <MX_SPI3_Init+0x74>)
 80004d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80004da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <MX_SPI3_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <MX_SPI3_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <MX_SPI3_Init+0x74>)
 80004ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <MX_SPI3_Init+0x74>)
 80004f2:	2238      	movs	r2, #56	; 0x38
 80004f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <MX_SPI3_Init+0x74>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <MX_SPI3_Init+0x74>)
 80004fe:	2200      	movs	r2, #0
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <MX_SPI3_Init+0x74>)
 8000504:	2200      	movs	r2, #0
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <MX_SPI3_Init+0x74>)
 800050a:	2207      	movs	r2, #7
 800050c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <MX_SPI3_Init+0x74>)
 8000510:	2200      	movs	r2, #0
 8000512:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <MX_SPI3_Init+0x74>)
 8000516:	2208      	movs	r2, #8
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_SPI3_Init+0x74>)
 800051c:	f008 fa55 	bl	80089ca <HAL_SPI_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000526:	f000 fa21 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	20000288 	.word	0x20000288
 8000534:	40003c00 	.word	0x40003c00

08000538 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000558:	4a20      	ldr	r2, [pc, #128]	; (80005dc <MX_TIM1_Init+0xa4>)
 800055a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800055c:	4b1e      	ldr	r3, [pc, #120]	; (80005d8 <MX_TIM1_Init+0xa0>)
 800055e:	2201      	movs	r2, #1
 8000560:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000568:	4b1b      	ldr	r3, [pc, #108]	; (80005d8 <MX_TIM1_Init+0xa0>)
 800056a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800056e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000570:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800057c:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_TIM1_Init+0xa0>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000582:	4815      	ldr	r0, [pc, #84]	; (80005d8 <MX_TIM1_Init+0xa0>)
 8000584:	f009 fa62 	bl	8009a4c <HAL_TIM_Base_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800058e:	f000 f9ed 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000596:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000598:	f107 0310 	add.w	r3, r7, #16
 800059c:	4619      	mov	r1, r3
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <MX_TIM1_Init+0xa0>)
 80005a0:	f009 fffa 	bl	800a598 <HAL_TIM_ConfigClockSource>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80005aa:	f000 f9df 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <MX_TIM1_Init+0xa0>)
 80005c0:	f00a fd16 	bl	800aff0 <HAL_TIMEx_MasterConfigSynchronization>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80005ca:	f000 f9cf 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80005ce:	bf00      	nop
 80005d0:	3720      	adds	r7, #32
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200002ec 	.word	0x200002ec
 80005dc:	40012c00 	.word	0x40012c00

080005e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_TIM2_Init+0x94>)
 8000600:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000604:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80;
 8000606:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_TIM2_Init+0x94>)
 8000608:	2250      	movs	r2, #80	; 0x50
 800060a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_TIM2_Init+0x94>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 900000000;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_TIM2_Init+0x94>)
 8000614:	4a18      	ldr	r2, [pc, #96]	; (8000678 <MX_TIM2_Init+0x98>)
 8000616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_TIM2_Init+0x94>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_TIM2_Init+0x94>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <MX_TIM2_Init+0x94>)
 8000626:	f009 fa11 	bl	8009a4c <HAL_TIM_Base_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000630:	f000 f99c 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000638:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_TIM2_Init+0x94>)
 8000642:	f009 ffa9 	bl	800a598 <HAL_TIM_ConfigClockSource>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800064c:	f000 f98e 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_TIM2_Init+0x94>)
 800065e:	f00a fcc7 	bl	800aff0 <HAL_TIMEx_MasterConfigSynchronization>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000668:	f000 f980 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3720      	adds	r7, #32
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000338 	.word	0x20000338
 8000678:	35a4e900 	.word	0x35a4e900

0800067c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0310 	add.w	r3, r7, #16
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800069a:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <MX_TIM3_Init+0x94>)
 800069c:	4a1d      	ldr	r2, [pc, #116]	; (8000714 <MX_TIM3_Init+0x98>)
 800069e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006a0:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <MX_TIM3_Init+0x94>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <MX_TIM3_Init+0x94>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80006ac:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_TIM3_Init+0x94>)
 80006ae:	2264      	movs	r2, #100	; 0x64
 80006b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b17      	ldr	r3, [pc, #92]	; (8000710 <MX_TIM3_Init+0x94>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_TIM3_Init+0x94>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_TIM3_Init+0x94>)
 80006c0:	f009 f9c4 	bl	8009a4c <HAL_TIM_Base_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f94f 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80006d4:	f107 0310 	add.w	r3, r7, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	480d      	ldr	r0, [pc, #52]	; (8000710 <MX_TIM3_Init+0x94>)
 80006dc:	f009 ff5c 	bl	800a598 <HAL_TIM_ConfigClockSource>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f941 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <MX_TIM3_Init+0x94>)
 80006f8:	f00a fc7a 	bl	800aff0 <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000702:	f000 f933 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000384 	.word	0x20000384
 8000714:	40000400 	.word	0x40000400

08000718 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08e      	sub	sp, #56	; 0x38
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800071e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000738:	463b      	mov	r3, r7
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
 8000746:	615a      	str	r2, [r3, #20]
 8000748:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <MX_TIM5_Init+0xe8>)
 800074c:	4a2d      	ldr	r2, [pc, #180]	; (8000804 <MX_TIM5_Init+0xec>)
 800074e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40-1;
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <MX_TIM5_Init+0xe8>)
 8000752:	2227      	movs	r2, #39	; 0x27
 8000754:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <MX_TIM5_Init+0xe8>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <MX_TIM5_Init+0xe8>)
 800075e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000762:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b26      	ldr	r3, [pc, #152]	; (8000800 <MX_TIM5_Init+0xe8>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <MX_TIM5_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000770:	4823      	ldr	r0, [pc, #140]	; (8000800 <MX_TIM5_Init+0xe8>)
 8000772:	f009 f96b 	bl	8009a4c <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800077c:	f000 f8f6 	bl	800096c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800078a:	4619      	mov	r1, r3
 800078c:	481c      	ldr	r0, [pc, #112]	; (8000800 <MX_TIM5_Init+0xe8>)
 800078e:	f009 ff03 	bl	800a598 <HAL_TIM_ConfigClockSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8000798:	f000 f8e8 	bl	800096c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800079c:	4818      	ldr	r0, [pc, #96]	; (8000800 <MX_TIM5_Init+0xe8>)
 800079e:	f009 fa4c 	bl	8009c3a <HAL_TIM_PWM_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80007a8:	f000 f8e0 	bl	800096c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_TIM5_Init+0xe8>)
 80007bc:	f00a fc18 	bl	800aff0 <HAL_TIMEx_MasterConfigSynchronization>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80007c6:	f000 f8d1 	bl	800096c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ca:	2360      	movs	r3, #96	; 0x60
 80007cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80007ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80007d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007dc:	463b      	mov	r3, r7
 80007de:	2204      	movs	r2, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	; (8000800 <MX_TIM5_Init+0xe8>)
 80007e4:	f009 fdc4 	bl	800a370 <HAL_TIM_PWM_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 80007ee:	f000 f8bd 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80007f2:	4803      	ldr	r0, [pc, #12]	; (8000800 <MX_TIM5_Init+0xe8>)
 80007f4:	f000 fa32 	bl	8000c5c <HAL_TIM_MspPostInit>

}
 80007f8:	bf00      	nop
 80007fa:	3738      	adds	r7, #56	; 0x38
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200003d0 	.word	0x200003d0
 8000804:	40000c00 	.word	0x40000c00

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b50      	ldr	r3, [pc, #320]	; (8000960 <MX_GPIO_Init+0x158>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a4f      	ldr	r2, [pc, #316]	; (8000960 <MX_GPIO_Init+0x158>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b4d      	ldr	r3, [pc, #308]	; (8000960 <MX_GPIO_Init+0x158>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	4b4a      	ldr	r3, [pc, #296]	; (8000960 <MX_GPIO_Init+0x158>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a49      	ldr	r2, [pc, #292]	; (8000960 <MX_GPIO_Init+0x158>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <MX_GPIO_Init+0x158>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b44      	ldr	r3, [pc, #272]	; (8000960 <MX_GPIO_Init+0x158>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a43      	ldr	r2, [pc, #268]	; (8000960 <MX_GPIO_Init+0x158>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <MX_GPIO_Init+0x158>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <MX_GPIO_Init+0x158>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	4a3d      	ldr	r2, [pc, #244]	; (8000960 <MX_GPIO_Init+0x158>)
 800086c:	f043 0302 	orr.w	r3, r3, #2
 8000870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <MX_GPIO_Init+0x158>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ETH_Power_Pin|EEPROM_Power_Pin|WLAN_Power_Pin|INT_ETH_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 61fe 	mov.w	r1, #2032	; 0x7f0
 8000884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000888:	f006 fb50 	bl	8006f2c <HAL_GPIO_WritePin>
                          |EN_WLAN_Pin|RST_WLAN_Pin|CS_ETH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_POLOLU_Pin|DISPLAY_POWER_Pin|RST_Pin|DC_Pin
 800088c:	2200      	movs	r2, #0
 800088e:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8000892:	4834      	ldr	r0, [pc, #208]	; (8000964 <MX_GPIO_Init+0x15c>)
 8000894:	f006 fb4a 	bl	8006f2c <HAL_GPIO_WritePin>
                          |SPI_CS_Pin|RST_ETH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	482e      	ldr	r0, [pc, #184]	; (8000968 <MX_GPIO_Init+0x160>)
 80008b0:	f006 f97a 	bl	8006ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Reset_Pin */
  GPIO_InitStruct.Pin = INT_Reset_Pin;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_Reset_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f006 f96c 	bl	8006ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d0:	230c      	movs	r3, #12
 80008d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e0:	2307      	movs	r3, #7
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ee:	f006 f95b 	bl	8006ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ETH_Power_Pin EEPROM_Power_Pin WLAN_Power_Pin INT_ETH_Pin
                           EN_WLAN_Pin RST_WLAN_Pin CS_ETH_Pin */
  GPIO_InitStruct.Pin = ETH_Power_Pin|EEPROM_Power_Pin|WLAN_Power_Pin|INT_ETH_Pin
 80008f2:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 80008f6:	617b      	str	r3, [r7, #20]
                          |EN_WLAN_Pin|RST_WLAN_Pin|CS_ETH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f006 f94b 	bl	8006ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_POLOLU_Pin DISPLAY_POWER_Pin RST_Pin DC_Pin
                           SPI_CS_Pin RST_ETH_Pin */
  GPIO_InitStruct.Pin = ENABLE_POLOLU_Pin|DISPLAY_POWER_Pin|RST_Pin|DC_Pin
 8000912:	f44f 73bb 	mov.w	r3, #374	; 0x176
 8000916:	617b      	str	r3, [r7, #20]
                          |SPI_CS_Pin|RST_ETH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_GPIO_Init+0x15c>)
 800092c:	f006 f93c 	bl	8006ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 0314 	add.w	r3, r7, #20
 8000940:	4619      	mov	r1, r3
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_GPIO_Init+0x15c>)
 8000944:	f006 f930 	bl	8006ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000948:	2200      	movs	r2, #0
 800094a:	2105      	movs	r1, #5
 800094c:	2006      	movs	r0, #6
 800094e:	f006 f8b4 	bl	8006aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000952:	2006      	movs	r0, #6
 8000954:	f006 f8cd 	bl	8006af2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	; 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40021000 	.word	0x40021000
 8000964:	48000400 	.word	0x48000400
 8000968:	48000800 	.word	0x48000800

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x44>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x44>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6613      	str	r3, [r2, #96]	; 0x60
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x44>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x44>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	4a08      	ldr	r2, [pc, #32]	; (80009bc <HAL_MspInit+0x44>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6593      	str	r3, [r2, #88]	; 0x58
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_MspInit+0x44>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b0a4      	sub	sp, #144	; 0x90
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2288      	movs	r2, #136	; 0x88
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f00a ff57 	bl	800b884 <memset>
  if(hrtc->Instance==RTC)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a10      	ldr	r2, [pc, #64]	; (8000a1c <HAL_RTC_MspInit+0x5c>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d118      	bne.n	8000a12 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f007 f94c 	bl	8007c90 <HAL_RCCEx_PeriphCLKConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009fe:	f7ff ffb5 	bl	800096c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a02:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <HAL_RTC_MspInit+0x60>)
 8000a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <HAL_RTC_MspInit+0x60>)
 8000a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3790      	adds	r7, #144	; 0x90
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40002800 	.word	0x40002800
 8000a20:	40021000 	.word	0x40021000

08000a24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a45      	ldr	r2, [pc, #276]	; (8000b58 <HAL_SPI_MspInit+0x134>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d14d      	bne.n	8000ae2 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a46:	4b45      	ldr	r3, [pc, #276]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	4a44      	ldr	r2, [pc, #272]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6593      	str	r3, [r2, #88]	; 0x58
 8000a52:	4b42      	ldr	r3, [pc, #264]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a3e      	ldr	r2, [pc, #248]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a64:	f043 0304 	orr.w	r3, r3, #4
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0304 	and.w	r3, r3, #4
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a7c:	f043 0302 	orr.w	r3, r3, #2
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0302 	and.w	r3, r3, #2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a8e:	230c      	movs	r3, #12
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482d      	ldr	r0, [pc, #180]	; (8000b60 <HAL_SPI_MspInit+0x13c>)
 8000aaa:	f006 f87d 	bl	8006ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac0:	2305      	movs	r3, #5
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4826      	ldr	r0, [pc, #152]	; (8000b64 <HAL_SPI_MspInit+0x140>)
 8000acc:	f006 f86c 	bl	8006ba8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2024      	movs	r0, #36	; 0x24
 8000ad6:	f005 fff0 	bl	8006aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000ada:	2024      	movs	r0, #36	; 0x24
 8000adc:	f006 f809 	bl	8006af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ae0:	e035      	b.n	8000b4e <HAL_SPI_MspInit+0x12a>
  else if(hspi->Instance==SPI3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <HAL_SPI_MspInit+0x144>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d130      	bne.n	8000b4e <HAL_SPI_MspInit+0x12a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000af6:	6593      	str	r3, [r2, #88]	; 0x58
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <HAL_SPI_MspInit+0x138>)
 8000b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b14:	f003 0304 	and.w	r3, r3, #4
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b2e:	2306      	movs	r3, #6
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 031c 	add.w	r3, r7, #28
 8000b36:	4619      	mov	r1, r3
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <HAL_SPI_MspInit+0x13c>)
 8000b3a:	f006 f835 	bl	8006ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2100      	movs	r1, #0
 8000b42:	2033      	movs	r0, #51	; 0x33
 8000b44:	f005 ffb9 	bl	8006aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000b48:	2033      	movs	r0, #51	; 0x33
 8000b4a:	f005 ffd2 	bl	8006af2 <HAL_NVIC_EnableIRQ>
}
 8000b4e:	bf00      	nop
 8000b50:	3730      	adds	r7, #48	; 0x30
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40003800 	.word	0x40003800
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	48000800 	.word	0x48000800
 8000b64:	48000400 	.word	0x48000400
 8000b68:	40003c00 	.word	0x40003c00

08000b6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a34      	ldr	r2, [pc, #208]	; (8000c4c <HAL_TIM_Base_MspInit+0xe0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d114      	bne.n	8000ba8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b7e:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b82:	4a33      	ldr	r2, [pc, #204]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000b84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b88:	6613      	str	r3, [r2, #96]	; 0x60
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2018      	movs	r0, #24
 8000b9c:	f005 ff8d 	bl	8006aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ba0:	2018      	movs	r0, #24
 8000ba2:	f005 ffa6 	bl	8006af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000ba6:	e04c      	b.n	8000c42 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM2)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb0:	d114      	bne.n	8000bdc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bbe:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	201c      	movs	r0, #28
 8000bd0:	f005 ff73 	bl	8006aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bd4:	201c      	movs	r0, #28
 8000bd6:	f005 ff8c 	bl	8006af2 <HAL_NVIC_EnableIRQ>
}
 8000bda:	e032      	b.n	8000c42 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <HAL_TIM_Base_MspInit+0xe8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d114      	bne.n	8000c10 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2100      	movs	r1, #0
 8000c02:	201d      	movs	r0, #29
 8000c04:	f005 ff59 	bl	8006aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c08:	201d      	movs	r0, #29
 8000c0a:	f005 ff72 	bl	8006af2 <HAL_NVIC_EnableIRQ>
}
 8000c0e:	e018      	b.n	8000c42 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <HAL_TIM_Base_MspInit+0xec>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d113      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a0c      	ldr	r2, [pc, #48]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_TIM_Base_MspInit+0xe4>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2032      	movs	r0, #50	; 0x32
 8000c38:	f005 ff3f 	bl	8006aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c3c:	2032      	movs	r0, #50	; 0x32
 8000c3e:	f005 ff58 	bl	8006af2 <HAL_NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40012c00 	.word	0x40012c00
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40000400 	.word	0x40000400
 8000c58:	40000c00 	.word	0x40000c00

08000c5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b088      	sub	sp, #32
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a11      	ldr	r2, [pc, #68]	; (8000cc0 <HAL_TIM_MspPostInit+0x64>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_TIM_MspPostInit+0x68>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_TIM_MspPostInit+0x68>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_TIM_MspPostInit+0x68>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = Buzzer_Pin;
 8000c96:	2302      	movs	r3, #2
 8000c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f005 ff78 	bl	8006ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40000c00 	.word	0x40000c00
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f005 fd96 	bl	8006844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Reset_Pin);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f006 f91b 	bl	8006f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  StandbyStart(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f001 fcdc 	bl	80026e4 <StandbyStart>
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000d36:	f009 fa19 	bl	800a16c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200002ec 	.word	0x200002ec

08000d44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <TIM2_IRQHandler+0x28>)
 8000d4a:	f009 fa0f 	bl	800a16c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Buzzer(200);

  HAL_SuspendTick();
 8000d4e:	f005 fdbd 	bl	80068cc <HAL_SuspendTick>
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8000d52:	2204      	movs	r2, #4
 8000d54:	2100      	movs	r1, #0
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <TIM2_IRQHandler+0x2c>)
 8000d58:	f007 fd74 	bl	8008844 <HAL_RTCEx_SetWakeUpTimer_IT>
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <TIM2_IRQHandler+0x30>)
 8000d5e:	221f      	movs	r2, #31
 8000d60:	619a      	str	r2, [r3, #24]
  HAL_PWR_EnterSTANDBYMode();
 8000d62:	f006 f94f 	bl	8007004 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000338 	.word	0x20000338
 8000d70:	20000200 	.word	0x20000200
 8000d74:	40007000 	.word	0x40007000

08000d78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM3_IRQHandler+0x10>)
 8000d7e:	f009 f9f5 	bl	800a16c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000384 	.word	0x20000384

08000d8c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <SPI2_IRQHandler+0x10>)
 8000d92:	f008 fb8b 	bl	80094ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000224 	.word	0x20000224

08000da0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <TIM5_IRQHandler+0x10>)
 8000da6:	f009 f9e1 	bl	800a16c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200003d0 	.word	0x200003d0

08000db4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000db8:	4802      	ldr	r0, [pc, #8]	; (8000dc4 <SPI3_IRQHandler+0x10>)
 8000dba:	f008 fb77 	bl	80094ac <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000288 	.word	0x20000288

08000dc8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	e00a      	b.n	8000df0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dda:	f3af 8000 	nop.w
 8000dde:	4601      	mov	r1, r0
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	b2ca      	uxtb	r2, r1
 8000de8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3301      	adds	r3, #1
 8000dee:	617b      	str	r3, [r7, #20]
 8000df0:	697a      	ldr	r2, [r7, #20]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	dbf0      	blt.n	8000dda <_read+0x12>
  }

  return len;
 8000df8:	687b      	ldr	r3, [r7, #4]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	e009      	b.n	8000e28 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	60ba      	str	r2, [r7, #8]
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	3301      	adds	r3, #1
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbf1      	blt.n	8000e14 <_write+0x12>
  }
  return len;
 8000e30:	687b      	ldr	r3, [r7, #4]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_close>:

int _close(int file)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
 8000e5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e62:	605a      	str	r2, [r3, #4]
  return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_isatty>:

int _isatty(int file)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3714      	adds	r7, #20
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <_sbrk+0x5c>)
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <_sbrk+0x60>)
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d102      	bne.n	8000ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <_sbrk+0x64>)
 8000ec2:	4a12      	ldr	r2, [pc, #72]	; (8000f0c <_sbrk+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec6:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d207      	bcs.n	8000ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed4:	f00a fd46 	bl	800b964 <__errno>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	220c      	movs	r2, #12
 8000edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e009      	b.n	8000ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eea:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <_sbrk+0x64>)
 8000ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20018000 	.word	0x20018000
 8000f04:	00000400 	.word	0x00000400
 8000f08:	2000041c 	.word	0x2000041c
 8000f0c:	200007f0 	.word	0x200007f0

08000f10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <SystemInit+0x20>)
 8000f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <SystemInit+0x20>)
 8000f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff ffea 	bl	8000f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f3e:	490d      	ldr	r1, [pc, #52]	; (8000f74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f40:	4a0d      	ldr	r2, [pc, #52]	; (8000f78 <LoopForever+0xe>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f54:	4c0a      	ldr	r4, [pc, #40]	; (8000f80 <LoopForever+0x16>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f00a fd05 	bl	800b970 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f66:	f7ff f98b 	bl	8000280 <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f6c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f74:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8000f78:	0804e14c 	.word	0x0804e14c
  ldr r2, =_sbss
 8000f7c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8000f80:	200007ec 	.word	0x200007ec

08000f84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_2_IRQHandler>

08000f86 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000f86:	b480      	push	{r7}
 8000f88:	b087      	sub	sp, #28
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d801      	bhi.n	8000fa0 <jsmn_alloc_token+0x1a>
    return NULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e014      	b.n	8000fca <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	1c59      	adds	r1, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	6051      	str	r1, [r2, #4]
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000fc8:	697b      	ldr	r3, [r7, #20]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	371c      	adds	r7, #28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	607a      	str	r2, [r7, #4]
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	7afa      	ldrb	r2, [r7, #11]
 8000fea:	701a      	strb	r2, [r3, #0]
  token->start = start;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	683a      	ldr	r2, [r7, #0]
 8000ff6:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001020:	e03f      	b.n	80010a2 <jsmn_parse_primitive+0x96>
    switch (js[parser->pos]) {
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b7d      	cmp	r3, #125	; 0x7d
 800102e:	d045      	beq.n	80010bc <jsmn_parse_primitive+0xb0>
 8001030:	2b7d      	cmp	r3, #125	; 0x7d
 8001032:	dc1c      	bgt.n	800106e <jsmn_parse_primitive+0x62>
 8001034:	2b5d      	cmp	r3, #93	; 0x5d
 8001036:	d041      	beq.n	80010bc <jsmn_parse_primitive+0xb0>
 8001038:	2b5d      	cmp	r3, #93	; 0x5d
 800103a:	dc18      	bgt.n	800106e <jsmn_parse_primitive+0x62>
 800103c:	2b3a      	cmp	r3, #58	; 0x3a
 800103e:	dc16      	bgt.n	800106e <jsmn_parse_primitive+0x62>
 8001040:	2b20      	cmp	r3, #32
 8001042:	da04      	bge.n	800104e <jsmn_parse_primitive+0x42>
 8001044:	2b0a      	cmp	r3, #10
 8001046:	dc10      	bgt.n	800106a <jsmn_parse_primitive+0x5e>
 8001048:	2b09      	cmp	r3, #9
 800104a:	da37      	bge.n	80010bc <jsmn_parse_primitive+0xb0>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 800104c:	e00f      	b.n	800106e <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 800104e:	3b20      	subs	r3, #32
 8001050:	4a31      	ldr	r2, [pc, #196]	; (8001118 <jsmn_parse_primitive+0x10c>)
 8001052:	fa22 f303 	lsr.w	r3, r2, r3
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	bf14      	ite	ne
 800105e:	2301      	movne	r3, #1
 8001060:	2300      	moveq	r3, #0
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d129      	bne.n	80010bc <jsmn_parse_primitive+0xb0>
      break;
 8001068:	e001      	b.n	800106e <jsmn_parse_primitive+0x62>
    switch (js[parser->pos]) {
 800106a:	2b0d      	cmp	r3, #13
 800106c:	d026      	beq.n	80010bc <jsmn_parse_primitive+0xb0>
      break;
 800106e:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	4413      	add	r3, r2
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b1f      	cmp	r3, #31
 800107c:	d906      	bls.n	800108c <jsmn_parse_primitive+0x80>
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b7e      	cmp	r3, #126	; 0x7e
 800108a:	d905      	bls.n	8001098 <jsmn_parse_primitive+0x8c>
      parser->pos = start;
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 8001092:	f06f 0301 	mvn.w	r3, #1
 8001096:	e03a      	b.n	800110e <jsmn_parse_primitive+0x102>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d909      	bls.n	80010c0 <jsmn_parse_primitive+0xb4>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1b3      	bne.n	8001022 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80010ba:	e001      	b.n	80010c0 <jsmn_parse_primitive+0xb4>
      goto found;
 80010bc:	bf00      	nop
 80010be:	e000      	b.n	80010c2 <jsmn_parse_primitive+0xb6>
found:
 80010c0:	bf00      	nop
  if (tokens == NULL) {
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d106      	bne.n	80010d6 <jsmn_parse_primitive+0xca>
    parser->pos--;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]
    return 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e01b      	b.n	800110e <jsmn_parse_primitive+0x102>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 80010d6:	6a3a      	ldr	r2, [r7, #32]
 80010d8:	6839      	ldr	r1, [r7, #0]
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff ff53 	bl	8000f86 <jsmn_alloc_token>
 80010e0:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <jsmn_parse_primitive+0xe8>
    parser->pos = start;
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e00c      	b.n	800110e <jsmn_parse_primitive+0x102>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	2108      	movs	r1, #8
 80010fc:	6938      	ldr	r0, [r7, #16]
 80010fe:	f7ff ff6a 	bl	8000fd6 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	601a      	str	r2, [r3, #0]
  return 0;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	04001001 	.word	0x04001001

0800111c <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 800113a:	e0ba      	b.n	80012b2 <jsmn_parse_string+0x196>
    char c = js[parser->pos];
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	4413      	add	r3, r2
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2b22      	cmp	r3, #34	; 0x22
 800114c:	d11d      	bne.n	800118a <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <jsmn_parse_string+0x3c>
        return 0;
 8001154:	2300      	movs	r3, #0
 8001156:	e0be      	b.n	80012d6 <jsmn_parse_string+0x1ba>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800115a:	6839      	ldr	r1, [r7, #0]
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f7ff ff12 	bl	8000f86 <jsmn_alloc_token>
 8001162:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d105      	bne.n	8001176 <jsmn_parse_string+0x5a>
        parser->pos = start;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e0af      	b.n	80012d6 <jsmn_parse_string+0x1ba>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2104      	movs	r1, #4
 8001180:	6938      	ldr	r0, [r7, #16]
 8001182:	f7ff ff28 	bl	8000fd6 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 8001186:	2300      	movs	r3, #0
 8001188:	e0a5      	b.n	80012d6 <jsmn_parse_string+0x1ba>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	2b5c      	cmp	r3, #92	; 0x5c
 800118e:	f040 808b 	bne.w	80012a8 <jsmn_parse_string+0x18c>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	f240 8084 	bls.w	80012a8 <jsmn_parse_string+0x18c>
      int i;
      parser->pos++;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1c5a      	adds	r2, r3, #1
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b75      	cmp	r3, #117	; 0x75
 80011b6:	dc70      	bgt.n	800129a <jsmn_parse_string+0x17e>
 80011b8:	2b5c      	cmp	r3, #92	; 0x5c
 80011ba:	da04      	bge.n	80011c6 <jsmn_parse_string+0xaa>
 80011bc:	2b22      	cmp	r3, #34	; 0x22
 80011be:	d072      	beq.n	80012a6 <jsmn_parse_string+0x18a>
 80011c0:	2b2f      	cmp	r3, #47	; 0x2f
 80011c2:	d070      	beq.n	80012a6 <jsmn_parse_string+0x18a>
 80011c4:	e069      	b.n	800129a <jsmn_parse_string+0x17e>
 80011c6:	3b5c      	subs	r3, #92	; 0x5c
 80011c8:	2201      	movs	r2, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <jsmn_parse_string+0x1c4>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	bf14      	ite	ne
 80011d4:	2301      	movne	r3, #1
 80011d6:	2300      	moveq	r3, #0
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d163      	bne.n	80012a6 <jsmn_parse_string+0x18a>
 80011de:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	bf14      	ite	ne
 80011e6:	2301      	movne	r3, #1
 80011e8:	2300      	moveq	r3, #0
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d054      	beq.n	800129a <jsmn_parse_string+0x17e>
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e037      	b.n	8001270 <jsmn_parse_string+0x154>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68ba      	ldr	r2, [r7, #8]
 8001206:	4413      	add	r3, r2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b2f      	cmp	r3, #47	; 0x2f
 800120c:	d906      	bls.n	800121c <jsmn_parse_string+0x100>
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b39      	cmp	r3, #57	; 0x39
 800121a:	d921      	bls.n	8001260 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	4413      	add	r3, r2
 8001224:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001226:	2b40      	cmp	r3, #64	; 0x40
 8001228:	d906      	bls.n	8001238 <jsmn_parse_string+0x11c>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	4413      	add	r3, r2
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b46      	cmp	r3, #70	; 0x46
 8001236:	d913      	bls.n	8001260 <jsmn_parse_string+0x144>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8001242:	2b60      	cmp	r3, #96	; 0x60
 8001244:	d906      	bls.n	8001254 <jsmn_parse_string+0x138>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b66      	cmp	r3, #102	; 0x66
 8001252:	d905      	bls.n	8001260 <jsmn_parse_string+0x144>
            parser->pos = start;
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 800125a:	f06f 0301 	mvn.w	r3, #1
 800125e:	e03a      	b.n	80012d6 <jsmn_parse_string+0x1ba>
          }
          parser->pos++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	601a      	str	r2, [r3, #0]
             i++) {
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b03      	cmp	r3, #3
 8001274:	dc0b      	bgt.n	800128e <jsmn_parse_string+0x172>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	d906      	bls.n	800128e <jsmn_parse_string+0x172>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1b8      	bne.n	8001200 <jsmn_parse_string+0xe4>
        }
        parser->pos--;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1e5a      	subs	r2, r3, #1
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	601a      	str	r2, [r3, #0]
        break;
 8001298:	e006      	b.n	80012a8 <jsmn_parse_string+0x18c>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 80012a0:	f06f 0301 	mvn.w	r3, #1
 80012a4:	e017      	b.n	80012d6 <jsmn_parse_string+0x1ba>
        break;
 80012a6:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1c5a      	adds	r2, r3, #1
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d907      	bls.n	80012cc <jsmn_parse_string+0x1b0>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f47f af38 	bne.w	800113c <jsmn_parse_string+0x20>
      }
    }
  }
  parser->pos = start;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 80012d2:	f06f 0302 	mvn.w	r3, #2
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	01440441 	.word	0x01440441

080012e4 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len, jsmntok_t *tokens, const unsigned int num_tokens)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80012f8:	e176      	b.n	80015e8 <jsmn_parse+0x304>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	4413      	add	r3, r2
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8001306:	7ffb      	ldrb	r3, [r7, #31]
 8001308:	2b7d      	cmp	r3, #125	; 0x7d
 800130a:	d06c      	beq.n	80013e6 <jsmn_parse+0x102>
 800130c:	2b7d      	cmp	r3, #125	; 0x7d
 800130e:	f300 8136 	bgt.w	800157e <jsmn_parse+0x29a>
 8001312:	2b7b      	cmp	r3, #123	; 0x7b
 8001314:	d030      	beq.n	8001378 <jsmn_parse+0x94>
 8001316:	2b7b      	cmp	r3, #123	; 0x7b
 8001318:	f300 8131 	bgt.w	800157e <jsmn_parse+0x29a>
 800131c:	2b5d      	cmp	r3, #93	; 0x5d
 800131e:	d062      	beq.n	80013e6 <jsmn_parse+0x102>
 8001320:	2b5d      	cmp	r3, #93	; 0x5d
 8001322:	f300 812c 	bgt.w	800157e <jsmn_parse+0x29a>
 8001326:	2b5b      	cmp	r3, #91	; 0x5b
 8001328:	d026      	beq.n	8001378 <jsmn_parse+0x94>
 800132a:	2b5b      	cmp	r3, #91	; 0x5b
 800132c:	f300 8127 	bgt.w	800157e <jsmn_parse+0x29a>
 8001330:	2b3a      	cmp	r3, #58	; 0x3a
 8001332:	f000 80d6 	beq.w	80014e2 <jsmn_parse+0x1fe>
 8001336:	2b3a      	cmp	r3, #58	; 0x3a
 8001338:	f300 8121 	bgt.w	800157e <jsmn_parse+0x29a>
 800133c:	2b2c      	cmp	r3, #44	; 0x2c
 800133e:	f000 80d7 	beq.w	80014f0 <jsmn_parse+0x20c>
 8001342:	2b2c      	cmp	r3, #44	; 0x2c
 8001344:	f300 811b 	bgt.w	800157e <jsmn_parse+0x29a>
 8001348:	2b20      	cmp	r3, #32
 800134a:	dc11      	bgt.n	8001370 <jsmn_parse+0x8c>
 800134c:	2b09      	cmp	r3, #9
 800134e:	f2c0 8116 	blt.w	800157e <jsmn_parse+0x29a>
 8001352:	3b09      	subs	r3, #9
 8001354:	4a91      	ldr	r2, [pc, #580]	; (800159c <jsmn_parse+0x2b8>)
 8001356:	fa22 f303 	lsr.w	r3, r2, r3
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf14      	ite	ne
 8001362:	2301      	movne	r3, #1
 8001364:	2300      	moveq	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	f040 812d 	bne.w	80015c8 <jsmn_parse+0x2e4>
 800136e:	e106      	b.n	800157e <jsmn_parse+0x29a>
 8001370:	2b22      	cmp	r3, #34	; 0x22
 8001372:	f000 8092 	beq.w	800149a <jsmn_parse+0x1b6>
 8001376:	e102      	b.n	800157e <jsmn_parse+0x29a>
    case '{':
    case '[':
      count++;
 8001378:	6a3b      	ldr	r3, [r7, #32]
 800137a:	3301      	adds	r3, #1
 800137c:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	f000 8123 	beq.w	80015cc <jsmn_parse+0x2e8>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8001386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001388:	6839      	ldr	r1, [r7, #0]
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff fdfb 	bl	8000f86 <jsmn_alloc_token>
 8001390:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <jsmn_parse+0xba>
        return JSMN_ERROR_NOMEM;
 8001398:	f04f 33ff 	mov.w	r3, #4294967295
 800139c:	e153      	b.n	8001646 <jsmn_parse+0x362>
      }
      if (parser->toksuper != -1) {
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	d00a      	beq.n	80013be <jsmn_parse+0xda>
        jsmntok_t *t = &tokens[parser->toksuper];
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	683a      	ldr	r2, [r7, #0]
 80013b0:	4413      	add	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	2b7b      	cmp	r3, #123	; 0x7b
 80013c2:	d101      	bne.n	80013c8 <jsmn_parse+0xe4>
 80013c4:	2201      	movs	r2, #1
 80013c6:	e000      	b.n	80013ca <jsmn_parse+0xe6>
 80013c8:	2202      	movs	r2, #2
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	3b01      	subs	r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	609a      	str	r2, [r3, #8]
      break;
 80013e4:	e0fb      	b.n	80015de <jsmn_parse+0x2fa>
    case '}':
    case ']':
      if (tokens == NULL) {
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f000 80f1 	beq.w	80015d0 <jsmn_parse+0x2ec>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80013ee:	7ffb      	ldrb	r3, [r7, #31]
 80013f0:	2b7d      	cmp	r3, #125	; 0x7d
 80013f2:	d101      	bne.n	80013f8 <jsmn_parse+0x114>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e000      	b.n	80013fa <jsmn_parse+0x116>
 80013f8:	2302      	movs	r3, #2
 80013fa:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	3b01      	subs	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
 8001404:	e024      	b.n	8001450 <jsmn_parse+0x16c>
        token = &tokens[i];
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	4413      	add	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001418:	d017      	beq.n	800144a <jsmn_parse+0x166>
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001422:	d112      	bne.n	800144a <jsmn_parse+0x166>
          if (token->type != type) {
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	7fba      	ldrb	r2, [r7, #30]
 800142a:	429a      	cmp	r2, r3
 800142c:	d002      	beq.n	8001434 <jsmn_parse+0x150>
            return JSMN_ERROR_INVAL;
 800142e:	f06f 0301 	mvn.w	r3, #1
 8001432:	e108      	b.n	8001646 <jsmn_parse+0x362>
          }
          parser->toksuper = -1;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f04f 32ff 	mov.w	r2, #4294967295
 800143a:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	461a      	mov	r2, r3
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	609a      	str	r2, [r3, #8]
          break;
 8001448:	e005      	b.n	8001456 <jsmn_parse+0x172>
      for (i = parser->toknext - 1; i >= 0; i--) {
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	3b01      	subs	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
 8001450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001452:	2b00      	cmp	r3, #0
 8001454:	dad7      	bge.n	8001406 <jsmn_parse+0x122>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800145c:	d119      	bne.n	8001492 <jsmn_parse+0x1ae>
        return JSMN_ERROR_INVAL;
 800145e:	f06f 0301 	mvn.w	r3, #1
 8001462:	e0f0      	b.n	8001646 <jsmn_parse+0x362>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	4413      	add	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001476:	d009      	beq.n	800148c <jsmn_parse+0x1a8>
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d104      	bne.n	800148c <jsmn_parse+0x1a8>
          parser->toksuper = i;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001486:	609a      	str	r2, [r3, #8]
          break;
 8001488:	bf00      	nop
        }
      }
#endif
      break;
 800148a:	e0a8      	b.n	80015de <jsmn_parse+0x2fa>
      for (; i >= 0; i--) {
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	3b01      	subs	r3, #1
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	2b00      	cmp	r3, #0
 8001496:	dae5      	bge.n	8001464 <jsmn_parse+0x180>
      break;
 8001498:	e0a1      	b.n	80015de <jsmn_parse+0x2fa>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 800149a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff fe39 	bl	800111c <jsmn_parse_string>
 80014aa:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da01      	bge.n	80014b6 <jsmn_parse+0x1d2>
        return r;
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	e0c7      	b.n	8001646 <jsmn_parse+0x362>
      }
      count++;
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	3301      	adds	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	f000 8086 	beq.w	80015d4 <jsmn_parse+0x2f0>
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 8082 	beq.w	80015d4 <jsmn_parse+0x2f0>
        tokens[parser->toksuper].size++;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	3201      	adds	r2, #1
 80014de:	60da      	str	r2, [r3, #12]
      }
      break;
 80014e0:	e078      	b.n	80015d4 <jsmn_parse+0x2f0>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	609a      	str	r2, [r3, #8]
      break;
 80014ee:	e076      	b.n	80015de <jsmn_parse+0x2fa>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d070      	beq.n	80015d8 <jsmn_parse+0x2f4>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fe:	d06b      	beq.n	80015d8 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 800150c:	2b02      	cmp	r3, #2
 800150e:	d063      	beq.n	80015d8 <jsmn_parse+0x2f4>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	011b      	lsls	r3, r3, #4
 8001516:	683a      	ldr	r2, [r7, #0]
 8001518:	4413      	add	r3, r2
 800151a:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 800151c:	2b01      	cmp	r3, #1
 800151e:	d05b      	beq.n	80015d8 <jsmn_parse+0x2f4>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	3b01      	subs	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
 8001528:	e025      	b.n	8001576 <jsmn_parse+0x292>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	4413      	add	r3, r2
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d006      	beq.n	8001546 <jsmn_parse+0x262>
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	011b      	lsls	r3, r3, #4
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	4413      	add	r3, r2
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d114      	bne.n	8001570 <jsmn_parse+0x28c>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	4413      	add	r3, r2
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d00c      	beq.n	8001570 <jsmn_parse+0x28c>
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	4413      	add	r3, r2
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d104      	bne.n	8001570 <jsmn_parse+0x28c>
              parser->toksuper = i;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156a:	609a      	str	r2, [r3, #8]
              break;
 800156c:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 800156e:	e033      	b.n	80015d8 <jsmn_parse+0x2f4>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8001570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001572:	3b01      	subs	r3, #1
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	2b00      	cmp	r3, #0
 800157a:	dad6      	bge.n	800152a <jsmn_parse+0x246>
      break;
 800157c:	e02c      	b.n	80015d8 <jsmn_parse+0x2f4>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 800157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fd3f 	bl	800100c <jsmn_parse_primitive>
 800158e:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da04      	bge.n	80015a0 <jsmn_parse+0x2bc>
        return r;
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	e055      	b.n	8001646 <jsmn_parse+0x362>
 800159a:	bf00      	nop
 800159c:	00800013 	.word	0x00800013
      }
      count++;
 80015a0:	6a3b      	ldr	r3, [r7, #32]
 80015a2:	3301      	adds	r3, #1
 80015a4:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d015      	beq.n	80015dc <jsmn_parse+0x2f8>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d012      	beq.n	80015dc <jsmn_parse+0x2f8>
        tokens[parser->toksuper].size++;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	4413      	add	r3, r2
 80015c0:	68da      	ldr	r2, [r3, #12]
 80015c2:	3201      	adds	r2, #1
 80015c4:	60da      	str	r2, [r3, #12]
      }
      break;
 80015c6:	e009      	b.n	80015dc <jsmn_parse+0x2f8>
      break;
 80015c8:	bf00      	nop
 80015ca:	e008      	b.n	80015de <jsmn_parse+0x2fa>
        break;
 80015cc:	bf00      	nop
 80015ce:	e006      	b.n	80015de <jsmn_parse+0x2fa>
        break;
 80015d0:	bf00      	nop
 80015d2:	e004      	b.n	80015de <jsmn_parse+0x2fa>
      break;
 80015d4:	bf00      	nop
 80015d6:	e002      	b.n	80015de <jsmn_parse+0x2fa>
      break;
 80015d8:	bf00      	nop
 80015da:	e000      	b.n	80015de <jsmn_parse+0x2fa>
      break;
 80015dc:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d907      	bls.n	8001602 <jsmn_parse+0x31e>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	4413      	add	r3, r2
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f47f ae7c 	bne.w	80012fa <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01d      	beq.n	8001644 <jsmn_parse+0x360>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	3b01      	subs	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
 8001610:	e015      	b.n	800163e <jsmn_parse+0x35a>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	011b      	lsls	r3, r3, #4
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	4413      	add	r3, r2
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001620:	d00a      	beq.n	8001638 <jsmn_parse+0x354>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4413      	add	r3, r2
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d102      	bne.n	8001638 <jsmn_parse+0x354>
        return JSMN_ERROR_PART;
 8001632:	f06f 0302 	mvn.w	r3, #2
 8001636:	e006      	b.n	8001646 <jsmn_parse+0x362>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	3b01      	subs	r3, #1
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	2b00      	cmp	r3, #0
 8001642:	dae6      	bge.n	8001612 <jsmn_parse+0x32e>
      }
    }
  }

  return count;
 8001644:	6a3b      	ldr	r3, [r7, #32]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop

08001650 <jsmn_init>:
/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 32ff 	mov.w	r2, #4294967295
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <u8Connection_Loop>:
uint16_t RSR_Len = 0;
uint8_t u8Data_Buffer[512];
uint8_t u8Close = 0;

uint8_t u8Connection_Loop()
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	if(getSn_SR(u8Socket) == SOCK_ESTABLISHED)
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <u8Connection_Loop+0x50>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	3301      	adds	r3, #1
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800168a:	4618      	mov	r0, r3
 800168c:	f002 f9c4 	bl	8003a18 <WIZCHIP_READ>
 8001690:	4603      	mov	r3, r0
 8001692:	2b17      	cmp	r3, #23
 8001694:	d104      	bne.n	80016a0 <u8Connection_Loop+0x28>
	{
	  u8Pull_Request();
 8001696:	f000 fa17 	bl	8001ac8 <u8Pull_Request>
	  u8Waiting_For_Reply();
 800169a:	f000 f9bd 	bl	8001a18 <u8Waiting_For_Reply>
 800169e:	e00f      	b.n	80016c0 <u8Connection_Loop+0x48>
	}
	else
	{
	  if (u8New_TCP_Socket() == 1)
 80016a0:	f000 f960 	bl	8001964 <u8New_TCP_Socket>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d106      	bne.n	80016b8 <u8Connection_Loop+0x40>
	  {
		  u8New_TCP_Connetion();
 80016aa:	f000 f995 	bl	80019d8 <u8New_TCP_Connetion>
		  u8Pull_Request();
 80016ae:	f000 fa0b 	bl	8001ac8 <u8Pull_Request>
		  u8Waiting_For_Reply();
 80016b2:	f000 f9b1 	bl	8001a18 <u8Waiting_For_Reply>
 80016b6:	e003      	b.n	80016c0 <u8Connection_Loop+0x48>
	  }
	  else
	  {
		  HAL_Delay(2000);
 80016b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016bc:	f005 f8e2 	bl	8006884 <HAL_Delay>
	  }
	}
	return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000004 	.word	0x20000004

080016cc <jsoneq>:

static int jsoneq(const char* json, jsmntok_t* tok, const char* s)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
    if (tok->type == JSMN_STRING && (int)strlen(s) == tok->end - tok->start && strncmp(json + tok->start, s, tok->end - tok->start) == 0)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b04      	cmp	r3, #4
 80016de:	d11e      	bne.n	800171e <jsoneq+0x52>
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7fe fd75 	bl	80001d0 <strlen>
 80016e6:	4603      	mov	r3, r0
 80016e8:	4619      	mov	r1, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	4299      	cmp	r1, r3
 80016f6:	d112      	bne.n	800171e <jsoneq+0x52>
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	461a      	mov	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1898      	adds	r0, r3, r2
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	461a      	mov	r2, r3
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f00a f8c0 	bl	800b894 <strncmp>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <jsoneq+0x52>
    {
        return 0;
 800171a:	2300      	movs	r3, #0
 800171c:	e001      	b.n	8001722 <jsoneq+0x56>
    }
    return -1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <cs_sel>:

void cs_sel()
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ETH_GPIO_Port, CS_ETH_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f005 fbf8 	bl	8006f2c <HAL_GPIO_WritePin>
}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}

08001740 <cs_desel>:

void cs_desel()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_ETH_GPIO_Port, CS_ETH_Pin, GPIO_PIN_SET);
 8001744:	2201      	movs	r2, #1
 8001746:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800174a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174e:	f005 fbed 	bl	8006f2c <HAL_GPIO_WritePin>
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <spi_rb>:

uint8_t spi_rb()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi3, &rbuf, 1, 0xFFFFFFFF);
 800175e:	1df9      	adds	r1, r7, #7
 8001760:	f04f 33ff 	mov.w	r3, #4294967295
 8001764:	2201      	movs	r2, #1
 8001766:	4804      	ldr	r0, [pc, #16]	; (8001778 <spi_rb+0x20>)
 8001768:	f007 fb47 	bl	8008dfa <HAL_SPI_Receive>
	return rbuf;
 800176c:	79fb      	ldrb	r3, [r7, #7]
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000288 	.word	0x20000288

0800177c <spi_wb>:
void spi_wb(uint8_t b)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi3, &b, 1, 0xFFFFFFFF);
 8001786:	1df9      	adds	r1, r7, #7
 8001788:	f04f 33ff 	mov.w	r3, #4294967295
 800178c:	2201      	movs	r2, #1
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <spi_wb+0x20>)
 8001790:	f007 f9be 	bl	8008b10 <HAL_SPI_Transmit>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000288 	.word	0x20000288

080017a0 <check_phy_link>:

void check_phy_link(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
    uint8_t phycfgr = getPHYCFGR();  // PHY-Konfigurationsregister auslesen
 80017a6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80017aa:	f002 f935 	bl	8003a18 <WIZCHIP_READ>
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
    if (phycfgr & PHYCFGR_LNK_ON)
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <check_phy_link+0x24>
    {
        printf("PHY link is up\n");
 80017bc:	4805      	ldr	r0, [pc, #20]	; (80017d4 <check_phy_link+0x34>)
 80017be:	f009 ff33 	bl	800b628 <puts>
    } else
    {
        printf("PHY link is down\n");
    }
}
 80017c2:	e002      	b.n	80017ca <check_phy_link+0x2a>
        printf("PHY link is down\n");
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <check_phy_link+0x38>)
 80017c6:	f009 ff2f 	bl	800b628 <puts>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	0800ce0c 	.word	0x0800ce0c
 80017d8:	0800ce1c 	.word	0x0800ce1c

080017dc <dhcp_process>:

uint8_t dhcp_process(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af02      	add	r7, sp, #8
    uint8_t dhcp_status;

    // Starte den DHCP-Prozess
    dhcp_status = DHCP_run();
 80017e2:	f003 fc57 	bl	8005094 <DHCP_run>
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]

    if (dhcp_status == DHCP_IP_LEASED)
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	d116      	bne.n	800181e <dhcp_process+0x42>
    {
        printf("DHCP Success: IP leased\n");
 80017f0:	4814      	ldr	r0, [pc, #80]	; (8001844 <dhcp_process+0x68>)
 80017f2:	f009 ff19 	bl	800b628 <puts>
        wizchip_getnetinfo(&netInfo); // Netzwerkinformationen holen
 80017f6:	4814      	ldr	r0, [pc, #80]	; (8001848 <dhcp_process+0x6c>)
 80017f8:	f004 ff88 	bl	800670c <wizchip_getnetinfo>
        printf("IP: %d.%d.%d.%d\n", netInfo.ip[0], netInfo.ip[1], netInfo.ip[2], netInfo.ip[3]);
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <dhcp_process+0x6c>)
 80017fe:	799b      	ldrb	r3, [r3, #6]
 8001800:	4619      	mov	r1, r3
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <dhcp_process+0x6c>)
 8001804:	79db      	ldrb	r3, [r3, #7]
 8001806:	461a      	mov	r2, r3
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <dhcp_process+0x6c>)
 800180a:	7a1b      	ldrb	r3, [r3, #8]
 800180c:	4618      	mov	r0, r3
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <dhcp_process+0x6c>)
 8001810:	7a5b      	ldrb	r3, [r3, #9]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4603      	mov	r3, r0
 8001816:	480d      	ldr	r0, [pc, #52]	; (800184c <dhcp_process+0x70>)
 8001818:	f009 fea0 	bl	800b55c <iprintf>
 800181c:	e00c      	b.n	8001838 <dhcp_process+0x5c>
    }
    else if (dhcp_status == DHCP_FAILED)
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <dhcp_process+0x50>
    {
        printf("DHCP failed\n");
 8001824:	480a      	ldr	r0, [pc, #40]	; (8001850 <dhcp_process+0x74>)
 8001826:	f009 feff 	bl	800b628 <puts>
 800182a:	e005      	b.n	8001838 <dhcp_process+0x5c>
    }
    else if (dhcp_status == DHCP_RUNNING)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d102      	bne.n	8001838 <dhcp_process+0x5c>
    {
        printf("DHCP still running...\n");
 8001832:	4808      	ldr	r0, [pc, #32]	; (8001854 <dhcp_process+0x78>)
 8001834:	f009 fef8 	bl	800b628 <puts>
    }

    return dhcp_status;
 8001838:	79fb      	ldrb	r3, [r7, #7]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	0800ce30 	.word	0x0800ce30
 8001848:	2000000c 	.word	0x2000000c
 800184c:	0800ce48 	.word	0x0800ce48
 8001850:	0800ce5c 	.word	0x0800ce5c
 8001854:	0800ce68 	.word	0x0800ce68

08001858 <u8Init_Ethernet>:
	return 0;
}*/


uint8_t u8Init_Ethernet()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800185e:	af00      	add	r7, sp, #0
    // Setze den Ethernet-Reset-Pin
    HAL_GPIO_WritePin(RST_ETH_GPIO_Port, RST_ETH_Pin, 1);
 8001860:	2201      	movs	r2, #1
 8001862:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001866:	4835      	ldr	r0, [pc, #212]	; (800193c <u8Init_Ethernet+0xe4>)
 8001868:	f005 fb60 	bl	8006f2c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800186c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001870:	f005 f808 	bl	8006884 <HAL_Delay>
    HAL_GPIO_WritePin(RST_ETH_GPIO_Port, RST_ETH_Pin, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187a:	4830      	ldr	r0, [pc, #192]	; (800193c <u8Init_Ethernet+0xe4>)
 800187c:	f005 fb56 	bl	8006f2c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001880:	2064      	movs	r0, #100	; 0x64
 8001882:	f004 ffff 	bl	8006884 <HAL_Delay>
    HAL_GPIO_WritePin(RST_ETH_GPIO_Port, RST_ETH_Pin, 1);
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188c:	482b      	ldr	r0, [pc, #172]	; (800193c <u8Init_Ethernet+0xe4>)
 800188e:	f005 fb4d 	bl	8006f2c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001892:	2064      	movs	r0, #100	; 0x64
 8001894:	f004 fff6 	bl	8006884 <HAL_Delay>

    // Initialisiere CS- und SPI-Funktionen für W5500
    reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8001898:	4929      	ldr	r1, [pc, #164]	; (8001940 <u8Init_Ethernet+0xe8>)
 800189a:	482a      	ldr	r0, [pc, #168]	; (8001944 <u8Init_Ethernet+0xec>)
 800189c:	f004 fdcc 	bl	8006438 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 80018a0:	4929      	ldr	r1, [pc, #164]	; (8001948 <u8Init_Ethernet+0xf0>)
 80018a2:	482a      	ldr	r0, [pc, #168]	; (800194c <u8Init_Ethernet+0xf4>)
 80018a4:	f004 fdee 	bl	8006484 <reg_wizchip_spi_cbfunc>

    // Initialisiere den W5500-Chip
    if (wizchip_init(bufSize, bufSize) != 0)
 80018a8:	4929      	ldr	r1, [pc, #164]	; (8001950 <u8Init_Ethernet+0xf8>)
 80018aa:	4829      	ldr	r0, [pc, #164]	; (8001950 <u8Init_Ethernet+0xf8>)
 80018ac:	f004 fe62 	bl	8006574 <wizchip_init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <u8Init_Ethernet+0x64>
    {
        printf("W5500 initialization failed\n");
 80018b6:	4827      	ldr	r0, [pc, #156]	; (8001954 <u8Init_Ethernet+0xfc>)
 80018b8:	f009 feb6 	bl	800b628 <puts>
        //return 1;
    }
    HAL_Delay(4000);
 80018bc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80018c0:	f004 ffe0 	bl	8006884 <HAL_Delay>

    // Setze Netzwerkinformationen (MAC, IP auf 0, DHCP aktivieren)
    wizchip_setnetinfo(&netInfo);
 80018c4:	4824      	ldr	r0, [pc, #144]	; (8001958 <u8Init_Ethernet+0x100>)
 80018c6:	f004 fee1 	bl	800668c <wizchip_setnetinfo>
    wizchip_getnetinfo(&netInfo);
 80018ca:	4823      	ldr	r0, [pc, #140]	; (8001958 <u8Init_Ethernet+0x100>)
 80018cc:	f004 ff1e 	bl	800670c <wizchip_getnetinfo>


    // Initialisiere den DHCP-Prozess
    uint8_t dhcp_buffer[548];
    DHCP_init(0, dhcp_buffer);
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	2000      	movs	r0, #0
 80018d6:	f003 fd95 	bl	8005404 <DHCP_init>
    uint8_t dhcp_status = DHCP_FAILED;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
    int iFail = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    // DHCP-Prozess-Schleife
    while(dhcp_status != DHCP_IP_LEASED)
 80018e6:	e01f      	b.n	8001928 <u8Init_Ethernet+0xd0>
    {
    	if(iFail > 10)
 80018e8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80018ec:	2b0a      	cmp	r3, #10
 80018ee:	dd0b      	ble.n	8001908 <u8Init_Ethernet+0xb0>
    	{
    		  HAL_SuspendTick();
 80018f0:	f004 ffec 	bl	80068cc <HAL_SuspendTick>
    		  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 80018f4:	2204      	movs	r2, #4
 80018f6:	2100      	movs	r1, #0
 80018f8:	4818      	ldr	r0, [pc, #96]	; (800195c <u8Init_Ethernet+0x104>)
 80018fa:	f006 ffa3 	bl	8008844 <HAL_RTCEx_SetWakeUpTimer_IT>
    		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <u8Init_Ethernet+0x108>)
 8001900:	221f      	movs	r2, #31
 8001902:	619a      	str	r2, [r3, #24]
    		  HAL_PWR_EnterSTANDBYMode();
 8001904:	f005 fb7e 	bl	8007004 <HAL_PWR_EnterSTANDBYMode>
    	}
        check_phy_link();  // PHY-Link prüfen
 8001908:	f7ff ff4a 	bl	80017a0 <check_phy_link>
        dhcp_status = dhcp_process();
 800190c:	f7ff ff66 	bl	80017dc <dhcp_process>
 8001910:	4603      	mov	r3, r0
 8001912:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
        HAL_Delay(1000);
 8001916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800191a:	f004 ffb3 	bl	8006884 <HAL_Delay>
        iFail++;
 800191e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001922:	3301      	adds	r3, #1
 8001924:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    while(dhcp_status != DHCP_IP_LEASED)
 8001928:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 800192c:	2b04      	cmp	r3, #4
 800192e:	d1db      	bne.n	80018e8 <u8Init_Ethernet+0x90>
    }

    return 0;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	48000400 	.word	0x48000400
 8001940:	08001741 	.word	0x08001741
 8001944:	0800172b 	.word	0x0800172b
 8001948:	0800177d 	.word	0x0800177d
 800194c:	08001759 	.word	0x08001759
 8001950:	20000008 	.word	0x20000008
 8001954:	0800ce80 	.word	0x0800ce80
 8001958:	2000000c 	.word	0x2000000c
 800195c:	20000200 	.word	0x20000200
 8001960:	40007000 	.word	0x40007000

08001964 <u8New_TCP_Socket>:

uint8_t u8New_TCP_Socket()
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
	int8_t  u8Return = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	71fb      	strb	r3, [r7, #7]
	if (socket(u8Socket, Sn_MR_TCP, 1234, SF_TCP_NODELAY) == u8Socket)
 800196e:	4b0a      	ldr	r3, [pc, #40]	; (8001998 <u8New_TCP_Socket+0x34>)
 8001970:	7818      	ldrb	r0, [r3, #0]
 8001972:	2320      	movs	r3, #32
 8001974:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8001978:	2101      	movs	r1, #1
 800197a:	f003 fddf 	bl	800553c <socket>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <u8New_TCP_Socket+0x34>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d101      	bne.n	800198e <u8New_TCP_Socket+0x2a>
	{
		u8Return = 1;
 800198a:	2301      	movs	r3, #1
 800198c:	71fb      	strb	r3, [r7, #7]
	}
	return u8Return;
 800198e:	79fb      	ldrb	r3, [r7, #7]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000004 	.word	0x20000004

0800199c <u8Close_TCP_Socket>:

uint8_t u8Close_TCP_Socket()
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	while(u8Close != SOCK_OK)
 80019a0:	e008      	b.n	80019b4 <u8Close_TCP_Socket+0x18>
	{
	  u8Close = close(u8Socket);
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <u8Close_TCP_Socket+0x34>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fedc 	bl	8005764 <close>
 80019ac:	4603      	mov	r3, r0
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <u8Close_TCP_Socket+0x38>)
 80019b2:	701a      	strb	r2, [r3, #0]
	while(u8Close != SOCK_OK)
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <u8Close_TCP_Socket+0x38>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d1f2      	bne.n	80019a2 <u8Close_TCP_Socket+0x6>
	}
	u8Close = 0;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <u8Close_TCP_Socket+0x38>)
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]

	HAL_Delay(2000);
 80019c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019c6:	f004 ff5d 	bl	8006884 <HAL_Delay>
	return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000004 	.word	0x20000004
 80019d4:	20000628 	.word	0x20000628

080019d8 <u8New_TCP_Connetion>:

uint8_t u8New_TCP_Connetion()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	while(u8ReturnLAN != SOCK_OK)
 80019dc:	e00b      	b.n	80019f6 <u8New_TCP_Connetion+0x1e>
	{
	  u8ReturnLAN =  connect(u8Socket, u8ServerIP, 1234);
 80019de:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <u8New_TCP_Connetion+0x34>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	f240 42d2 	movw	r2, #1234	; 0x4d2
 80019e6:	490a      	ldr	r1, [pc, #40]	; (8001a10 <u8New_TCP_Connetion+0x38>)
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 ff29 	bl	8005840 <connect>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <u8New_TCP_Connetion+0x3c>)
 80019f4:	701a      	strb	r2, [r3, #0]
	while(u8ReturnLAN != SOCK_OK)
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <u8New_TCP_Connetion+0x3c>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d1ef      	bne.n	80019de <u8New_TCP_Connetion+0x6>
	}
	u8ReturnLAN = 0;
 80019fe:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <u8New_TCP_Connetion+0x3c>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
	return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	20000024 	.word	0x20000024
 8001a14:	20000420 	.word	0x20000420

08001a18 <u8Waiting_For_Reply>:

uint8_t u8Waiting_For_Reply()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t u8Counter = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	71fb      	strb	r3, [r7, #7]
	uint8_t u8Sock_Established = 1;
 8001a22:	2301      	movs	r3, #1
 8001a24:	71bb      	strb	r3, [r7, #6]
	while((u16Received_Len == 0)&&(u8Sock_Established == 1))
 8001a26:	e037      	b.n	8001a98 <u8Waiting_For_Reply+0x80>
	{

		if((RSR_Len = getSn_RX_RSR(u8Socket)) > 0)
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <u8Waiting_For_Reply+0xa0>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 f998 	bl	8003d62 <getSn_RX_RSR>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <u8Waiting_For_Reply+0xa4>)
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <u8Waiting_For_Reply+0xa4>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d00e      	beq.n	8001a60 <u8Waiting_For_Reply+0x48>
		{
		  u16Received_Len = recv(u8Socket, u8Data_Buffer, RSR_Len);
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <u8Waiting_For_Reply+0xa0>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <u8Waiting_For_Reply+0xa4>)
 8001a48:	8812      	ldrh	r2, [r2, #0]
 8001a4a:	491d      	ldr	r1, [pc, #116]	; (8001ac0 <u8Waiting_For_Reply+0xa8>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f004 f8cd 	bl	8005bec <recv>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <u8Waiting_For_Reply+0xac>)
 8001a58:	801a      	strh	r2, [r3, #0]
		  u8Use_Data(u8Data_Buffer);
 8001a5a:	4819      	ldr	r0, [pc, #100]	; (8001ac0 <u8Waiting_For_Reply+0xa8>)
 8001a5c:	f000 f868 	bl	8001b30 <u8Use_Data>
		}
		if (u8Counter > 19)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b13      	cmp	r3, #19
 8001a64:	d912      	bls.n	8001a8c <u8Waiting_For_Reply+0x74>
		{
			if(getSn_SR(u8Socket) != SOCK_ESTABLISHED)
 8001a66:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <u8Waiting_For_Reply+0xa0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8001a74:	4618      	mov	r0, r3
 8001a76:	f001 ffcf 	bl	8003a18 <WIZCHIP_READ>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b17      	cmp	r3, #23
 8001a7e:	d003      	beq.n	8001a88 <u8Waiting_For_Reply+0x70>
			{
				u8Sock_Established = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71bb      	strb	r3, [r7, #6]
				u8Close_TCP_Socket();
 8001a84:	f7ff ff8a 	bl	800199c <u8Close_TCP_Socket>
			}
			u8Counter = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	71fb      	strb	r3, [r7, #7]
		}
		HAL_Delay(50);
 8001a8c:	2032      	movs	r0, #50	; 0x32
 8001a8e:	f004 fef9 	bl	8006884 <HAL_Delay>
	    u8Counter++;
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	3301      	adds	r3, #1
 8001a96:	71fb      	strb	r3, [r7, #7]
	while((u16Received_Len == 0)&&(u8Sock_Established == 1))
 8001a98:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <u8Waiting_For_Reply+0xac>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <u8Waiting_For_Reply+0x8e>
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d0c0      	beq.n	8001a28 <u8Waiting_For_Reply+0x10>
	}
	//
	u16Received_Len = 0;
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <u8Waiting_For_Reply+0xac>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	801a      	strh	r2, [r3, #0]
	return 0;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	20000424 	.word	0x20000424
 8001ac0:	20000428 	.word	0x20000428
 8001ac4:	20000422 	.word	0x20000422

08001ac8 <u8Pull_Request>:

uint8_t  u8Pull_Request()
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b0c3      	sub	sp, #268	; 0x10c
 8001acc:	af02      	add	r7, sp, #8
	uint8_t cSendString [256] = {0x7d};
 8001ace:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ad2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ad6:	227d      	movs	r2, #125	; 0x7d
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	3304      	adds	r3, #4
 8001adc:	22fc      	movs	r2, #252	; 0xfc
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f009 fecf 	bl	800b884 <memset>
	sprintf ((char *)cSendString, (const char *)"{\n \"version\": 1,\n \"msg_type\": 2,\n \"data\": {\n   \"name\": \"%s\",\n   \"nr\": \"%ld\",\n   \"domain\": \"%s\",\n   \"os_version\": \"0.20\",\n   \"type\": \"PoE\",\n   \"volt\": \"V\",\n   \"status\": \"ok\"\n }\n}\n","PoE_Beta", HAL_GetUIDw0(), "aa94229c-e0f8-4a73-9461-a295d0390b7c");
 8001ae6:	f004 ff01 	bl	80068ec <HAL_GetUIDw0>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4638      	mov	r0, r7
 8001aee:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <u8Pull_Request+0x58>)
 8001af0:	9200      	str	r2, [sp, #0]
 8001af2:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <u8Pull_Request+0x5c>)
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <u8Pull_Request+0x60>)
 8001af6:	f009 fd9f 	bl	800b638 <siprintf>
	send(u8Socket,(uint8_t *)cSendString, strlen(cSendString));
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <u8Pull_Request+0x64>)
 8001afc:	781c      	ldrb	r4, [r3, #0]
 8001afe:	463b      	mov	r3, r7
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fb65 	bl	80001d0 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4620      	mov	r0, r4
 8001b10:	f003 ff72 	bl	80059f8 <send>
	return 0;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	0800cf5c 	.word	0x0800cf5c
 8001b24:	0800ce9c 	.word	0x0800ce9c
 8001b28:	0800cea8 	.word	0x0800cea8
 8001b2c:	20000004 	.word	0x20000004

08001b30 <u8Use_Data>:

uint8_t u8Use_Data(uint8_t* u8Data)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	f6ad 3d28 	subw	sp, sp, #2856	; 0xb28
 8001b36:	af02      	add	r7, sp, #8
 8001b38:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001b3c:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001b40:	6018      	str	r0, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim2);
 8001b42:	48ca      	ldr	r0, [pc, #808]	; (8001e6c <u8Use_Data+0x33c>)
 8001b44:	f008 f84a 	bl	8009bdc <HAL_TIM_Base_Stop_IT>

	struct sCommunication Com = {0};
 8001b48:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001b4c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001b50:	4618      	mov	r0, r3
 8001b52:	f44f 7312 	mov.w	r3, #584	; 0x248
 8001b56:	461a      	mov	r2, r3
 8001b58:	2100      	movs	r1, #0
 8001b5a:	f009 fe93 	bl	800b884 <memset>
    int i;
    int r;
    jsmn_parser p;
    jsmntok_t t[128]; /* We expect no more than 128 tokens */
    jsmn_init(&p);
 8001b5e:	f607 03c4 	addw	r3, r7, #2244	; 0x8c4
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fd74 	bl	8001650 <jsmn_init>
    r = jsmn_parse(&p, (const char*)u8Data, (const size_t)strlen((const char *)u8Data), t, (const unsigned int)sizeof(t)/sizeof(t[0]));
 8001b68:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001b6c:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f7fe fb2d 	bl	80001d0 <strlen>
 8001b76:	4604      	mov	r4, r0
 8001b78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b7c:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001b80:	f6a2 311c 	subw	r1, r2, #2844	; 0xb1c
 8001b84:	f607 00c4 	addw	r0, r7, #2244	; 0x8c4
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	9200      	str	r2, [sp, #0]
 8001b8c:	4622      	mov	r2, r4
 8001b8e:	6809      	ldr	r1, [r1, #0]
 8001b90:	f7ff fba8 	bl	80012e4 <jsmn_parse>
 8001b94:	f8c7 0b18 	str.w	r0, [r7, #2840]	; 0xb18
    for (i = 1; i < r; i++)
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8001b9e:	f000 bd2d 	b.w	80025fc <u8Use_Data+0xacc>
    {
        if (jsoneq((const char*)u8Data, &t[i], "msg_type") == 0)
 8001ba2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001ba6:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	18d1      	adds	r1, r2, r3
 8001bae:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001bb2:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001bb6:	4aae      	ldr	r2, [pc, #696]	; (8001e70 <u8Use_Data+0x340>)
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	f7ff fd87 	bl	80016cc <jsoneq>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d150      	bne.n	8001c66 <u8Use_Data+0x136>
        {
        	uint8_t u8Cache[30] = {0};
 8001bc4:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001bc8:	f6a3 237c 	subw	r3, r3, #2684	; 0xa7c
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	605a      	str	r2, [r3, #4]
 8001bd8:	609a      	str	r2, [r3, #8]
 8001bda:	60da      	str	r2, [r3, #12]
 8001bdc:	611a      	str	r2, [r3, #16]
 8001bde:	615a      	str	r2, [r3, #20]
 8001be0:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8001be2:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001be6:	3301      	adds	r3, #1
 8001be8:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001bec:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001bf0:	011b      	lsls	r3, r3, #4
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3308      	adds	r3, #8
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001c02:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	440b      	add	r3, r1
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1ad1      	subs	r1, r2, r3
 8001c10:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001c14:	3301      	adds	r3, #1
 8001c16:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001c1a:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001c2c:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8001c38:	460a      	mov	r2, r1
 8001c3a:	498e      	ldr	r1, [pc, #568]	; (8001e74 <u8Use_Data+0x344>)
 8001c3c:	f009 fcfc 	bl	800b638 <siprintf>
        	Com.u8MSG_Type = atoi((const char *)u8Cache);
 8001c40:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f009 fa79 	bl	800b13c <atoi>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001c52:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001c56:	705a      	strb	r2, [r3, #1]
            i++;
 8001c58:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8001c62:	f000 bcc6 	b.w	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "sleep_time") == 0)
 8001c66:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001c6a:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	18d1      	adds	r1, r2, r3
 8001c72:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001c76:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001c7a:	4a7f      	ldr	r2, [pc, #508]	; (8001e78 <u8Use_Data+0x348>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f7ff fd25 	bl	80016cc <jsoneq>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f040 8090 	bne.w	8001daa <u8Use_Data+0x27a>
        {
        	uint8_t u8Cache[30] = {0};
 8001c8a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001c8e:	f6a3 239c 	subw	r3, r3, #2716	; 0xa9c
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	3304      	adds	r3, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8001ca8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001cac:	3301      	adds	r3, #1
 8001cae:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001cb2:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	3308      	adds	r3, #8
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001cc8:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	440b      	add	r3, r1
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	1ad1      	subs	r1, r2, r3
 8001cd6:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001cda:	3301      	adds	r3, #1
 8001cdc:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001ce0:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001cf2:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001cfe:	460a      	mov	r2, r1
 8001d00:	495c      	ldr	r1, [pc, #368]	; (8001e74 <u8Use_Data+0x344>)
 8001d02:	f009 fc99 	bl	800b638 <siprintf>

			uint8_t u8CacheHou[10] = {0};
 8001d06:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001d0a:	f6a3 23a8 	subw	r3, r3, #2728	; 0xaa8
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	3304      	adds	r3, #4
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	809a      	strh	r2, [r3, #4]
			uint8_t u8CacheMin[5] = {0};
 8001d1a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001d1e:	f5a3 632b 	sub.w	r3, r3, #2736	; 0xab0
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	711a      	strb	r2, [r3, #4]
			uint8_t u8CacheSec[5] = {0};
 8001d2a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001d2e:	f6a3 23b8 	subw	r3, r3, #2744	; 0xab8
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	2200      	movs	r2, #0
 8001d38:	711a      	strb	r2, [r3, #4]
			sscanf((const char *)u8Cache, "%9[0-9]:%2[0-9]:%2[0-9]", u8CacheHou, u8CacheMin, u8CacheSec);
 8001d3a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8001d3e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001d42:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8001d46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	494b      	ldr	r1, [pc, #300]	; (8001e7c <u8Use_Data+0x34c>)
 8001d50:	f009 fc92 	bl	800b678 <siscanf>
			Com.u32Sleep_Time = (uint32_t)atoi((const char *)u8CacheSec)+(uint32_t)atoi((const char *)u8CacheMin)*60+(uint32_t)atoi((const char *)u8CacheHou)*3600;
 8001d54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f009 f9ef 	bl	800b13c <atoi>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461d      	mov	r5, r3
 8001d62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d66:	4618      	mov	r0, r3
 8001d68:	f009 f9e8 	bl	800b13c <atoi>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001d74:	fb03 f402 	mul.w	r4, r3, r2
 8001d78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f009 f9dd 	bl	800b13c <atoi>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	1a9b      	subs	r3, r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4423      	add	r3, r4
 8001d90:	18ea      	adds	r2, r5, r3
 8001d92:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001d96:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d9a:	605a      	str	r2, [r3, #4]
			i++;
 8001d9c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001da0:	3301      	adds	r3, #1
 8001da2:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8001da6:	f000 bc24 	b.w	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "version") == 0)
 8001daa:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001dae:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	18d1      	adds	r1, r2, r3
 8001db6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001dba:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001dbe:	4a30      	ldr	r2, [pc, #192]	; (8001e80 <u8Use_Data+0x350>)
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	f7ff fc83 	bl	80016cc <jsoneq>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d15b      	bne.n	8001e84 <u8Use_Data+0x354>
        {
        	uint8_t u8Cache[30] = {0};
 8001dcc:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001dd0:	f6a3 23d8 	subw	r3, r3, #2776	; 0xad8
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8001dea:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001dee:	3301      	adds	r3, #1
 8001df0:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001df4:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3308      	adds	r3, #8
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001e04:	3301      	adds	r3, #1
 8001e06:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001e0a:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	440b      	add	r3, r1
 8001e12:	3304      	adds	r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	1ad1      	subs	r1, r2, r3
 8001e18:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001e22:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	4413      	add	r3, r2
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001e34:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001e40:	460a      	mov	r2, r1
 8001e42:	490c      	ldr	r1, [pc, #48]	; (8001e74 <u8Use_Data+0x344>)
 8001e44:	f009 fbf8 	bl	800b638 <siprintf>
        	Com.u8Version = (uint8_t)atoi((const char *)u8Cache);
 8001e48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f009 f975 	bl	800b13c <atoi>
 8001e52:	4603      	mov	r3, r0
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001e5a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001e5e:	701a      	strb	r2, [r3, #0]
            i++;
 8001e60:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001e64:	3301      	adds	r3, #1
 8001e66:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8001e6a:	e3c2      	b.n	80025f2 <u8Use_Data+0xac2>
 8001e6c:	20000338 	.word	0x20000338
 8001e70:	0800cf84 	.word	0x0800cf84
 8001e74:	0800cf90 	.word	0x0800cf90
 8001e78:	0800cf98 	.word	0x0800cf98
 8001e7c:	0800cfa4 	.word	0x0800cfa4
 8001e80:	0800cfbc 	.word	0x0800cfbc
        }
        else if (jsoneq((const char*)u8Data, &t[i], "type") == 0)
 8001e84:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001e88:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001e8c:	011b      	lsls	r3, r3, #4
 8001e8e:	18d1      	adds	r1, r2, r3
 8001e90:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001e94:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001e98:	4abd      	ldr	r2, [pc, #756]	; (8002190 <u8Use_Data+0x660>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	f7ff fc16 	bl	80016cc <jsoneq>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d14f      	bne.n	8001f46 <u8Use_Data+0x416>
        {
        	uint8_t u8Cache[30] = {0};
 8001ea6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001eaa:	f6a3 23f8 	subw	r3, r3, #2808	; 0xaf8
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8001ec4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001ece:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001ee4:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	440b      	add	r3, r1
 8001eec:	3304      	adds	r3, #4
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	1ad1      	subs	r1, r2, r3
 8001ef2:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001efc:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001f0e:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4413      	add	r3, r2
 8001f16:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001f1a:	460a      	mov	r2, r1
 8001f1c:	499d      	ldr	r1, [pc, #628]	; (8002194 <u8Use_Data+0x664>)
 8001f1e:	f009 fb8b 	bl	800b638 <siprintf>
        	Com.u8Type = (uint8_t)atoi((const char *)u8Cache);
 8001f22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f26:	4618      	mov	r0, r3
 8001f28:	f009 f908 	bl	800b13c <atoi>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001f34:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001f38:	721a      	strb	r2, [r3, #8]
            i++;
 8001f3a:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8001f44:	e355      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l1") == 0)
 8001f46:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001f4a:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001f4e:	011b      	lsls	r3, r3, #4
 8001f50:	18d1      	adds	r1, r2, r3
 8001f52:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001f56:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001f5a:	4a8f      	ldr	r2, [pc, #572]	; (8002198 <u8Use_Data+0x668>)
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f7ff fbb5 	bl	80016cc <jsoneq>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d137      	bne.n	8001fd8 <u8Use_Data+0x4a8>
        {
        	sprintf((char*)Com.u8L1,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8001f68:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001f72:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	3308      	adds	r3, #8
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001f82:	3301      	adds	r3, #1
 8001f84:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001f88:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	440b      	add	r3, r1
 8001f90:	3304      	adds	r3, #4
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1ad1      	subs	r1, r2, r3
 8001f96:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8001fa0:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3304      	adds	r3, #4
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001fb2:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	441a      	add	r2, r3
 8001fba:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8001fbe:	f103 001e 	add.w	r0, r3, #30
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	4973      	ldr	r1, [pc, #460]	; (8002194 <u8Use_Data+0x664>)
 8001fc8:	f009 fb36 	bl	800b638 <siprintf>
            i++;
 8001fcc:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8001fd6:	e30c      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l2") == 0)
 8001fd8:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001fdc:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	18d1      	adds	r1, r2, r3
 8001fe4:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001fe8:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8001fec:	4a6b      	ldr	r2, [pc, #428]	; (800219c <u8Use_Data+0x66c>)
 8001fee:	6818      	ldr	r0, [r3, #0]
 8001ff0:	f7ff fb6c 	bl	80016cc <jsoneq>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d137      	bne.n	800206a <u8Use_Data+0x53a>
        {
        	sprintf((char*)Com.u8L2,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8001ffa:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8001ffe:	3301      	adds	r3, #1
 8002000:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002004:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	4413      	add	r3, r2
 800200c:	3308      	adds	r3, #8
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002014:	3301      	adds	r3, #1
 8002016:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800201a:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	440b      	add	r3, r1
 8002022:	3304      	adds	r3, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1ad1      	subs	r1, r2, r3
 8002028:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800202c:	3301      	adds	r3, #1
 800202e:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002032:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	4413      	add	r3, r2
 800203a:	3304      	adds	r3, #4
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002044:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	441a      	add	r2, r3
 800204c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002050:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8002054:	4613      	mov	r3, r2
 8002056:	460a      	mov	r2, r1
 8002058:	494e      	ldr	r1, [pc, #312]	; (8002194 <u8Use_Data+0x664>)
 800205a:	f009 faed 	bl	800b638 <siprintf>
            i++;
 800205e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002062:	3301      	adds	r3, #1
 8002064:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8002068:	e2c3      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l3") == 0)
 800206a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800206e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	18d1      	adds	r1, r2, r3
 8002076:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800207a:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 800207e:	4a48      	ldr	r2, [pc, #288]	; (80021a0 <u8Use_Data+0x670>)
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	f7ff fb23 	bl	80016cc <jsoneq>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d137      	bne.n	80020fc <u8Use_Data+0x5cc>
        {
        	sprintf((char*)Com.u8L3,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 800208c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002090:	3301      	adds	r3, #1
 8002092:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002096:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	4413      	add	r3, r2
 800209e:	3308      	adds	r3, #8
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80020a6:	3301      	adds	r3, #1
 80020a8:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80020ac:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	440b      	add	r3, r1
 80020b4:	3304      	adds	r3, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	1ad1      	subs	r1, r2, r3
 80020ba:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80020be:	3301      	adds	r3, #1
 80020c0:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80020c4:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4413      	add	r3, r2
 80020cc:	3304      	adds	r3, #4
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80020d6:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	441a      	add	r2, r3
 80020de:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80020e2:	f103 0082 	add.w	r0, r3, #130	; 0x82
 80020e6:	4613      	mov	r3, r2
 80020e8:	460a      	mov	r2, r1
 80020ea:	492a      	ldr	r1, [pc, #168]	; (8002194 <u8Use_Data+0x664>)
 80020ec:	f009 faa4 	bl	800b638 <siprintf>
            i++;
 80020f0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80020f4:	3301      	adds	r3, #1
 80020f6:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80020fa:	e27a      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l4") == 0)
 80020fc:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002100:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	18d1      	adds	r1, r2, r3
 8002108:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800210c:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <u8Use_Data+0x674>)
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	f7ff fada 	bl	80016cc <jsoneq>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d144      	bne.n	80021a8 <u8Use_Data+0x678>
        {
        	sprintf((char*)Com.u8L4,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 800211e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002122:	3301      	adds	r3, #1
 8002124:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002128:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	3308      	adds	r3, #8
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002138:	3301      	adds	r3, #1
 800213a:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800213e:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	440b      	add	r3, r1
 8002146:	3304      	adds	r3, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1ad1      	subs	r1, r2, r3
 800214c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002150:	3301      	adds	r3, #1
 8002152:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002156:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4413      	add	r3, r2
 800215e:	3304      	adds	r3, #4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	461a      	mov	r2, r3
 8002164:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002168:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	441a      	add	r2, r3
 8002170:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002174:	f103 00b4 	add.w	r0, r3, #180	; 0xb4
 8002178:	4613      	mov	r3, r2
 800217a:	460a      	mov	r2, r1
 800217c:	4905      	ldr	r1, [pc, #20]	; (8002194 <u8Use_Data+0x664>)
 800217e:	f009 fa5b 	bl	800b638 <siprintf>
            i++;
 8002182:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002186:	3301      	adds	r3, #1
 8002188:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 800218c:	e231      	b.n	80025f2 <u8Use_Data+0xac2>
 800218e:	bf00      	nop
 8002190:	0800cfc4 	.word	0x0800cfc4
 8002194:	0800cf90 	.word	0x0800cf90
 8002198:	0800cfcc 	.word	0x0800cfcc
 800219c:	0800cfd0 	.word	0x0800cfd0
 80021a0:	0800cfd4 	.word	0x0800cfd4
 80021a4:	0800cfd8 	.word	0x0800cfd8
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l5") == 0)
 80021a8:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80021ac:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	18d1      	adds	r1, r2, r3
 80021b4:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80021b8:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 80021bc:	4ad5      	ldr	r2, [pc, #852]	; (8002514 <u8Use_Data+0x9e4>)
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	f7ff fa84 	bl	80016cc <jsoneq>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d137      	bne.n	800223a <u8Use_Data+0x70a>
        {
        	sprintf((char*)Com.u8L5,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80021ca:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80021ce:	3301      	adds	r3, #1
 80021d0:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80021d4:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	4413      	add	r3, r2
 80021dc:	3308      	adds	r3, #8
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80021e4:	3301      	adds	r3, #1
 80021e6:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80021ea:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	440b      	add	r3, r1
 80021f2:	3304      	adds	r3, #4
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1ad1      	subs	r1, r2, r3
 80021f8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80021fc:	3301      	adds	r3, #1
 80021fe:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002202:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002214:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	441a      	add	r2, r3
 800221c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002220:	f103 00e6 	add.w	r0, r3, #230	; 0xe6
 8002224:	4613      	mov	r3, r2
 8002226:	460a      	mov	r2, r1
 8002228:	49bb      	ldr	r1, [pc, #748]	; (8002518 <u8Use_Data+0x9e8>)
 800222a:	f009 fa05 	bl	800b638 <siprintf>
            i++;
 800222e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002232:	3301      	adds	r3, #1
 8002234:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8002238:	e1db      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l6") == 0)
 800223a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800223e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	18d1      	adds	r1, r2, r3
 8002246:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800224a:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 800224e:	4ab3      	ldr	r2, [pc, #716]	; (800251c <u8Use_Data+0x9ec>)
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	f7ff fa3b 	bl	80016cc <jsoneq>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d137      	bne.n	80022cc <u8Use_Data+0x79c>
        {
        	sprintf((char*)Com.u8L6,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 800225c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002260:	3301      	adds	r3, #1
 8002262:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002266:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	3308      	adds	r3, #8
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002276:	3301      	adds	r3, #1
 8002278:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800227c:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	440b      	add	r3, r1
 8002284:	3304      	adds	r3, #4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	1ad1      	subs	r1, r2, r3
 800228a:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800228e:	3301      	adds	r3, #1
 8002290:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002294:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80022a6:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	441a      	add	r2, r3
 80022ae:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80022b2:	f503 708c 	add.w	r0, r3, #280	; 0x118
 80022b6:	4613      	mov	r3, r2
 80022b8:	460a      	mov	r2, r1
 80022ba:	4997      	ldr	r1, [pc, #604]	; (8002518 <u8Use_Data+0x9e8>)
 80022bc:	f009 f9bc 	bl	800b638 <siprintf>
            i++;
 80022c0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80022c4:	3301      	adds	r3, #1
 80022c6:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80022ca:	e192      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l7") == 0)
 80022cc:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80022d0:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	18d1      	adds	r1, r2, r3
 80022d8:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80022dc:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 80022e0:	4a8f      	ldr	r2, [pc, #572]	; (8002520 <u8Use_Data+0x9f0>)
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	f7ff f9f2 	bl	80016cc <jsoneq>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d137      	bne.n	800235e <u8Use_Data+0x82e>
        {
        	sprintf((char*)Com.u8L7,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80022ee:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80022f2:	3301      	adds	r3, #1
 80022f4:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80022f8:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	3308      	adds	r3, #8
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002308:	3301      	adds	r3, #1
 800230a:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 800230e:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	440b      	add	r3, r1
 8002316:	3304      	adds	r3, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	1ad1      	subs	r1, r2, r3
 800231c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002320:	3301      	adds	r3, #1
 8002322:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8002326:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	3304      	adds	r3, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	461a      	mov	r2, r3
 8002334:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002338:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	441a      	add	r2, r3
 8002340:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002344:	f503 70a5 	add.w	r0, r3, #330	; 0x14a
 8002348:	4613      	mov	r3, r2
 800234a:	460a      	mov	r2, r1
 800234c:	4972      	ldr	r1, [pc, #456]	; (8002518 <u8Use_Data+0x9e8>)
 800234e:	f009 f973 	bl	800b638 <siprintf>
            i++;
 8002352:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002356:	3301      	adds	r3, #1
 8002358:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 800235c:	e149      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l8") == 0)
 800235e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002362:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	18d1      	adds	r1, r2, r3
 800236a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800236e:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002372:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <u8Use_Data+0x9f4>)
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	f7ff f9a9 	bl	80016cc <jsoneq>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d137      	bne.n	80023f0 <u8Use_Data+0x8c0>
        {
        	sprintf((char*)Com.u8L8,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002380:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002384:	3301      	adds	r3, #1
 8002386:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 800238a:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	3308      	adds	r3, #8
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800239a:	3301      	adds	r3, #1
 800239c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80023a0:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	440b      	add	r3, r1
 80023a8:	3304      	adds	r3, #4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	1ad1      	subs	r1, r2, r3
 80023ae:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80023b2:	3301      	adds	r3, #1
 80023b4:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80023b8:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	3304      	adds	r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80023ca:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	441a      	add	r2, r3
 80023d2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80023d6:	f503 70be 	add.w	r0, r3, #380	; 0x17c
 80023da:	4613      	mov	r3, r2
 80023dc:	460a      	mov	r2, r1
 80023de:	494e      	ldr	r1, [pc, #312]	; (8002518 <u8Use_Data+0x9e8>)
 80023e0:	f009 f92a 	bl	800b638 <siprintf>
            i++;
 80023e4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80023e8:	3301      	adds	r3, #1
 80023ea:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80023ee:	e100      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l9") == 0)
 80023f0:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80023f4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	18d1      	adds	r1, r2, r3
 80023fc:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002400:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002404:	4a48      	ldr	r2, [pc, #288]	; (8002528 <u8Use_Data+0x9f8>)
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	f7ff f960 	bl	80016cc <jsoneq>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d137      	bne.n	8002482 <u8Use_Data+0x952>
        {
        	sprintf((char*)Com.u8L9,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002412:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002416:	3301      	adds	r3, #1
 8002418:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 800241c:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4413      	add	r3, r2
 8002424:	3308      	adds	r3, #8
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800242c:	3301      	adds	r3, #1
 800242e:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8002432:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	440b      	add	r3, r1
 800243a:	3304      	adds	r3, #4
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	1ad1      	subs	r1, r2, r3
 8002440:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002444:	3301      	adds	r3, #1
 8002446:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 800244a:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	3304      	adds	r3, #4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800245c:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	441a      	add	r2, r3
 8002464:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002468:	f503 70d7 	add.w	r0, r3, #430	; 0x1ae
 800246c:	4613      	mov	r3, r2
 800246e:	460a      	mov	r2, r1
 8002470:	4929      	ldr	r1, [pc, #164]	; (8002518 <u8Use_Data+0x9e8>)
 8002472:	f009 f8e1 	bl	800b638 <siprintf>
            i++;
 8002476:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800247a:	3301      	adds	r3, #1
 800247c:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8002480:	e0b7      	b.n	80025f2 <u8Use_Data+0xac2>
        }
        else if (jsoneq((const char*)u8Data, &t[i], "l10") == 0)
 8002482:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002486:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	18d1      	adds	r1, r2, r3
 800248e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002492:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002496:	4a25      	ldr	r2, [pc, #148]	; (800252c <u8Use_Data+0x9fc>)
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	f7ff f917 	bl	80016cc <jsoneq>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d145      	bne.n	8002530 <u8Use_Data+0xa00>
        {
        	sprintf((char*)Com.u8L10,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 80024a4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80024a8:	3301      	adds	r3, #1
 80024aa:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80024ae:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	4413      	add	r3, r2
 80024b6:	3308      	adds	r3, #8
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80024be:	3301      	adds	r3, #1
 80024c0:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 80024c4:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	440b      	add	r3, r1
 80024cc:	3304      	adds	r3, #4
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	1ad1      	subs	r1, r2, r3
 80024d2:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80024d6:	3301      	adds	r3, #1
 80024d8:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80024dc:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	4413      	add	r3, r2
 80024e4:	3304      	adds	r3, #4
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80024ee:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	441a      	add	r2, r3
 80024f6:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 80024fa:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 80024fe:	4613      	mov	r3, r2
 8002500:	460a      	mov	r2, r1
 8002502:	4905      	ldr	r1, [pc, #20]	; (8002518 <u8Use_Data+0x9e8>)
 8002504:	f009 f898 	bl	800b638 <siprintf>
            i++;
 8002508:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800250c:	3301      	adds	r3, #1
 800250e:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 8002512:	e06e      	b.n	80025f2 <u8Use_Data+0xac2>
 8002514:	0800cfdc 	.word	0x0800cfdc
 8002518:	0800cf90 	.word	0x0800cf90
 800251c:	0800cfe0 	.word	0x0800cfe0
 8002520:	0800cfe4 	.word	0x0800cfe4
 8002524:	0800cfe8 	.word	0x0800cfe8
 8002528:	0800cfec 	.word	0x0800cfec
 800252c:	0800cff0 	.word	0x0800cff0
        }
        else if (jsoneq((const char*)u8Data, &t[i], "g_id") == 0)
 8002530:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8002534:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	18d1      	adds	r1, r2, r3
 800253c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002540:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 8002544:	4a64      	ldr	r2, [pc, #400]	; (80026d8 <u8Use_Data+0xba8>)
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	f7ff f8c0 	bl	80016cc <jsoneq>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d14f      	bne.n	80025f2 <u8Use_Data+0xac2>
        {
        	uint8_t u8Cache[30] = {0};
 8002552:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002556:	f6a3 3318 	subw	r3, r3, #2840	; 0xb18
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	3304      	adds	r3, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]
 800256e:	831a      	strh	r2, [r3, #24]
        	sprintf((char*)u8Cache,"%.*s", t[i + 1].end - t[i + 1].start, u8Data + t[i + 1].start);
 8002570:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8002574:	3301      	adds	r3, #1
 8002576:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 800257a:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	4413      	add	r3, r2
 8002582:	3308      	adds	r3, #8
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 800258a:	3301      	adds	r3, #1
 800258c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8002590:	f6a1 215c 	subw	r1, r1, #2652	; 0xa5c
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	440b      	add	r3, r1
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	1ad1      	subs	r1, r2, r3
 800259e:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80025a2:	3301      	adds	r3, #1
 80025a4:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80025a8:	f6a2 225c 	subw	r2, r2, #2652	; 0xa5c
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	3304      	adds	r3, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80025ba:	f6a3 331c 	subw	r3, r3, #2844	; 0xb1c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4413      	add	r3, r2
 80025c2:	f107 0008 	add.w	r0, r7, #8
 80025c6:	460a      	mov	r2, r1
 80025c8:	4944      	ldr	r1, [pc, #272]	; (80026dc <u8Use_Data+0xbac>)
 80025ca:	f009 f835 	bl	800b638 <siprintf>
        	Com.u8G_ID = (uint8_t)atoi((const char *)u8Cache);
 80025ce:	f107 0308 	add.w	r3, r7, #8
 80025d2:	4618      	mov	r0, r3
 80025d4:	f008 fdb2 	bl	800b13c <atoi>
 80025d8:	4603      	mov	r3, r0
 80025da:	b2da      	uxtb	r2, r3
 80025dc:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80025e0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80025e4:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
            i++;
 80025e8:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80025ec:	3301      	adds	r3, #1
 80025ee:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
    for (i = 1; i < r; i++)
 80025f2:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 80025f6:	3301      	adds	r3, #1
 80025f8:	f8c7 3b1c 	str.w	r3, [r7, #2844]	; 0xb1c
 80025fc:	f8d7 2b1c 	ldr.w	r2, [r7, #2844]	; 0xb1c
 8002600:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8002604:	429a      	cmp	r2, r3
 8002606:	f6ff aacc 	blt.w	8001ba2 <u8Use_Data+0x72>
        }
    }
    if((Com.u8MSG_Type == 3) && (Com.u8Type == 1))
 800260a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800260e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b03      	cmp	r3, #3
 8002616:	d121      	bne.n	800265c <u8Use_Data+0xb2c>
 8002618:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800261c:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002620:	7a1b      	ldrb	r3, [r3, #8]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d11a      	bne.n	800265c <u8Use_Data+0xb2c>
    {
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 8002626:	2201      	movs	r2, #1
 8002628:	2104      	movs	r1, #4
 800262a:	482d      	ldr	r0, [pc, #180]	; (80026e0 <u8Use_Data+0xbb0>)
 800262c:	f004 fc7e 	bl	8006f2c <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8002630:	2064      	movs	r0, #100	; 0x64
 8002632:	f004 f927 	bl	8006884 <HAL_Delay>
    	DEV_Module_Init();
 8002636:	f000 f8c9 	bl	80027cc <DEV_Module_Init>
    	HAL_Delay(100);
 800263a:	2064      	movs	r0, #100	; 0x64
 800263c:	f004 f922 	bl	8006884 <HAL_Delay>
    	EPD_7IN5_V2_Init();
 8002640:	f000 f9e4 	bl	8002a0c <EPD_7IN5_V2_Init>
    	vPrint_Skin_Office(&Com);
 8002644:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002648:	4618      	mov	r0, r3
 800264a:	f000 ff7b 	bl	8003544 <vPrint_Skin_Office>
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2104      	movs	r1, #4
 8002652:	4823      	ldr	r0, [pc, #140]	; (80026e0 <u8Use_Data+0xbb0>)
 8002654:	f004 fc6a 	bl	8006f2c <HAL_GPIO_WritePin>
    	DEV_Module_Exit();
 8002658:	f000 f8ce 	bl	80027f8 <DEV_Module_Exit>
    }
    if((Com.u8MSG_Type == 3) && (Com.u8Type == 2))
 800265c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8002660:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002664:	785b      	ldrb	r3, [r3, #1]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d121      	bne.n	80026ae <u8Use_Data+0xb7e>
 800266a:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800266e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002672:	7a1b      	ldrb	r3, [r3, #8]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d11a      	bne.n	80026ae <u8Use_Data+0xb7e>
    {
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 1);
 8002678:	2201      	movs	r2, #1
 800267a:	2104      	movs	r1, #4
 800267c:	4818      	ldr	r0, [pc, #96]	; (80026e0 <u8Use_Data+0xbb0>)
 800267e:	f004 fc55 	bl	8006f2c <HAL_GPIO_WritePin>
    	HAL_Delay(100);
 8002682:	2064      	movs	r0, #100	; 0x64
 8002684:	f004 f8fe 	bl	8006884 <HAL_Delay>
    	DEV_Module_Init();
 8002688:	f000 f8a0 	bl	80027cc <DEV_Module_Init>
    	HAL_Delay(100);
 800268c:	2064      	movs	r0, #100	; 0x64
 800268e:	f004 f8f9 	bl	8006884 <HAL_Delay>
    	EPD_7IN5_V2_Init();
 8002692:	f000 f9bb 	bl	8002a0c <EPD_7IN5_V2_Init>
    	vPrint_Skin_Lecture_Room(&Com);
 8002696:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800269a:	4618      	mov	r0, r3
 800269c:	f001 f8b2 	bl	8003804 <vPrint_Skin_Lecture_Room>
    	HAL_GPIO_WritePin(DISPLAY_POWER_GPIO_Port, DISPLAY_POWER_Pin, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2104      	movs	r1, #4
 80026a4:	480e      	ldr	r0, [pc, #56]	; (80026e0 <u8Use_Data+0xbb0>)
 80026a6:	f004 fc41 	bl	8006f2c <HAL_GPIO_WritePin>
    	DEV_Module_Exit();
 80026aa:	f000 f8a5 	bl	80027f8 <DEV_Module_Exit>
    }

    //sleep mode
    if(Com.u8MSG_Type == 3)
 80026ae:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80026b2:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d107      	bne.n	80026cc <u8Use_Data+0xb9c>
    {
    	StandbyStart(Com.u32Sleep_Time);
 80026bc:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80026c0:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 f80c 	bl	80026e4 <StandbyStart>
    }

	return 0;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	f507 6732 	add.w	r7, r7, #2848	; 0xb20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bdb0      	pop	{r4, r5, r7, pc}
 80026d8:	0800cff4 	.word	0x0800cff4
 80026dc:	0800cf90 	.word	0x0800cf90
 80026e0:	48000400 	.word	0x48000400

080026e4 <StandbyStart>:
 */

#include "device.h"

void StandbyStart(uint32_t Seconds)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	// Zugriff auf Backup-Register aktivieren
	HAL_PWR_EnableBkUpAccess();
 80026ec:	f004 fc5a 	bl	8006fa4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_BACKUPRESET_FORCE();
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <StandbyStart+0x8c>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <StandbyStart+0x8c>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_BACKUPRESET_RELEASE();
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <StandbyStart+0x8c>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a1a      	ldr	r2, [pc, #104]	; (8002770 <StandbyStart+0x8c>)
 8002708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	__HAL_RCC_RTC_ENABLE();
 8002710:	4b17      	ldr	r3, [pc, #92]	; (8002770 <StandbyStart+0x8c>)
 8002712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002716:	4a16      	ldr	r2, [pc, #88]	; (8002770 <StandbyStart+0x8c>)
 8002718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x1234);
 8002720:	f241 2234 	movw	r2, #4660	; 0x1234
 8002724:	2101      	movs	r1, #1
 8002726:	4813      	ldr	r0, [pc, #76]	; (8002774 <StandbyStart+0x90>)
 8002728:	f006 f920 	bl	800896c <HAL_RTCEx_BKUPWrite>

	// Power-Clock aktivieren
	__HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <StandbyStart+0x8c>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a0f      	ldr	r2, [pc, #60]	; (8002770 <StandbyStart+0x8c>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <StandbyStart+0x8c>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
	// Wake-up-Pin aktivieren
	HAL_PWR_EnableWakeUpPin(INT_Reset_Pin);
 8002744:	2001      	movs	r0, #1
 8002746:	f004 fc3d 	bl	8006fc4 <HAL_PWR_EnableWakeUpPin>
	// Wake-up-Flag löschen
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <StandbyStart+0x94>)
 800274c:	221f      	movs	r2, #31
 800274e:	619a      	str	r2, [r3, #24]
	// Standby-Modus betreten
	HAL_SuspendTick();
 8002750:	f004 f8bc 	bl	80068cc <HAL_SuspendTick>
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, Seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 8002754:	2204      	movs	r2, #4
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4806      	ldr	r0, [pc, #24]	; (8002774 <StandbyStart+0x90>)
 800275a:	f006 f873 	bl	8008844 <HAL_RTCEx_SetWakeUpTimer_IT>
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <StandbyStart+0x94>)
 8002760:	221f      	movs	r2, #31
 8002762:	619a      	str	r2, [r3, #24]
	HAL_PWR_EnterSTANDBYMode();
 8002764:	f004 fc4e 	bl	8007004 <HAL_PWR_EnterSTANDBYMode>
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	20000200 	.word	0x20000200
 8002778:	40007000 	.word	0x40007000

0800277c <Buzzer>:

void Buzzer(uint32_t MilliSecond)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start_IT(&htim5,TIM_CHANNEL_2);
 8002784:	2104      	movs	r1, #4
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <Buzzer+0x28>)
 8002788:	f007 fab8 	bl	8009cfc <HAL_TIM_PWM_Start_IT>
	HAL_Delay(MilliSecond);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f004 f879 	bl	8006884 <HAL_Delay>
	HAL_TIM_PWM_Stop_IT(&htim5,TIM_CHANNEL_2);
 8002792:	2104      	movs	r1, #4
 8002794:	4803      	ldr	r0, [pc, #12]	; (80027a4 <Buzzer+0x28>)
 8002796:	f007 fc05 	bl	8009fa4 <HAL_TIM_PWM_Stop_IT>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200003d0 	.word	0x200003d0

080027a8 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
#include "stm32l4xx_hal_spi.h"

extern SPI_HandleTypeDef hspi2;
void DEV_SPI_WriteByte(UBYTE value)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi2, &value, 1, 1000);
 80027b2:	1df9      	adds	r1, r7, #7
 80027b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027b8:	2201      	movs	r2, #1
 80027ba:	4803      	ldr	r0, [pc, #12]	; (80027c8 <DEV_SPI_WriteByte+0x20>)
 80027bc:	f006 f9a8 	bl	8008b10 <HAL_SPI_Transmit>
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000224 	.word	0x20000224

080027cc <DEV_Module_Init>:

int DEV_Module_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80027d0:	2200      	movs	r2, #0
 80027d2:	2120      	movs	r1, #32
 80027d4:	4807      	ldr	r0, [pc, #28]	; (80027f4 <DEV_Module_Init+0x28>)
 80027d6:	f004 fba9 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2140      	movs	r1, #64	; 0x40
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <DEV_Module_Init+0x28>)
 80027e0:	f004 fba4 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 80027e4:	2201      	movs	r2, #1
 80027e6:	2110      	movs	r1, #16
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <DEV_Module_Init+0x28>)
 80027ea:	f004 fb9f 	bl	8006f2c <HAL_GPIO_WritePin>
		return 0;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	48000400 	.word	0x48000400

080027f8 <DEV_Module_Exit>:

void DEV_Module_Exit(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80027fc:	2200      	movs	r2, #0
 80027fe:	2120      	movs	r1, #32
 8002800:	4807      	ldr	r0, [pc, #28]	; (8002820 <DEV_Module_Exit+0x28>)
 8002802:	f004 fb93 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8002806:	2200      	movs	r2, #0
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <DEV_Module_Exit+0x28>)
 800280c:	f004 fb8e 	bl	8006f2c <HAL_GPIO_WritePin>

    //close 5V
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8002810:	2200      	movs	r2, #0
 8002812:	2110      	movs	r1, #16
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <DEV_Module_Exit+0x28>)
 8002816:	f004 fb89 	bl	8006f2c <HAL_GPIO_WritePin>
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	48000400 	.word	0x48000400

08002824 <EPD_Reset>:
/******************************************************************************
function :	Software reset
parameter:
******************************************************************************/
static void EPD_Reset(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8002828:	2201      	movs	r2, #1
 800282a:	2110      	movs	r1, #16
 800282c:	480b      	ldr	r0, [pc, #44]	; (800285c <EPD_Reset+0x38>)
 800282e:	f004 fb7d 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8002832:	20c8      	movs	r0, #200	; 0xc8
 8002834:	f004 f826 	bl	8006884 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8002838:	2200      	movs	r2, #0
 800283a:	2110      	movs	r1, #16
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <EPD_Reset+0x38>)
 800283e:	f004 fb75 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Delay_ms(2);
 8002842:	2002      	movs	r0, #2
 8002844:	f004 f81e 	bl	8006884 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8002848:	2201      	movs	r2, #1
 800284a:	2110      	movs	r1, #16
 800284c:	4803      	ldr	r0, [pc, #12]	; (800285c <EPD_Reset+0x38>)
 800284e:	f004 fb6d 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 8002852:	20c8      	movs	r0, #200	; 0xc8
 8002854:	f004 f816 	bl	8006884 <HAL_Delay>
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	48000400 	.word	0x48000400

08002860 <EPD_SendCommand>:
function :	send command
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(UBYTE Reg)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800286a:	2200      	movs	r2, #0
 800286c:	2120      	movs	r1, #32
 800286e:	480a      	ldr	r0, [pc, #40]	; (8002898 <EPD_SendCommand+0x38>)
 8002870:	f004 fb5c 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2140      	movs	r1, #64	; 0x40
 8002878:	4807      	ldr	r0, [pc, #28]	; (8002898 <EPD_SendCommand+0x38>)
 800287a:	f004 fb57 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff91 	bl	80027a8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8002886:	2201      	movs	r2, #1
 8002888:	2140      	movs	r1, #64	; 0x40
 800288a:	4803      	ldr	r0, [pc, #12]	; (8002898 <EPD_SendCommand+0x38>)
 800288c:	f004 fb4e 	bl	8006f2c <HAL_GPIO_WritePin>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	48000400 	.word	0x48000400

0800289c <EPD_SendData>:
function :	send data
parameter:
    Data : Write data
******************************************************************************/
static void EPD_SendData(UBYTE Data)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80028a6:	2201      	movs	r2, #1
 80028a8:	2120      	movs	r1, #32
 80028aa:	480a      	ldr	r0, [pc, #40]	; (80028d4 <EPD_SendData+0x38>)
 80028ac:	f004 fb3e 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80028b0:	2200      	movs	r2, #0
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <EPD_SendData+0x38>)
 80028b6:	f004 fb39 	bl	8006f2c <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff73 	bl	80027a8 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80028c2:	2201      	movs	r2, #1
 80028c4:	2140      	movs	r1, #64	; 0x40
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <EPD_SendData+0x38>)
 80028c8:	f004 fb30 	bl	8006f2c <HAL_GPIO_WritePin>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	48000400 	.word	0x48000400

080028d8 <EPD_WaitUntilIdle>:
/******************************************************************************
function :	Wait until the busy_pin goes LOW
parameter:
******************************************************************************/
static void EPD_WaitUntilIdle(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
    unsigned char busy;
	do{
		EPD_SendCommand(0x71);
 80028de:	2071      	movs	r0, #113	; 0x71
 80028e0:	f7ff ffbe 	bl	8002860 <EPD_SendCommand>
		busy = DEV_Digital_Read(EPD_BUSY_PIN);
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	480c      	ldr	r0, [pc, #48]	; (8002918 <EPD_WaitUntilIdle+0x40>)
 80028e8:	f004 fb08 	bl	8006efc <HAL_GPIO_ReadPin>
 80028ec:	4603      	mov	r3, r0
 80028ee:	71fb      	strb	r3, [r7, #7]
		busy =!(busy & 0x01);        
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	71fb      	strb	r3, [r7, #7]
	}while(busy);
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ea      	bne.n	80028de <EPD_WaitUntilIdle+0x6>
	DEV_Delay_ms(200);      
 8002908:	20c8      	movs	r0, #200	; 0xc8
 800290a:	f003 ffbb 	bl	8006884 <HAL_Delay>
		
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	48000400 	.word	0x48000400

0800291c <EPD_7IN5_V2_LUT>:

static void EPD_7IN5_V2_LUT(UBYTE* lut_vcom,  UBYTE* lut_ww, UBYTE* lut_bw, UBYTE* lut_wb, UBYTE* lut_bb)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
	UBYTE count;

	EPD_SendCommand(0x20); //VCOM	
 800292a:	2020      	movs	r0, #32
 800292c:	f7ff ff98 	bl	8002860 <EPD_SendCommand>
	for(count=0; count<42; count++)
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
 8002934:	e009      	b.n	800294a <EPD_7IN5_V2_LUT+0x2e>
		EPD_SendData(lut_vcom[count]);
 8002936:	7dfb      	ldrb	r3, [r7, #23]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ffac 	bl	800289c <EPD_SendData>
	for(count=0; count<42; count++)
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	3301      	adds	r3, #1
 8002948:	75fb      	strb	r3, [r7, #23]
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	2b29      	cmp	r3, #41	; 0x29
 800294e:	d9f2      	bls.n	8002936 <EPD_7IN5_V2_LUT+0x1a>

	EPD_SendCommand(0x21); //LUTBW
 8002950:	2021      	movs	r0, #33	; 0x21
 8002952:	f7ff ff85 	bl	8002860 <EPD_SendCommand>
	for(count=0; count<42; count++)
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]
 800295a:	e009      	b.n	8002970 <EPD_7IN5_V2_LUT+0x54>
		EPD_SendData(lut_ww[count]);
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4413      	add	r3, r2
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff99 	bl	800289c <EPD_SendData>
	for(count=0; count<42; count++)
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	3301      	adds	r3, #1
 800296e:	75fb      	strb	r3, [r7, #23]
 8002970:	7dfb      	ldrb	r3, [r7, #23]
 8002972:	2b29      	cmp	r3, #41	; 0x29
 8002974:	d9f2      	bls.n	800295c <EPD_7IN5_V2_LUT+0x40>

	EPD_SendCommand(0x22); //LUTBW
 8002976:	2022      	movs	r0, #34	; 0x22
 8002978:	f7ff ff72 	bl	8002860 <EPD_SendCommand>
	for(count=0; count<42; count++)
 800297c:	2300      	movs	r3, #0
 800297e:	75fb      	strb	r3, [r7, #23]
 8002980:	e009      	b.n	8002996 <EPD_7IN5_V2_LUT+0x7a>
		EPD_SendData(lut_bw[count]);
 8002982:	7dfb      	ldrb	r3, [r7, #23]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	4413      	add	r3, r2
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff86 	bl	800289c <EPD_SendData>
	for(count=0; count<42; count++)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	3301      	adds	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	2b29      	cmp	r3, #41	; 0x29
 800299a:	d9f2      	bls.n	8002982 <EPD_7IN5_V2_LUT+0x66>

	EPD_SendCommand(0x23); //LUTWB
 800299c:	2023      	movs	r0, #35	; 0x23
 800299e:	f7ff ff5f 	bl	8002860 <EPD_SendCommand>
	for(count=0; count<42; count++)
 80029a2:	2300      	movs	r3, #0
 80029a4:	75fb      	strb	r3, [r7, #23]
 80029a6:	e009      	b.n	80029bc <EPD_7IN5_V2_LUT+0xa0>
		EPD_SendData(lut_wb[count]);
 80029a8:	7dfb      	ldrb	r3, [r7, #23]
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff ff73 	bl	800289c <EPD_SendData>
	for(count=0; count<42; count++)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	3301      	adds	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b29      	cmp	r3, #41	; 0x29
 80029c0:	d9f2      	bls.n	80029a8 <EPD_7IN5_V2_LUT+0x8c>

	EPD_SendCommand(0x24); //LUTBB
 80029c2:	2024      	movs	r0, #36	; 0x24
 80029c4:	f7ff ff4c 	bl	8002860 <EPD_SendCommand>
	for(count=0; count<42; count++)
 80029c8:	2300      	movs	r3, #0
 80029ca:	75fb      	strb	r3, [r7, #23]
 80029cc:	e009      	b.n	80029e2 <EPD_7IN5_V2_LUT+0xc6>
		EPD_SendData(lut_bb[count]);
 80029ce:	7dfb      	ldrb	r3, [r7, #23]
 80029d0:	6a3a      	ldr	r2, [r7, #32]
 80029d2:	4413      	add	r3, r2
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff60 	bl	800289c <EPD_SendData>
	for(count=0; count<42; count++)
 80029dc:	7dfb      	ldrb	r3, [r7, #23]
 80029de:	3301      	adds	r3, #1
 80029e0:	75fb      	strb	r3, [r7, #23]
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
 80029e4:	2b29      	cmp	r3, #41	; 0x29
 80029e6:	d9f2      	bls.n	80029ce <EPD_7IN5_V2_LUT+0xb2>
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <EPD_7IN5_V2_TurnOnDisplay>:
/******************************************************************************
function :	Turn On Display
parameter:
******************************************************************************/
static void EPD_7IN5_V2_TurnOnDisplay(void)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	af00      	add	r7, sp, #0
    EPD_SendCommand(0x12);			//DISPLAY REFRESH
 80029f6:	2012      	movs	r0, #18
 80029f8:	f7ff ff32 	bl	8002860 <EPD_SendCommand>
    HAL_Delay(100);//DEV_Delay_ms(100);	        //!!!The delay here is necessary, 200uS at least!!!
 80029fc:	2064      	movs	r0, #100	; 0x64
 80029fe:	f003 ff41 	bl	8006884 <HAL_Delay>
    EPD_WaitUntilIdle();
 8002a02:	f7ff ff69 	bl	80028d8 <EPD_WaitUntilIdle>
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <EPD_7IN5_V2_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
UBYTE EPD_7IN5_V2_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af02      	add	r7, sp, #8
    EPD_Reset();
 8002a12:	f7ff ff07 	bl	8002824 <EPD_Reset>
    // EPD_SendData(0x07);

    // EPD_SendCommand(0X60);			//TCON SETTING
    // EPD_SendData(0x22);

	EPD_SendCommand(0x01);  // power setting
 8002a16:	2001      	movs	r0, #1
 8002a18:	f7ff ff22 	bl	8002860 <EPD_SendCommand>
	EPD_SendData(0x17);  // 1-0=11: internal power
 8002a1c:	2017      	movs	r0, #23
 8002a1e:	f7ff ff3d 	bl	800289c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+6));  // VGH&VGL
 8002a22:	4b40      	ldr	r3, [pc, #256]	; (8002b24 <EPD_7IN5_V2_Init+0x118>)
 8002a24:	799b      	ldrb	r3, [r3, #6]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff38 	bl	800289c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+1));  // VSH
 8002a2c:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <EPD_7IN5_V2_Init+0x118>)
 8002a2e:	785b      	ldrb	r3, [r3, #1]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff33 	bl	800289c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+2));  //  VSL
 8002a36:	4b3b      	ldr	r3, [pc, #236]	; (8002b24 <EPD_7IN5_V2_Init+0x118>)
 8002a38:	789b      	ldrb	r3, [r3, #2]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff2e 	bl	800289c <EPD_SendData>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+3));  //  VSHR
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <EPD_7IN5_V2_Init+0x118>)
 8002a42:	78db      	ldrb	r3, [r3, #3]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff29 	bl	800289c <EPD_SendData>
	
	EPD_SendCommand(0x82);  // VCOM DC Setting
 8002a4a:	2082      	movs	r0, #130	; 0x82
 8002a4c:	f7ff ff08 	bl	8002860 <EPD_SendCommand>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+4));  // VCOM
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <EPD_7IN5_V2_Init+0x118>)
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff21 	bl	800289c <EPD_SendData>

	EPD_SendCommand(0x06);  // Booster Setting
 8002a5a:	2006      	movs	r0, #6
 8002a5c:	f7ff ff00 	bl	8002860 <EPD_SendCommand>
	EPD_SendData(0x27);
 8002a60:	2027      	movs	r0, #39	; 0x27
 8002a62:	f7ff ff1b 	bl	800289c <EPD_SendData>
	EPD_SendData(0x27);
 8002a66:	2027      	movs	r0, #39	; 0x27
 8002a68:	f7ff ff18 	bl	800289c <EPD_SendData>
	EPD_SendData(0x2F);
 8002a6c:	202f      	movs	r0, #47	; 0x2f
 8002a6e:	f7ff ff15 	bl	800289c <EPD_SendData>
	EPD_SendData(0x17);
 8002a72:	2017      	movs	r0, #23
 8002a74:	f7ff ff12 	bl	800289c <EPD_SendData>
	
	EPD_SendCommand(0x30);   // OSC Setting
 8002a78:	2030      	movs	r0, #48	; 0x30
 8002a7a:	f7ff fef1 	bl	8002860 <EPD_SendCommand>
	EPD_SendData(*(Voltage_Frame_7IN5_V2+0));  // 2-0=100: N=4  ; 5-3=111: M=7  ;  3C=50Hz     3A=100HZ
 8002a7e:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <EPD_7IN5_V2_Init+0x118>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff0a 	bl	800289c <EPD_SendData>

    EPD_SendCommand(0x04); //POWER ON
 8002a88:	2004      	movs	r0, #4
 8002a8a:	f7ff fee9 	bl	8002860 <EPD_SendCommand>
    DEV_Delay_ms(100);
 8002a8e:	2064      	movs	r0, #100	; 0x64
 8002a90:	f003 fef8 	bl	8006884 <HAL_Delay>
    EPD_WaitUntilIdle();
 8002a94:	f7ff ff20 	bl	80028d8 <EPD_WaitUntilIdle>

    EPD_SendCommand(0X00);			//PANNEL SETTING
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7ff fee1 	bl	8002860 <EPD_SendCommand>
    EPD_SendData(0x3F);   //KW-3f   KWR-2F	BWROTP 0f	BWOTP 1f
 8002a9e:	203f      	movs	r0, #63	; 0x3f
 8002aa0:	f7ff fefc 	bl	800289c <EPD_SendData>

    EPD_SendCommand(0x61);        	//tres
 8002aa4:	2061      	movs	r0, #97	; 0x61
 8002aa6:	f7ff fedb 	bl	8002860 <EPD_SendCommand>
    EPD_SendData(0x03);		//source 800
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f7ff fef6 	bl	800289c <EPD_SendData>
    EPD_SendData(0x20);
 8002ab0:	2020      	movs	r0, #32
 8002ab2:	f7ff fef3 	bl	800289c <EPD_SendData>
    EPD_SendData(0x01);		//gate 480
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7ff fef0 	bl	800289c <EPD_SendData>
    EPD_SendData(0xE0);
 8002abc:	20e0      	movs	r0, #224	; 0xe0
 8002abe:	f7ff feed 	bl	800289c <EPD_SendData>

    EPD_SendCommand(0X15);
 8002ac2:	2015      	movs	r0, #21
 8002ac4:	f7ff fecc 	bl	8002860 <EPD_SendCommand>
    EPD_SendData(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7ff fee7 	bl	800289c <EPD_SendData>

    EPD_SendCommand(0X50);			//VCOM AND DATA INTERVAL SETTING
 8002ace:	2050      	movs	r0, #80	; 0x50
 8002ad0:	f7ff fec6 	bl	8002860 <EPD_SendCommand>
    EPD_SendData(0x10);
 8002ad4:	2010      	movs	r0, #16
 8002ad6:	f7ff fee1 	bl	800289c <EPD_SendData>
    EPD_SendData(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7ff fede 	bl	800289c <EPD_SendData>

    EPD_SendCommand(0X60);			//TCON SETTING
 8002ae0:	2060      	movs	r0, #96	; 0x60
 8002ae2:	f7ff febd 	bl	8002860 <EPD_SendCommand>
    EPD_SendData(0x22);
 8002ae6:	2022      	movs	r0, #34	; 0x22
 8002ae8:	f7ff fed8 	bl	800289c <EPD_SendData>

    EPD_SendCommand(0x65);  // Resolution setting
 8002aec:	2065      	movs	r0, #101	; 0x65
 8002aee:	f7ff feb7 	bl	8002860 <EPD_SendCommand>
    EPD_SendData(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7ff fed2 	bl	800289c <EPD_SendData>
    EPD_SendData(0x00);//800*480
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7ff fecf 	bl	800289c <EPD_SendData>
    EPD_SendData(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7ff fecc 	bl	800289c <EPD_SendData>
    EPD_SendData(0x00);
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7ff fec9 	bl	800289c <EPD_SendData>
	
	EPD_7IN5_V2_LUT(LUT_VCOM_7IN5_V2, LUT_WW_7IN5_V2, LUT_BW_7IN5_V2, LUT_WB_7IN5_V2, LUT_BB_7IN5_V2);
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <EPD_7IN5_V2_Init+0x11c>)
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <EPD_7IN5_V2_Init+0x120>)
 8002b10:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <EPD_7IN5_V2_Init+0x124>)
 8002b12:	4908      	ldr	r1, [pc, #32]	; (8002b34 <EPD_7IN5_V2_Init+0x128>)
 8002b14:	4808      	ldr	r0, [pc, #32]	; (8002b38 <EPD_7IN5_V2_Init+0x12c>)
 8002b16:	f7ff ff01 	bl	800291c <EPD_7IN5_V2_LUT>

    return 0;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000028 	.word	0x20000028
 8002b28:	200000e0 	.word	0x200000e0
 8002b2c:	200000b4 	.word	0x200000b4
 8002b30:	20000088 	.word	0x20000088
 8002b34:	2000005c 	.word	0x2000005c
 8002b38:	20000030 	.word	0x20000030

08002b3c <EPD_7IN5_V2_Display>:
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_7IN5_V2_Display(const UBYTE *blackimage)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    UDOUBLE Width, Height;
    Width =(EPD_7IN5_V2_WIDTH % 8 == 0)?(EPD_7IN5_V2_WIDTH / 8 ):(EPD_7IN5_V2_WIDTH / 8 + 1);
 8002b44:	2364      	movs	r3, #100	; 0x64
 8002b46:	60fb      	str	r3, [r7, #12]
    Height = EPD_7IN5_V2_HEIGHT;
 8002b48:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b4c:	60bb      	str	r3, [r7, #8]
    
	//send black data
    EPD_SendCommand(0x13);
 8002b4e:	2013      	movs	r0, #19
 8002b50:	f7ff fe86 	bl	8002860 <EPD_SendCommand>
    for (UDOUBLE j = 0; j < Height; j++) {
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e01a      	b.n	8002b90 <EPD_7IN5_V2_Display+0x54>
        for (UDOUBLE i = 0; i < Width; i++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
 8002b5e:	e010      	b.n	8002b82 <EPD_7IN5_V2_Display+0x46>
            EPD_SendData(~blackimage[i + j * Width]);
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	fb03 f202 	mul.w	r2, r3, r2
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff fe90 	bl	800289c <EPD_SendData>
        for (UDOUBLE i = 0; i < Width; i++) {
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	613b      	str	r3, [r7, #16]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d3ea      	bcc.n	8002b60 <EPD_7IN5_V2_Display+0x24>
    for (UDOUBLE j = 0; j < Height; j++) {
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d3e0      	bcc.n	8002b5a <EPD_7IN5_V2_Display+0x1e>
        }
    }
    EPD_7IN5_V2_TurnOnDisplay();
 8002b98:	f7ff ff2b 	bl	80029f2 <EPD_7IN5_V2_TurnOnDisplay>
}
 8002b9c:	bf00      	nop
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	817b      	strh	r3, [r7, #10]
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	813b      	strh	r3, [r7, #8]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8002bbe:	4b23      	ldr	r3, [pc, #140]	; (8002c4c <Paint_NewImage+0xa8>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8002bc4:	4a21      	ldr	r2, [pc, #132]	; (8002c4c <Paint_NewImage+0xa8>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8002bca:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <Paint_NewImage+0xa8>)
 8002bcc:	897b      	ldrh	r3, [r7, #10]
 8002bce:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8002bd0:	4a1e      	ldr	r2, [pc, #120]	; (8002c4c <Paint_NewImage+0xa8>)
 8002bd2:	893b      	ldrh	r3, [r7, #8]
 8002bd4:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8002bd6:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <Paint_NewImage+0xa8>)
 8002bd8:	8b3b      	ldrh	r3, [r7, #24]
 8002bda:	8193      	strh	r3, [r2, #12]
	Paint.Scale = 2;
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	; (8002c4c <Paint_NewImage+0xa8>)
 8002bde:	2202      	movs	r2, #2
 8002be0:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8002be2:	897b      	ldrh	r3, [r7, #10]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d103      	bne.n	8002bf6 <Paint_NewImage+0x52>
 8002bee:	897b      	ldrh	r3, [r7, #10]
 8002bf0:	08db      	lsrs	r3, r3, #3
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	e004      	b.n	8002c00 <Paint_NewImage+0x5c>
 8002bf6:	897b      	ldrh	r3, [r7, #10]
 8002bf8:	08db      	lsrs	r3, r3, #3
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c02:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8002c04:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c06:	893b      	ldrh	r3, [r7, #8]
 8002c08:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <Paint_NewImage+0x7e>
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	2bb4      	cmp	r3, #180	; 0xb4
 8002c20:	d106      	bne.n	8002c30 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8002c22:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c24:	897b      	ldrh	r3, [r7, #10]
 8002c26:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8002c28:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c2a:	893b      	ldrh	r3, [r7, #8]
 8002c2c:	80d3      	strh	r3, [r2, #6]
 8002c2e:	e006      	b.n	8002c3e <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8002c30:	4a06      	ldr	r2, [pc, #24]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c32:	893b      	ldrh	r3, [r7, #8]
 8002c34:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8002c36:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <Paint_NewImage+0xa8>)
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	80d3      	strh	r3, [r2, #6]
    }
}
 8002c3c:	bf00      	nop
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	2000062c 	.word	0x2000062c

08002c50 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8002c58:	4a04      	ldr	r2, [pc, #16]	; (8002c6c <Paint_SelectImage+0x1c>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	2000062c 	.word	0x2000062c

08002c70 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b08b      	sub	sp, #44	; 0x2c
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	80bb      	strh	r3, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8002c82:	4ba0      	ldr	r3, [pc, #640]	; (8002f04 <Paint_SetPixel+0x294>)
 8002c84:	889b      	ldrh	r3, [r3, #4]
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f200 812f 	bhi.w	8002eec <Paint_SetPixel+0x27c>
 8002c8e:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <Paint_SetPixel+0x294>)
 8002c90:	88db      	ldrh	r3, [r3, #6]
 8002c92:	88ba      	ldrh	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	f200 8129 	bhi.w	8002eec <Paint_SetPixel+0x27c>
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 8002c9a:	4b9a      	ldr	r3, [pc, #616]	; (8002f04 <Paint_SetPixel+0x294>)
 8002c9c:	89db      	ldrh	r3, [r3, #14]
 8002c9e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002ca2:	d02b      	beq.n	8002cfc <Paint_SetPixel+0x8c>
 8002ca4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002ca8:	f300 8122 	bgt.w	8002ef0 <Paint_SetPixel+0x280>
 8002cac:	2bb4      	cmp	r3, #180	; 0xb4
 8002cae:	d016      	beq.n	8002cde <Paint_SetPixel+0x6e>
 8002cb0:	2bb4      	cmp	r3, #180	; 0xb4
 8002cb2:	f300 811d 	bgt.w	8002ef0 <Paint_SetPixel+0x280>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <Paint_SetPixel+0x50>
 8002cba:	2b5a      	cmp	r3, #90	; 0x5a
 8002cbc:	d005      	beq.n	8002cca <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8002cbe:	e117      	b.n	8002ef0 <Paint_SetPixel+0x280>
        X = Xpoint;
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8002cc4:	88bb      	ldrh	r3, [r7, #4]
 8002cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002cc8:	e022      	b.n	8002d10 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 8002cca:	4b8e      	ldr	r3, [pc, #568]	; (8002f04 <Paint_SetPixel+0x294>)
 8002ccc:	891a      	ldrh	r2, [r3, #8]
 8002cce:	88bb      	ldrh	r3, [r7, #4]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8002cd8:	88fb      	ldrh	r3, [r7, #6]
 8002cda:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002cdc:	e018      	b.n	8002d10 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 8002cde:	4b89      	ldr	r3, [pc, #548]	; (8002f04 <Paint_SetPixel+0x294>)
 8002ce0:	891a      	ldrh	r2, [r3, #8]
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8002cec:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <Paint_SetPixel+0x294>)
 8002cee:	895a      	ldrh	r2, [r3, #10]
 8002cf0:	88bb      	ldrh	r3, [r7, #4]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002cfa:	e009      	b.n	8002d10 <Paint_SetPixel+0xa0>
        X = Ypoint;
 8002cfc:	88bb      	ldrh	r3, [r7, #4]
 8002cfe:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8002d00:	4b80      	ldr	r3, [pc, #512]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d02:	895a      	ldrh	r2, [r3, #10]
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002d0e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8002d10:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d12:	8a1b      	ldrh	r3, [r3, #16]
 8002d14:	2b03      	cmp	r3, #3
 8002d16:	f200 80ed 	bhi.w	8002ef4 <Paint_SetPixel+0x284>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <Paint_SetPixel+0xb0>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d6f 	.word	0x08002d6f
 8002d24:	08002d31 	.word	0x08002d31
 8002d28:	08002d41 	.word	0x08002d41
 8002d2c:	08002d51 	.word	0x08002d51
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8002d30:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d32:	891a      	ldrh	r2, [r3, #8]
 8002d34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8002d3e:	e017      	b.n	8002d70 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d42:	895a      	ldrh	r2, [r3, #10]
 8002d44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002d4e:	e00f      	b.n	8002d70 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8002d50:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d52:	891a      	ldrh	r2, [r3, #8]
 8002d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8002d5e:	4b69      	ldr	r3, [pc, #420]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d60:	895a      	ldrh	r2, [r3, #10]
 8002d62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8002d6c:	e000      	b.n	8002d70 <Paint_SetPixel+0x100>
        break;
 8002d6e:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8002d70:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d72:	891b      	ldrh	r3, [r3, #8]
 8002d74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002d76:	429a      	cmp	r2, r3
 8002d78:	f200 80be 	bhi.w	8002ef8 <Paint_SetPixel+0x288>
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d7e:	895b      	ldrh	r3, [r3, #10]
 8002d80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d82:	429a      	cmp	r2, r3
 8002d84:	f200 80b8 	bhi.w	8002ef8 <Paint_SetPixel+0x288>
        return;
    }
    
    if(Paint.Scale == 2){
 8002d88:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d8a:	8adb      	ldrh	r3, [r3, #22]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d139      	bne.n	8002e04 <Paint_SetPixel+0x194>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8002d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d92:	08db      	lsrs	r3, r3, #3
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d9a:	4a5a      	ldr	r2, [pc, #360]	; (8002f04 <Paint_SetPixel+0x294>)
 8002d9c:	8a52      	ldrh	r2, [r2, #18]
 8002d9e:	fb02 f303 	mul.w	r3, r2, r3
 8002da2:	440b      	add	r3, r1
 8002da4:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 8002da6:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <Paint_SetPixel+0x294>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d113      	bne.n	8002de0 <Paint_SetPixel+0x170>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8002db8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	fa42 f303 	asr.w	r3, r2, r3
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	b25a      	sxtb	r2, r3
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	b259      	sxtb	r1, r3
 8002dd2:	4b4c      	ldr	r3, [pc, #304]	; (8002f04 <Paint_SetPixel+0x294>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b2ca      	uxtb	r2, r1
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e08c      	b.n	8002efa <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8002de0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	2280      	movs	r2, #128	; 0x80
 8002de8:	fa42 f303 	asr.w	r3, r2, r3
 8002dec:	b25a      	sxtb	r2, r3
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	b259      	sxtb	r1, r3
 8002df6:	4b43      	ldr	r3, [pc, #268]	; (8002f04 <Paint_SetPixel+0x294>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	b2ca      	uxtb	r2, r1
 8002e00:	701a      	strb	r2, [r3, #0]
 8002e02:	e07a      	b.n	8002efa <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8002e04:	4b3f      	ldr	r3, [pc, #252]	; (8002f04 <Paint_SetPixel+0x294>)
 8002e06:	8adb      	ldrh	r3, [r3, #22]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d137      	bne.n	8002e7c <Paint_SetPixel+0x20c>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8002e0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e16:	4a3b      	ldr	r2, [pc, #236]	; (8002f04 <Paint_SetPixel+0x294>)
 8002e18:	8a52      	ldrh	r2, [r2, #18]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	440b      	add	r3, r1
 8002e20:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <Paint_SetPixel+0x294>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	4413      	add	r3, r2
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	75fb      	strb	r3, [r7, #23]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8002e36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	22c0      	movs	r2, #192	; 0xc0
 8002e40:	fa42 f303 	asr.w	r3, r2, r3
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	43db      	mvns	r3, r3
 8002e48:	b25a      	sxtb	r2, r3
 8002e4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	b25b      	sxtb	r3, r3
 8002e52:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	019a      	lsls	r2, r3, #6
 8002e58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	fa42 f303 	asr.w	r3, r2, r3
 8002e64:	b25a      	sxtb	r2, r3
 8002e66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b259      	sxtb	r1, r3
 8002e6e:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <Paint_SetPixel+0x294>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	b2ca      	uxtb	r2, r1
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e03e      	b.n	8002efa <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <Paint_SetPixel+0x294>)
 8002e7e:	8adb      	ldrh	r3, [r3, #22]
 8002e80:	2b07      	cmp	r3, #7
 8002e82:	d13a      	bne.n	8002efa <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8002e84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002e86:	085b      	lsrs	r3, r3, #1
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e8e:	4a1d      	ldr	r2, [pc, #116]	; (8002f04 <Paint_SetPixel+0x294>)
 8002e90:	8a52      	ldrh	r2, [r2, #18]
 8002e92:	fb02 f303 	mul.w	r3, r2, r3
 8002e96:	440b      	add	r3, r1
 8002e98:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <Paint_SetPixel+0x294>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8002ea6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002ea8:	f003 0301 	and.w	r3, r3, #1
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	22f0      	movs	r2, #240	; 0xf0
 8002eb0:	fa42 f303 	asr.w	r3, r2, r3
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	b25a      	sxtb	r2, r3
 8002eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	b25b      	sxtb	r3, r3
 8002ec2:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	011a      	lsls	r2, r3, #4
 8002ec8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa42 f303 	asr.w	r3, r2, r3
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b259      	sxtb	r1, r3
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <Paint_SetPixel+0x294>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	b2ca      	uxtb	r2, r1
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e006      	b.n	8002efa <Paint_SetPixel+0x28a>
        return;
 8002eec:	bf00      	nop
 8002eee:	e004      	b.n	8002efa <Paint_SetPixel+0x28a>
        return;
 8002ef0:	bf00      	nop
 8002ef2:	e002      	b.n	8002efa <Paint_SetPixel+0x28a>
        return;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <Paint_SetPixel+0x28a>
        return;
 8002ef8:	bf00      	nop
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 8002efa:	372c      	adds	r7, #44	; 0x2c
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	2000062c 	.word	0x2000062c

08002f08 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
	if(Paint.Scale == 2) {
 8002f12:	4b4c      	ldr	r3, [pc, #304]	; (8003044 <Paint_Clear+0x13c>)
 8002f14:	8adb      	ldrh	r3, [r3, #22]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d125      	bne.n	8002f66 <Paint_Clear+0x5e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	83fb      	strh	r3, [r7, #30]
 8002f1e:	e01c      	b.n	8002f5a <Paint_Clear+0x52>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002f20:	2300      	movs	r3, #0
 8002f22:	83bb      	strh	r3, [r7, #28]
 8002f24:	e011      	b.n	8002f4a <Paint_Clear+0x42>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8002f26:	8bba      	ldrh	r2, [r7, #28]
 8002f28:	8bfb      	ldrh	r3, [r7, #30]
 8002f2a:	4946      	ldr	r1, [pc, #280]	; (8003044 <Paint_Clear+0x13c>)
 8002f2c:	8a49      	ldrh	r1, [r1, #18]
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	60bb      	str	r3, [r7, #8]
				Paint.Image[Addr] = Color;
 8002f36:	4b43      	ldr	r3, [pc, #268]	; (8003044 <Paint_Clear+0x13c>)
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 8002f44:	8bbb      	ldrh	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	83bb      	strh	r3, [r7, #28]
 8002f4a:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <Paint_Clear+0x13c>)
 8002f4c:	8a5b      	ldrh	r3, [r3, #18]
 8002f4e:	8bba      	ldrh	r2, [r7, #28]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3e8      	bcc.n	8002f26 <Paint_Clear+0x1e>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002f54:	8bfb      	ldrh	r3, [r7, #30]
 8002f56:	3301      	adds	r3, #1
 8002f58:	83fb      	strh	r3, [r7, #30]
 8002f5a:	4b3a      	ldr	r3, [pc, #232]	; (8003044 <Paint_Clear+0x13c>)
 8002f5c:	8a9b      	ldrh	r3, [r3, #20]
 8002f5e:	8bfa      	ldrh	r2, [r7, #30]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d3dd      	bcc.n	8002f20 <Paint_Clear+0x18>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
				Paint.Image[Addr] = (Color<<4)|Color;
			}
		}		
	}
}
 8002f64:	e068      	b.n	8003038 <Paint_Clear+0x130>
    }else if(Paint.Scale == 4) {
 8002f66:	4b37      	ldr	r3, [pc, #220]	; (8003044 <Paint_Clear+0x13c>)
 8002f68:	8adb      	ldrh	r3, [r3, #22]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d135      	bne.n	8002fda <Paint_Clear+0xd2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002f6e:	2300      	movs	r3, #0
 8002f70:	837b      	strh	r3, [r7, #26]
 8002f72:	e02c      	b.n	8002fce <Paint_Clear+0xc6>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002f74:	2300      	movs	r3, #0
 8002f76:	833b      	strh	r3, [r7, #24]
 8002f78:	e021      	b.n	8002fbe <Paint_Clear+0xb6>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8002f7a:	8b3a      	ldrh	r2, [r7, #24]
 8002f7c:	8b7b      	ldrh	r3, [r7, #26]
 8002f7e:	4931      	ldr	r1, [pc, #196]	; (8003044 <Paint_Clear+0x13c>)
 8002f80:	8a49      	ldrh	r1, [r1, #18]
 8002f82:	fb01 f303 	mul.w	r3, r1, r3
 8002f86:	4413      	add	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	019b      	lsls	r3, r3, #6
 8002f8e:	b25a      	sxtb	r2, r3
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	4313      	orrs	r3, r2
 8002f98:	b25a      	sxtb	r2, r3
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	b25b      	sxtb	r3, r3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b25a      	sxtb	r2, r3
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	b25b      	sxtb	r3, r3
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b259      	sxtb	r1, r3
 8002fac:	4b25      	ldr	r3, [pc, #148]	; (8003044 <Paint_Clear+0x13c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	b2ca      	uxtb	r2, r1
 8002fb6:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002fb8:	8b3b      	ldrh	r3, [r7, #24]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	833b      	strh	r3, [r7, #24]
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <Paint_Clear+0x13c>)
 8002fc0:	8a5b      	ldrh	r3, [r3, #18]
 8002fc2:	8b3a      	ldrh	r2, [r7, #24]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3d8      	bcc.n	8002f7a <Paint_Clear+0x72>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	837b      	strh	r3, [r7, #26]
 8002fce:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <Paint_Clear+0x13c>)
 8002fd0:	8a9b      	ldrh	r3, [r3, #20]
 8002fd2:	8b7a      	ldrh	r2, [r7, #26]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3cd      	bcc.n	8002f74 <Paint_Clear+0x6c>
}
 8002fd8:	e02e      	b.n	8003038 <Paint_Clear+0x130>
	}else if(Paint.Scale == 7) {
 8002fda:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <Paint_Clear+0x13c>)
 8002fdc:	8adb      	ldrh	r3, [r3, #22]
 8002fde:	2b07      	cmp	r3, #7
 8002fe0:	d12a      	bne.n	8003038 <Paint_Clear+0x130>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	82fb      	strh	r3, [r7, #22]
 8002fe6:	e022      	b.n	800302e <Paint_Clear+0x126>
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8002fe8:	2300      	movs	r3, #0
 8002fea:	82bb      	strh	r3, [r7, #20]
 8002fec:	e017      	b.n	800301e <Paint_Clear+0x116>
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8002fee:	8aba      	ldrh	r2, [r7, #20]
 8002ff0:	8afb      	ldrh	r3, [r7, #22]
 8002ff2:	4914      	ldr	r1, [pc, #80]	; (8003044 <Paint_Clear+0x13c>)
 8002ff4:	8a49      	ldrh	r1, [r1, #18]
 8002ff6:	fb01 f303 	mul.w	r3, r1, r3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
				Paint.Image[Addr] = (Color<<4)|Color;
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	b25a      	sxtb	r2, r3
 8003004:	88fb      	ldrh	r3, [r7, #6]
 8003006:	b25b      	sxtb	r3, r3
 8003008:	4313      	orrs	r3, r2
 800300a:	b259      	sxtb	r1, r3
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <Paint_Clear+0x13c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	b2ca      	uxtb	r2, r1
 8003016:	701a      	strb	r2, [r3, #0]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8003018:	8abb      	ldrh	r3, [r7, #20]
 800301a:	3301      	adds	r3, #1
 800301c:	82bb      	strh	r3, [r7, #20]
 800301e:	4b09      	ldr	r3, [pc, #36]	; (8003044 <Paint_Clear+0x13c>)
 8003020:	8a5b      	ldrh	r3, [r3, #18]
 8003022:	8aba      	ldrh	r2, [r7, #20]
 8003024:	429a      	cmp	r2, r3
 8003026:	d3e2      	bcc.n	8002fee <Paint_Clear+0xe6>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8003028:	8afb      	ldrh	r3, [r7, #22]
 800302a:	3301      	adds	r3, #1
 800302c:	82fb      	strh	r3, [r7, #22]
 800302e:	4b05      	ldr	r3, [pc, #20]	; (8003044 <Paint_Clear+0x13c>)
 8003030:	8a9b      	ldrh	r3, [r3, #20]
 8003032:	8afa      	ldrh	r2, [r7, #22]
 8003034:	429a      	cmp	r2, r3
 8003036:	d3d7      	bcc.n	8002fe8 <Paint_Clear+0xe0>
}
 8003038:	bf00      	nop
 800303a:	3724      	adds	r7, #36	; 0x24
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	2000062c 	.word	0x2000062c

08003048 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	607b      	str	r3, [r7, #4]
 8003050:	4603      	mov	r3, r0
 8003052:	81fb      	strh	r3, [r7, #14]
 8003054:	460b      	mov	r3, r1
 8003056:	81bb      	strh	r3, [r7, #12]
 8003058:	4613      	mov	r3, r2
 800305a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800305c:	4b4c      	ldr	r3, [pc, #304]	; (8003190 <Paint_DrawChar+0x148>)
 800305e:	889b      	ldrh	r3, [r3, #4]
 8003060:	89fa      	ldrh	r2, [r7, #14]
 8003062:	429a      	cmp	r2, r3
 8003064:	f200 808f 	bhi.w	8003186 <Paint_DrawChar+0x13e>
 8003068:	4b49      	ldr	r3, [pc, #292]	; (8003190 <Paint_DrawChar+0x148>)
 800306a:	88db      	ldrh	r3, [r3, #6]
 800306c:	89ba      	ldrh	r2, [r7, #12]
 800306e:	429a      	cmp	r2, r3
 8003070:	f200 8089 	bhi.w	8003186 <Paint_DrawChar+0x13e>
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8003074:	7afb      	ldrb	r3, [r7, #11]
 8003076:	3b20      	subs	r3, #32
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	88d2      	ldrh	r2, [r2, #6]
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	8892      	ldrh	r2, [r2, #4]
 8003084:	08d2      	lsrs	r2, r2, #3
 8003086:	b292      	uxth	r2, r2
 8003088:	4611      	mov	r1, r2
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	8892      	ldrh	r2, [r2, #4]
 800308e:	f002 0207 	and.w	r2, r2, #7
 8003092:	b292      	uxth	r2, r2
 8003094:	2a00      	cmp	r2, #0
 8003096:	bf14      	ite	ne
 8003098:	2201      	movne	r2, #1
 800309a:	2200      	moveq	r2, #0
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	440a      	add	r2, r1
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	4413      	add	r3, r2
 80030ae:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 80030b0:	2300      	movs	r3, #0
 80030b2:	83fb      	strh	r3, [r7, #30]
 80030b4:	e061      	b.n	800317a <Paint_DrawChar+0x132>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80030b6:	2300      	movs	r3, #0
 80030b8:	83bb      	strh	r3, [r7, #28]
 80030ba:	e04c      	b.n	8003156 <Paint_DrawChar+0x10e>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 80030bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80030be:	2bff      	cmp	r3, #255	; 0xff
 80030c0:	d118      	bne.n	80030f4 <Paint_DrawChar+0xac>
                if (*ptr & (0x80 >> (Column % 8)))
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	4619      	mov	r1, r3
 80030c8:	8bbb      	ldrh	r3, [r7, #28]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	2280      	movs	r2, #128	; 0x80
 80030d0:	fa42 f303 	asr.w	r3, r2, r3
 80030d4:	400b      	ands	r3, r1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d031      	beq.n	800313e <Paint_DrawChar+0xf6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 80030da:	89fa      	ldrh	r2, [r7, #14]
 80030dc:	8bbb      	ldrh	r3, [r7, #28]
 80030de:	4413      	add	r3, r2
 80030e0:	b298      	uxth	r0, r3
 80030e2:	89ba      	ldrh	r2, [r7, #12]
 80030e4:	8bfb      	ldrh	r3, [r7, #30]
 80030e6:	4413      	add	r3, r2
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80030ec:	4619      	mov	r1, r3
 80030ee:	f7ff fdbf 	bl	8002c70 <Paint_SetPixel>
 80030f2:	e024      	b.n	800313e <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	8bbb      	ldrh	r3, [r7, #28]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	fa42 f303 	asr.w	r3, r2, r3
 8003106:	400b      	ands	r3, r1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00c      	beq.n	8003126 <Paint_DrawChar+0xde>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800310c:	89fa      	ldrh	r2, [r7, #14]
 800310e:	8bbb      	ldrh	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	b298      	uxth	r0, r3
 8003114:	89ba      	ldrh	r2, [r7, #12]
 8003116:	8bfb      	ldrh	r3, [r7, #30]
 8003118:	4413      	add	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800311e:	4619      	mov	r1, r3
 8003120:	f7ff fda6 	bl	8002c70 <Paint_SetPixel>
 8003124:	e00b      	b.n	800313e <Paint_DrawChar+0xf6>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 8003126:	89fa      	ldrh	r2, [r7, #14]
 8003128:	8bbb      	ldrh	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	b298      	uxth	r0, r3
 800312e:	89ba      	ldrh	r2, [r7, #12]
 8003130:	8bfb      	ldrh	r3, [r7, #30]
 8003132:	4413      	add	r3, r2
 8003134:	b29b      	uxth	r3, r3
 8003136:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8003138:	4619      	mov	r1, r3
 800313a:	f7ff fd99 	bl	8002c70 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800313e:	8bbb      	ldrh	r3, [r7, #28]
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b07      	cmp	r3, #7
 8003148:	d102      	bne.n	8003150 <Paint_DrawChar+0x108>
                ptr++;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3301      	adds	r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8003150:	8bbb      	ldrh	r3, [r7, #28]
 8003152:	3301      	adds	r3, #1
 8003154:	83bb      	strh	r3, [r7, #28]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	889b      	ldrh	r3, [r3, #4]
 800315a:	8bba      	ldrh	r2, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3ad      	bcc.n	80030bc <Paint_DrawChar+0x74>
        }// Write a line
        if (Font->Width % 8 != 0)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	889b      	ldrh	r3, [r3, #4]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <Paint_DrawChar+0x12c>
            ptr++;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	3301      	adds	r3, #1
 8003172:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 8003174:	8bfb      	ldrh	r3, [r7, #30]
 8003176:	3301      	adds	r3, #1
 8003178:	83fb      	strh	r3, [r7, #30]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	88db      	ldrh	r3, [r3, #6]
 800317e:	8bfa      	ldrh	r2, [r7, #30]
 8003180:	429a      	cmp	r2, r3
 8003182:	d398      	bcc.n	80030b6 <Paint_DrawChar+0x6e>
 8003184:	e000      	b.n	8003188 <Paint_DrawChar+0x140>
        return;
 8003186:	bf00      	nop
    }// Write all
}
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	2000062c 	.word	0x2000062c

08003194 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b088      	sub	sp, #32
 8003198:	af02      	add	r7, sp, #8
 800319a:	60ba      	str	r2, [r7, #8]
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	4603      	mov	r3, r0
 80031a0:	81fb      	strh	r3, [r7, #14]
 80031a2:	460b      	mov	r3, r1
 80031a4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 80031a6:	89fb      	ldrh	r3, [r7, #14]
 80031a8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 80031aa:	89bb      	ldrh	r3, [r7, #12]
 80031ac:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 80031ae:	4b21      	ldr	r3, [pc, #132]	; (8003234 <Paint_DrawString_EN+0xa0>)
 80031b0:	889b      	ldrh	r3, [r3, #4]
 80031b2:	89fa      	ldrh	r2, [r7, #14]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d838      	bhi.n	800322a <Paint_DrawString_EN+0x96>
 80031b8:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <Paint_DrawString_EN+0xa0>)
 80031ba:	88db      	ldrh	r3, [r3, #6]
 80031bc:	89ba      	ldrh	r2, [r7, #12]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d833      	bhi.n	800322a <Paint_DrawString_EN+0x96>
        return;
    }

    while (* pString != '\0') {
 80031c2:	e02d      	b.n	8003220 <Paint_DrawString_EN+0x8c>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80031c4:	8afb      	ldrh	r3, [r7, #22]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	8892      	ldrh	r2, [r2, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	4a19      	ldr	r2, [pc, #100]	; (8003234 <Paint_DrawString_EN+0xa0>)
 80031ce:	8892      	ldrh	r2, [r2, #4]
 80031d0:	4293      	cmp	r3, r2
 80031d2:	dd06      	ble.n	80031e2 <Paint_DrawString_EN+0x4e>
            Xpoint = Xstart;
 80031d4:	89fb      	ldrh	r3, [r7, #14]
 80031d6:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	88da      	ldrh	r2, [r3, #6]
 80031dc:	8abb      	ldrh	r3, [r7, #20]
 80031de:	4413      	add	r3, r2
 80031e0:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 80031e2:	8abb      	ldrh	r3, [r7, #20]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	88d2      	ldrh	r2, [r2, #6]
 80031e8:	4413      	add	r3, r2
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <Paint_DrawString_EN+0xa0>)
 80031ec:	88d2      	ldrh	r2, [r2, #6]
 80031ee:	4293      	cmp	r3, r2
 80031f0:	dd03      	ble.n	80031fa <Paint_DrawString_EN+0x66>
            Xpoint = Xstart;
 80031f2:	89fb      	ldrh	r3, [r7, #14]
 80031f4:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 80031f6:	89bb      	ldrh	r3, [r7, #12]
 80031f8:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	781a      	ldrb	r2, [r3, #0]
 80031fe:	8ab9      	ldrh	r1, [r7, #20]
 8003200:	8af8      	ldrh	r0, [r7, #22]
 8003202:	8c3b      	ldrh	r3, [r7, #32]
 8003204:	9301      	str	r3, [sp, #4]
 8003206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f7ff ff1c 	bl	8003048 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	3301      	adds	r3, #1
 8003214:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	889a      	ldrh	r2, [r3, #4]
 800321a:	8afb      	ldrh	r3, [r7, #22]
 800321c:	4413      	add	r3, r2
 800321e:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1cd      	bne.n	80031c4 <Paint_DrawString_EN+0x30>
 8003228:	e000      	b.n	800322c <Paint_DrawString_EN+0x98>
        return;
 800322a:	bf00      	nop
    }
}
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	2000062c 	.word	0x2000062c

08003238 <Paint_DrawBitMap_Paste>:
    flipColor: Whether the color is reversed
info:
    Use this function to paste image data into a buffer
******************************************************************************/
void Paint_DrawBitMap_Paste(const unsigned char* image_buffer, UWORD xStart, UWORD yStart, UWORD imageWidth, UWORD imageHeight, UBYTE flipColor)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	460b      	mov	r3, r1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
    UBYTE color, srcImage;
    UWORD x, y;
    UWORD width = (imageWidth%8==0 ? imageWidth/8 : imageWidth/8+1);
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d103      	bne.n	8003266 <Paint_DrawBitMap_Paste+0x2e>
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	08db      	lsrs	r3, r3, #3
 8003262:	b29b      	uxth	r3, r3
 8003264:	e004      	b.n	8003270 <Paint_DrawBitMap_Paste+0x38>
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	08db      	lsrs	r3, r3, #3
 800326a:	b29b      	uxth	r3, r3
 800326c:	3301      	adds	r3, #1
 800326e:	b29b      	uxth	r3, r3
 8003270:	833b      	strh	r3, [r7, #24]
    
    for (y = 0; y < imageHeight; y++) {
 8003272:	2300      	movs	r3, #0
 8003274:	837b      	strh	r3, [r7, #26]
 8003276:	e047      	b.n	8003308 <Paint_DrawBitMap_Paste+0xd0>
        for (x = 0; x < imageWidth; x++) {
 8003278:	2300      	movs	r3, #0
 800327a:	83bb      	strh	r3, [r7, #28]
 800327c:	e03d      	b.n	80032fa <Paint_DrawBitMap_Paste+0xc2>
            srcImage = image_buffer[y*width + x/8];
 800327e:	8b7b      	ldrh	r3, [r7, #26]
 8003280:	8b3a      	ldrh	r2, [r7, #24]
 8003282:	fb02 f303 	mul.w	r3, r2, r3
 8003286:	8bba      	ldrh	r2, [r7, #28]
 8003288:	08d2      	lsrs	r2, r2, #3
 800328a:	b292      	uxth	r2, r2
 800328c:	4413      	add	r3, r2
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4413      	add	r3, r2
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	75fb      	strb	r3, [r7, #23]
            if(flipColor)
 8003298:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00e      	beq.n	80032be <Paint_DrawBitMap_Paste+0x86>
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 1 : 0);
 80032a0:	7dfa      	ldrb	r2, [r7, #23]
 80032a2:	8bbb      	ldrh	r3, [r7, #28]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e00d      	b.n	80032da <Paint_DrawBitMap_Paste+0xa2>
            else
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 80032be:	7dfa      	ldrb	r2, [r7, #23]
 80032c0:	8bbb      	ldrh	r3, [r7, #28]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	77fb      	strb	r3, [r7, #31]
            Paint_SetPixel(x+xStart, y+yStart, color);
 80032da:	8bba      	ldrh	r2, [r7, #28]
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	4413      	add	r3, r2
 80032e0:	b298      	uxth	r0, r3
 80032e2:	8b7a      	ldrh	r2, [r7, #26]
 80032e4:	893b      	ldrh	r3, [r7, #8]
 80032e6:	4413      	add	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	7ffa      	ldrb	r2, [r7, #31]
 80032ec:	b292      	uxth	r2, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7ff fcbe 	bl	8002c70 <Paint_SetPixel>
        for (x = 0; x < imageWidth; x++) {
 80032f4:	8bbb      	ldrh	r3, [r7, #28]
 80032f6:	3301      	adds	r3, #1
 80032f8:	83bb      	strh	r3, [r7, #28]
 80032fa:	8bba      	ldrh	r2, [r7, #28]
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d3bd      	bcc.n	800327e <Paint_DrawBitMap_Paste+0x46>
    for (y = 0; y < imageHeight; y++) {
 8003302:	8b7b      	ldrh	r3, [r7, #26]
 8003304:	3301      	adds	r3, #1
 8003306:	837b      	strh	r3, [r7, #26]
 8003308:	8b7a      	ldrh	r2, [r7, #26]
 800330a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800330c:	429a      	cmp	r2, r3
 800330e:	d3b3      	bcc.n	8003278 <Paint_DrawBitMap_Paste+0x40>
        }
    }
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	3720      	adds	r7, #32
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <UmlautCheck>:
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

void UmlautCheck(uint8_t* String)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b092      	sub	sp, #72	; 0x48
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    uint8_t* StringWork = String;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t CachString[51] = {0};
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	222f      	movs	r2, #47	; 0x2f
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f008 faa5 	bl	800b884 <memset>
    uint8_t* pCachString = CachString;
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	643b      	str	r3, [r7, #64]	; 0x40

    while (*StringWork)
 8003340:	e0f0      	b.n	8003524 <UmlautCheck+0x208>
    {
        // Prüfen auf die Unicode-Sequenz \u0026
        if (*StringWork == '\\' && *(StringWork + 1) == 'u' &&
 8003342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b5c      	cmp	r3, #92	; 0x5c
 8003348:	d11f      	bne.n	800338a <UmlautCheck+0x6e>
 800334a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800334c:	3301      	adds	r3, #1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b75      	cmp	r3, #117	; 0x75
 8003352:	d11a      	bne.n	800338a <UmlautCheck+0x6e>
            *(StringWork + 2) == '0' && *(StringWork + 3) == '0' &&
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	3302      	adds	r3, #2
 8003358:	781b      	ldrb	r3, [r3, #0]
        if (*StringWork == '\\' && *(StringWork + 1) == 'u' &&
 800335a:	2b30      	cmp	r3, #48	; 0x30
 800335c:	d115      	bne.n	800338a <UmlautCheck+0x6e>
            *(StringWork + 2) == '0' && *(StringWork + 3) == '0' &&
 800335e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003360:	3303      	adds	r3, #3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d110      	bne.n	800338a <UmlautCheck+0x6e>
            *(StringWork + 4) == '2' && *(StringWork + 5) == '6')
 8003368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800336a:	3304      	adds	r3, #4
 800336c:	781b      	ldrb	r3, [r3, #0]
            *(StringWork + 2) == '0' && *(StringWork + 3) == '0' &&
 800336e:	2b32      	cmp	r3, #50	; 0x32
 8003370:	d10b      	bne.n	800338a <UmlautCheck+0x6e>
            *(StringWork + 4) == '2' && *(StringWork + 5) == '6')
 8003372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003374:	3305      	adds	r3, #5
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b36      	cmp	r3, #54	; 0x36
 800337a:	d106      	bne.n	800338a <UmlautCheck+0x6e>
        {
            *pCachString = '&'; // Ersetze \u0026 durch &
 800337c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337e:	2226      	movs	r2, #38	; 0x26
 8003380:	701a      	strb	r2, [r3, #0]
            //pCachString++;
            StringWork += 5; // Überspringe die gesamte Sequenz
 8003382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003384:	3305      	adds	r3, #5
 8003386:	647b      	str	r3, [r7, #68]	; 0x44
 8003388:	e0c6      	b.n	8003518 <UmlautCheck+0x1fc>
        }
        else if (*StringWork >= 127)
 800338a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b7e      	cmp	r3, #126	; 0x7e
 8003390:	f240 80be 	bls.w	8003510 <UmlautCheck+0x1f4>
        {
        	if (*StringWork == 195)
 8003394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2bc3      	cmp	r3, #195	; 0xc3
 800339a:	f040 8081 	bne.w	80034a0 <UmlautCheck+0x184>
			{
				StringWork++;
 800339e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a0:	3301      	adds	r3, #1
 80033a2:	647b      	str	r3, [r7, #68]	; 0x44
				switch (*StringWork)
 80033a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b84      	cmp	r3, #132	; 0x84
 80033aa:	d05d      	beq.n	8003468 <UmlautCheck+0x14c>
 80033ac:	2b84      	cmp	r3, #132	; 0x84
 80033ae:	db73      	blt.n	8003498 <UmlautCheck+0x17c>
 80033b0:	2bbc      	cmp	r3, #188	; 0xbc
 80033b2:	dc71      	bgt.n	8003498 <UmlautCheck+0x17c>
 80033b4:	2b96      	cmp	r3, #150	; 0x96
 80033b6:	db6f      	blt.n	8003498 <UmlautCheck+0x17c>
 80033b8:	3b96      	subs	r3, #150	; 0x96
 80033ba:	2b26      	cmp	r3, #38	; 0x26
 80033bc:	d86c      	bhi.n	8003498 <UmlautCheck+0x17c>
 80033be:	a201      	add	r2, pc, #4	; (adr r2, 80033c4 <UmlautCheck+0xa8>)
 80033c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c4:	08003479 	.word	0x08003479
 80033c8:	08003499 	.word	0x08003499
 80033cc:	08003499 	.word	0x08003499
 80033d0:	08003499 	.word	0x08003499
 80033d4:	08003499 	.word	0x08003499
 80033d8:	08003499 	.word	0x08003499
 80033dc:	08003489 	.word	0x08003489
 80033e0:	08003499 	.word	0x08003499
 80033e4:	08003499 	.word	0x08003499
 80033e8:	08003491 	.word	0x08003491
 80033ec:	08003499 	.word	0x08003499
 80033f0:	08003499 	.word	0x08003499
 80033f4:	08003499 	.word	0x08003499
 80033f8:	08003499 	.word	0x08003499
 80033fc:	08003461 	.word	0x08003461
 8003400:	08003499 	.word	0x08003499
 8003404:	08003499 	.word	0x08003499
 8003408:	08003499 	.word	0x08003499
 800340c:	08003499 	.word	0x08003499
 8003410:	08003499 	.word	0x08003499
 8003414:	08003499 	.word	0x08003499
 8003418:	08003499 	.word	0x08003499
 800341c:	08003499 	.word	0x08003499
 8003420:	08003499 	.word	0x08003499
 8003424:	08003499 	.word	0x08003499
 8003428:	08003499 	.word	0x08003499
 800342c:	08003499 	.word	0x08003499
 8003430:	08003499 	.word	0x08003499
 8003434:	08003499 	.word	0x08003499
 8003438:	08003499 	.word	0x08003499
 800343c:	08003499 	.word	0x08003499
 8003440:	08003499 	.word	0x08003499
 8003444:	08003471 	.word	0x08003471
 8003448:	08003499 	.word	0x08003499
 800344c:	08003499 	.word	0x08003499
 8003450:	08003499 	.word	0x08003499
 8003454:	08003499 	.word	0x08003499
 8003458:	08003499 	.word	0x08003499
 800345c:	08003481 	.word	0x08003481
				{
					case 0xa4: // ä
						*pCachString = 127;
 8003460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003462:	227f      	movs	r2, #127	; 0x7f
 8003464:	701a      	strb	r2, [r3, #0]
						break;
 8003466:	e057      	b.n	8003518 <UmlautCheck+0x1fc>
					case 0x84: // Ä
						*pCachString = 128;
 8003468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346a:	2280      	movs	r2, #128	; 0x80
 800346c:	701a      	strb	r2, [r3, #0]
						break;
 800346e:	e053      	b.n	8003518 <UmlautCheck+0x1fc>
					case 0xb6: // ö
						*pCachString = 129;
 8003470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003472:	2281      	movs	r2, #129	; 0x81
 8003474:	701a      	strb	r2, [r3, #0]
						break;
 8003476:	e04f      	b.n	8003518 <UmlautCheck+0x1fc>
					case 0x96: // Ö
						*pCachString = 130;
 8003478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800347a:	2282      	movs	r2, #130	; 0x82
 800347c:	701a      	strb	r2, [r3, #0]
						break;
 800347e:	e04b      	b.n	8003518 <UmlautCheck+0x1fc>
					case 0xbc: // ü
						*pCachString = 131;
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	2283      	movs	r2, #131	; 0x83
 8003484:	701a      	strb	r2, [r3, #0]
						break;
 8003486:	e047      	b.n	8003518 <UmlautCheck+0x1fc>
					case 0x9c: // Ü
						*pCachString = 132;
 8003488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800348a:	2284      	movs	r2, #132	; 0x84
 800348c:	701a      	strb	r2, [r3, #0]
						break;
 800348e:	e043      	b.n	8003518 <UmlautCheck+0x1fc>
					case 0x9f: // ß
						*pCachString = 133;
 8003490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003492:	2285      	movs	r2, #133	; 0x85
 8003494:	701a      	strb	r2, [r3, #0]
						break;
 8003496:	e03f      	b.n	8003518 <UmlautCheck+0x1fc>
					default:
						*pCachString = 32; // Alle anderen durch Leerzeichen ersetzen
 8003498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349a:	2220      	movs	r2, #32
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e03b      	b.n	8003518 <UmlautCheck+0x1fc>
				}
			}
        	else if (*StringWork == 132) //ä
 80034a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b84      	cmp	r3, #132	; 0x84
 80034a6:	d103      	bne.n	80034b0 <UmlautCheck+0x194>
        	{
        		*pCachString = 127;
 80034a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034aa:	227f      	movs	r2, #127	; 0x7f
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e033      	b.n	8003518 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 142) //Ä
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b8e      	cmp	r3, #142	; 0x8e
 80034b6:	d103      	bne.n	80034c0 <UmlautCheck+0x1a4>
        	{
        		*pCachString = 128;
 80034b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ba:	2280      	movs	r2, #128	; 0x80
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e02b      	b.n	8003518 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 148) //ö
 80034c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b94      	cmp	r3, #148	; 0x94
 80034c6:	d103      	bne.n	80034d0 <UmlautCheck+0x1b4>
        	{
        		*pCachString = 129;
 80034c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ca:	2281      	movs	r2, #129	; 0x81
 80034cc:	701a      	strb	r2, [r3, #0]
 80034ce:	e023      	b.n	8003518 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 153) //Ö
 80034d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b99      	cmp	r3, #153	; 0x99
 80034d6:	d103      	bne.n	80034e0 <UmlautCheck+0x1c4>
        	{
        		*pCachString = 130;
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	2282      	movs	r2, #130	; 0x82
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e01b      	b.n	8003518 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 154) //Ü
 80034e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b9a      	cmp	r3, #154	; 0x9a
 80034e6:	d103      	bne.n	80034f0 <UmlautCheck+0x1d4>
        	{
        		*pCachString = 132;
 80034e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ea:	2284      	movs	r2, #132	; 0x84
 80034ec:	701a      	strb	r2, [r3, #0]
 80034ee:	e013      	b.n	8003518 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 129) //ü
 80034f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b81      	cmp	r3, #129	; 0x81
 80034f6:	d103      	bne.n	8003500 <UmlautCheck+0x1e4>
        	{
        		*pCachString = 131;
 80034f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034fa:	2283      	movs	r2, #131	; 0x83
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e00b      	b.n	8003518 <UmlautCheck+0x1fc>
        	}
        	else if (*StringWork == 225) //ß
 8003500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2be1      	cmp	r3, #225	; 0xe1
 8003506:	d107      	bne.n	8003518 <UmlautCheck+0x1fc>
        	{
        		*pCachString = 133;
 8003508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800350a:	2285      	movs	r2, #133	; 0x85
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e003      	b.n	8003518 <UmlautCheck+0x1fc>
        	}
        }
        else
        {
            *pCachString = *StringWork;
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	781a      	ldrb	r2, [r3, #0]
 8003514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003516:	701a      	strb	r2, [r3, #0]
        }

        pCachString++;
 8003518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800351a:	3301      	adds	r3, #1
 800351c:	643b      	str	r3, [r7, #64]	; 0x40
        StringWork++;
 800351e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003520:	3301      	adds	r3, #1
 8003522:	647b      	str	r3, [r7, #68]	; 0x44
    while (*StringWork)
 8003524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f47f af0a 	bne.w	8003342 <UmlautCheck+0x26>
    }

    strcpy((char*)String, (char*)CachString);
 800352e:	f107 030c 	add.w	r3, r7, #12
 8003532:	4619      	mov	r1, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f008 fa42 	bl	800b9be <strcpy>
}
 800353a:	bf00      	nop
 800353c:	3748      	adds	r7, #72	; 0x48
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop

08003544 <vPrint_Skin_Office>:


void vPrint_Skin_Office(struct sCommunication* Com)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af02      	add	r7, sp, #8
 800354a:	6078      	str	r0, [r7, #4]
	UBYTE *BlackImage;

	BlackImage = (UBYTE *)malloc(4736U);
 800354c:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8003550:	f007 fdf8 	bl	800b144 <malloc>
 8003554:	4603      	mov	r3, r0
 8003556:	60fb      	str	r3, [r7, #12]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8003558:	23ff      	movs	r3, #255	; 0xff
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003562:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff fb1c 	bl	8002ba4 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fb6f 	bl	8002c50 <Paint_SelectImage>
	Paint_Clear(WHITE);
 8003572:	20ff      	movs	r0, #255	; 0xff
 8003574:	f7ff fcc8 	bl	8002f08 <Paint_Clear>
	////
	Paint_DrawBitMap_Paste(Background_Office, 0, 0, 800, 480, BLACK);
 8003578:	2300      	movs	r3, #0
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	4895      	ldr	r0, [pc, #596]	; (80037e0 <vPrint_Skin_Office+0x29c>)
 800358c:	f7ff fe54 	bl	8003238 <Paint_DrawBitMap_Paste>

	//Room Nr.
	UmlautCheck(Com->u8L1);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	331e      	adds	r3, #30
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fec1 	bl	800331c <UmlautCheck>
	Com->u8L1[5]=0x00;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Paint_DrawString_EN(40, 33, (const char *)Com->u8L1, &Font_Lucida_80b, BLACK, WHITE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f103 021e 	add.w	r2, r3, #30
 80035a8:	23ff      	movs	r3, #255	; 0xff
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2300      	movs	r3, #0
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4b8c      	ldr	r3, [pc, #560]	; (80037e4 <vPrint_Skin_Office+0x2a0>)
 80035b2:	2121      	movs	r1, #33	; 0x21
 80035b4:	2028      	movs	r0, #40	; 0x28
 80035b6:	f7ff fded 	bl	8003194 <Paint_DrawString_EN>

	//Name
	UmlautCheck(Com->u8L2);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3350      	adds	r3, #80	; 0x50
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff feac 	bl	800331c <UmlautCheck>
	Com->u8L2[34]=0x00;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	Paint_DrawString_EN(40, 170, (const char *)Com->u8L2, &Font_Lucida_24b, WHITE, BLACK);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80035d2:	2300      	movs	r3, #0
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	23ff      	movs	r3, #255	; 0xff
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	4b83      	ldr	r3, [pc, #524]	; (80037e8 <vPrint_Skin_Office+0x2a4>)
 80035dc:	21aa      	movs	r1, #170	; 0xaa
 80035de:	2028      	movs	r0, #40	; 0x28
 80035e0:	f7ff fdd8 	bl	8003194 <Paint_DrawString_EN>

	//Name2
	UmlautCheck(Com->u8L3);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3382      	adds	r3, #130	; 0x82
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff fe97 	bl	800331c <UmlautCheck>
	Com->u8L3[34]=0x00;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Paint_DrawString_EN(40, 205, (const char *)Com->u8L3, &Font_Lucida_24b, WHITE, BLACK);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f103 0282 	add.w	r2, r3, #130	; 0x82
 80035fc:	2300      	movs	r3, #0
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	23ff      	movs	r3, #255	; 0xff
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	4b78      	ldr	r3, [pc, #480]	; (80037e8 <vPrint_Skin_Office+0x2a4>)
 8003606:	21cd      	movs	r1, #205	; 0xcd
 8003608:	2028      	movs	r0, #40	; 0x28
 800360a:	f7ff fdc3 	bl	8003194 <Paint_DrawString_EN>

	//Person Point 1
	UmlautCheck(Com->u8L4);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	33b4      	adds	r3, #180	; 0xb4
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fe82 	bl	800331c <UmlautCheck>
	Com->u8L4[32]=0x00;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	Paint_DrawString_EN(40, 245, (const char *)Com->u8L4, &Font_Lucida_18, WHITE, BLACK);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8003626:	2300      	movs	r3, #0
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	23ff      	movs	r3, #255	; 0xff
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <vPrint_Skin_Office+0x2a8>)
 8003630:	21f5      	movs	r1, #245	; 0xf5
 8003632:	2028      	movs	r0, #40	; 0x28
 8003634:	f7ff fdae 	bl	8003194 <Paint_DrawString_EN>

	//Person Point 2
	UmlautCheck(Com->u8L5);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	33e6      	adds	r3, #230	; 0xe6
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fe6d 	bl	800331c <UmlautCheck>
	Com->u8L5[32]=0x00;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
	Paint_DrawString_EN(40, 273, (const char *)Com->u8L5, &Font_Lucida_18, WHITE, BLACK);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 02e6 	add.w	r2, r3, #230	; 0xe6
 8003650:	2300      	movs	r3, #0
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	23ff      	movs	r3, #255	; 0xff
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <vPrint_Skin_Office+0x2a8>)
 800365a:	f240 1111 	movw	r1, #273	; 0x111
 800365e:	2028      	movs	r0, #40	; 0x28
 8003660:	f7ff fd98 	bl	8003194 <Paint_DrawString_EN>

	//Person Point 3
	UmlautCheck(Com->u8L6);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fe56 	bl	800331c <UmlautCheck>
	Com->u8L6[32]=0x00;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
	Paint_DrawString_EN(40, 301, (const char *)Com->u8L6, &Font_Lucida_18, WHITE, BLACK);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800367e:	2300      	movs	r3, #0
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	23ff      	movs	r3, #255	; 0xff
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	4b59      	ldr	r3, [pc, #356]	; (80037ec <vPrint_Skin_Office+0x2a8>)
 8003688:	f240 112d 	movw	r1, #301	; 0x12d
 800368c:	2028      	movs	r0, #40	; 0x28
 800368e:	f7ff fd81 	bl	8003194 <Paint_DrawString_EN>

	//Person Point 4
	UmlautCheck(Com->u8L7);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8003698:	4618      	mov	r0, r3
 800369a:	f7ff fe3f 	bl	800331c <UmlautCheck>
	Com->u8L7[32]=0x00;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
	Paint_DrawString_EN(40, 329, (const char *)Com->u8L7, &Font_Lucida_18, WHITE, BLACK);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f503 72a5 	add.w	r2, r3, #330	; 0x14a
 80036ac:	2300      	movs	r3, #0
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	23ff      	movs	r3, #255	; 0xff
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	4b4d      	ldr	r3, [pc, #308]	; (80037ec <vPrint_Skin_Office+0x2a8>)
 80036b6:	f240 1149 	movw	r1, #329	; 0x149
 80036ba:	2028      	movs	r0, #40	; 0x28
 80036bc:	f7ff fd6a 	bl	8003194 <Paint_DrawString_EN>

	//Info Bar
	UmlautCheck(Com->u8L8);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe28 	bl	800331c <UmlautCheck>
	Com->u8L8[32]=0x00;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
	Paint_DrawString_EN(40, 363, (const char *)Com->u8L8, &Font_Lucida_18b, BLACK, WHITE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 80036da:	23ff      	movs	r3, #255	; 0xff
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	2300      	movs	r3, #0
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	4b43      	ldr	r3, [pc, #268]	; (80037f0 <vPrint_Skin_Office+0x2ac>)
 80036e4:	f240 116b 	movw	r1, #363	; 0x16b
 80036e8:	2028      	movs	r0, #40	; 0x28
 80036ea:	f7ff fd53 	bl	8003194 <Paint_DrawString_EN>

	//Info1
	UmlautCheck(Com->u8L9);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f503 73d7 	add.w	r3, r3, #430	; 0x1ae
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fe11 	bl	800331c <UmlautCheck>
	Com->u8L9[32]=0x00;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 21ce 	strb.w	r2, [r3, #462]	; 0x1ce
	Paint_DrawString_EN(40, 400, (const char *)Com->u8L9, &Font_Lucida_18, WHITE, BLACK);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 72d7 	add.w	r2, r3, #430	; 0x1ae
 8003708:	2300      	movs	r3, #0
 800370a:	9301      	str	r3, [sp, #4]
 800370c:	23ff      	movs	r3, #255	; 0xff
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4b36      	ldr	r3, [pc, #216]	; (80037ec <vPrint_Skin_Office+0x2a8>)
 8003712:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003716:	2028      	movs	r0, #40	; 0x28
 8003718:	f7ff fd3c 	bl	8003194 <Paint_DrawString_EN>

	//Info2
	UmlautCheck(Com->u8L10);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003722:	4618      	mov	r0, r3
 8003724:	f7ff fdfa 	bl	800331c <UmlautCheck>
	Com->u8L10[32]=0x00;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	Paint_DrawString_EN(40, 430, (const char *)Com->u8L10, &Font_Lucida_18, WHITE, BLACK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 8003736:	2300      	movs	r3, #0
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	23ff      	movs	r3, #255	; 0xff
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <vPrint_Skin_Office+0x2a8>)
 8003740:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003744:	2028      	movs	r0, #40	; 0x28
 8003746:	f7ff fd25 	bl	8003194 <Paint_DrawString_EN>

	if (Com->u8G_ID == 1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8003750:	2b01      	cmp	r3, #1
 8003752:	d10a      	bne.n	800376a <vPrint_Skin_Office+0x226>
	{
		Paint_DrawBitMap_Paste(piktogramm_buero, 561, 243, 224, 224, BLACK);
 8003754:	2300      	movs	r3, #0
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	23e0      	movs	r3, #224	; 0xe0
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	23e0      	movs	r3, #224	; 0xe0
 800375e:	22f3      	movs	r2, #243	; 0xf3
 8003760:	f240 2131 	movw	r1, #561	; 0x231
 8003764:	4823      	ldr	r0, [pc, #140]	; (80037f4 <vPrint_Skin_Office+0x2b0>)
 8003766:	f7ff fd67 	bl	8003238 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 2)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8003770:	2b02      	cmp	r3, #2
 8003772:	d10a      	bne.n	800378a <vPrint_Skin_Office+0x246>
	{
		Paint_DrawBitMap_Paste(piktogramm_chip, 561, 243, 224, 224, BLACK);
 8003774:	2300      	movs	r3, #0
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	23e0      	movs	r3, #224	; 0xe0
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	23e0      	movs	r3, #224	; 0xe0
 800377e:	22f3      	movs	r2, #243	; 0xf3
 8003780:	f240 2131 	movw	r1, #561	; 0x231
 8003784:	481c      	ldr	r0, [pc, #112]	; (80037f8 <vPrint_Skin_Office+0x2b4>)
 8003786:	f7ff fd57 	bl	8003238 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 3)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 8003790:	2b03      	cmp	r3, #3
 8003792:	d10a      	bne.n	80037aa <vPrint_Skin_Office+0x266>
	{
		Paint_DrawBitMap_Paste(piktogramm_leise, 561, 243, 224, 224, BLACK);
 8003794:	2300      	movs	r3, #0
 8003796:	9301      	str	r3, [sp, #4]
 8003798:	23e0      	movs	r3, #224	; 0xe0
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	23e0      	movs	r3, #224	; 0xe0
 800379e:	22f3      	movs	r2, #243	; 0xf3
 80037a0:	f240 2131 	movw	r1, #561	; 0x231
 80037a4:	4815      	ldr	r0, [pc, #84]	; (80037fc <vPrint_Skin_Office+0x2b8>)
 80037a6:	f7ff fd47 	bl	8003238 <Paint_DrawBitMap_Paste>
	}

	if (Com->u8G_ID == 4)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d10a      	bne.n	80037ca <vPrint_Skin_Office+0x286>
	{
		Paint_DrawBitMap_Paste(piktogramm_vorlesung, 561, 243, 224, 224, BLACK);
 80037b4:	2300      	movs	r3, #0
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	23e0      	movs	r3, #224	; 0xe0
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	23e0      	movs	r3, #224	; 0xe0
 80037be:	22f3      	movs	r2, #243	; 0xf3
 80037c0:	f240 2131 	movw	r1, #561	; 0x231
 80037c4:	480e      	ldr	r0, [pc, #56]	; (8003800 <vPrint_Skin_Office+0x2bc>)
 80037c6:	f7ff fd37 	bl	8003238 <Paint_DrawBitMap_Paste>
	}

	//Paint_DrawLine(0, 0, 800, 480, 0x00, DOT_PIXEL_5X5, LINE_STYLE_SOLID);
	////
	EPD_7IN5_V2_Display(BlackImage);
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff f9b6 	bl	8002b3c <EPD_7IN5_V2_Display>
	free(BlackImage);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f007 fcbf 	bl	800b154 <free>
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	0801eddc 	.word	0x0801eddc
 80037e4:	20000180 	.word	0x20000180
 80037e8:	20000170 	.word	0x20000170
 80037ec:	20000160 	.word	0x20000160
 80037f0:	20000168 	.word	0x20000168
 80037f4:	0800d05c 	.word	0x0800d05c
 80037f8:	0801015c 	.word	0x0801015c
 80037fc:	080119dc 	.word	0x080119dc
 8003800:	0800e8dc 	.word	0x0800e8dc

08003804 <vPrint_Skin_Lecture_Room>:
	EPD_7IN5_V2_Display(BlackImage);
	free(BlackImage);
}

void vPrint_Skin_Lecture_Room(struct sCommunication* Com)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]
	UBYTE *BlackImage;

	BlackImage = (UBYTE *)malloc(4736U);
 800380c:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8003810:	f007 fc98 	bl	800b144 <malloc>
 8003814:	4603      	mov	r3, r0
 8003816:	60fb      	str	r3, [r7, #12]

	Paint_NewImage(BlackImage, EPD_7IN5_V2_WIDTH, EPD_7IN5_V2_HEIGHT, 0, WHITE);
 8003818:	23ff      	movs	r3, #255	; 0xff
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2300      	movs	r3, #0
 800381e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003822:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f7ff f9bc 	bl	8002ba4 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7ff fa0f 	bl	8002c50 <Paint_SelectImage>
	Paint_Clear(WHITE);
 8003832:	20ff      	movs	r0, #255	; 0xff
 8003834:	f7ff fb68 	bl	8002f08 <Paint_Clear>
	////

	Paint_DrawBitMap_Paste(Background_Lecture_Room, 0, 0, 800, 480, BLACK);
 8003838:	2300      	movs	r3, #0
 800383a:	9301      	str	r3, [sp, #4]
 800383c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	f44f 7348 	mov.w	r3, #800	; 0x320
 8003846:	2200      	movs	r2, #0
 8003848:	2100      	movs	r1, #0
 800384a:	486e      	ldr	r0, [pc, #440]	; (8003a04 <vPrint_Skin_Lecture_Room+0x200>)
 800384c:	f7ff fcf4 	bl	8003238 <Paint_DrawBitMap_Paste>

	//Room Nr.
	UmlautCheck(Com->u8L1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	331e      	adds	r3, #30
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fd61 	bl	800331c <UmlautCheck>
	Com->u8L1[5] = 0;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	Paint_DrawString_EN(40, 33, (const char *)Com->u8L1, &Font_Lucida_80b, BLACK, WHITE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f103 021e 	add.w	r2, r3, #30
 8003868:	23ff      	movs	r3, #255	; 0xff
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	2300      	movs	r3, #0
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <vPrint_Skin_Lecture_Room+0x204>)
 8003872:	2121      	movs	r1, #33	; 0x21
 8003874:	2028      	movs	r0, #40	; 0x28
 8003876:	f7ff fc8d 	bl	8003194 <Paint_DrawString_EN>

	//1. Clock
	Com->u8L2[14] = 0;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Paint_DrawString_EN(40, 175, (const char *)Com->u8L2, &Font_Lucida_24b, WHITE, BLACK);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8003888:	2300      	movs	r3, #0
 800388a:	9301      	str	r3, [sp, #4]
 800388c:	23ff      	movs	r3, #255	; 0xff
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4b5e      	ldr	r3, [pc, #376]	; (8003a0c <vPrint_Skin_Lecture_Room+0x208>)
 8003892:	21af      	movs	r1, #175	; 0xaf
 8003894:	2028      	movs	r0, #40	; 0x28
 8003896:	f7ff fc7d 	bl	8003194 <Paint_DrawString_EN>
	//1. Titel
	UmlautCheck(Com->u8L3);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3382      	adds	r3, #130	; 0x82
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fd3c 	bl	800331c <UmlautCheck>
	Com->u8L3[28] = 0;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e
	Paint_DrawString_EN(40, 217, (const char *)Com->u8L3, &Font_Lucida_30b, WHITE, BLACK);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f103 0282 	add.w	r2, r3, #130	; 0x82
 80038b2:	2300      	movs	r3, #0
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	23ff      	movs	r3, #255	; 0xff
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4b55      	ldr	r3, [pc, #340]	; (8003a10 <vPrint_Skin_Lecture_Room+0x20c>)
 80038bc:	21d9      	movs	r1, #217	; 0xd9
 80038be:	2028      	movs	r0, #40	; 0x28
 80038c0:	f7ff fc68 	bl	8003194 <Paint_DrawString_EN>
	//1. Name
	UmlautCheck(Com->u8L4);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	33b4      	adds	r3, #180	; 0xb4
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fd27 	bl	800331c <UmlautCheck>
	Com->u8L4[28] = 0;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	Paint_DrawString_EN(330, 182, (const char *)Com->u8L4, &Font_Lucida_18, WHITE, BLACK);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 80038dc:	2300      	movs	r3, #0
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	23ff      	movs	r3, #255	; 0xff
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <vPrint_Skin_Lecture_Room+0x210>)
 80038e6:	21b6      	movs	r1, #182	; 0xb6
 80038e8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80038ec:	f7ff fc52 	bl	8003194 <Paint_DrawString_EN>


	//2. Clock
	Com->u8L5[14] = 0;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	Paint_DrawString_EN(40, 275, (const char *)Com->u8L5, &Font_Lucida_24b, WHITE, BLACK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f103 02e6 	add.w	r2, r3, #230	; 0xe6
 80038fe:	2300      	movs	r3, #0
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	23ff      	movs	r3, #255	; 0xff
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <vPrint_Skin_Lecture_Room+0x208>)
 8003908:	f240 1113 	movw	r1, #275	; 0x113
 800390c:	2028      	movs	r0, #40	; 0x28
 800390e:	f7ff fc41 	bl	8003194 <Paint_DrawString_EN>
	//2. Titel
	UmlautCheck(Com->u8L6);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fcff 	bl	800331c <UmlautCheck>
	Com->u8L6[28] = 0;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
	Paint_DrawString_EN(40, 317, (const char *)Com->u8L6, &Font_Lucida_30b, WHITE, BLACK);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800392c:	2300      	movs	r3, #0
 800392e:	9301      	str	r3, [sp, #4]
 8003930:	23ff      	movs	r3, #255	; 0xff
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <vPrint_Skin_Lecture_Room+0x20c>)
 8003936:	f240 113d 	movw	r1, #317	; 0x13d
 800393a:	2028      	movs	r0, #40	; 0x28
 800393c:	f7ff fc2a 	bl	8003194 <Paint_DrawString_EN>
	//2. Name
	UmlautCheck(Com->u8L7);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fce8 	bl	800331c <UmlautCheck>
	Com->u8L7[28] = 0;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	Paint_DrawString_EN(330, 282, (const char *)Com->u8L7, &Font_Lucida_18, WHITE, BLACK);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 72a5 	add.w	r2, r3, #330	; 0x14a
 800395a:	2300      	movs	r3, #0
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	23ff      	movs	r3, #255	; 0xff
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	4b2c      	ldr	r3, [pc, #176]	; (8003a14 <vPrint_Skin_Lecture_Room+0x210>)
 8003964:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003968:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800396c:	f7ff fc12 	bl	8003194 <Paint_DrawString_EN>


	//3. Clock
	Com->u8L8[14] = 0;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
	Paint_DrawString_EN(40, 375, (const char *)Com->u8L8, &Font_Lucida_24b, WHITE, BLACK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f503 72be 	add.w	r2, r3, #380	; 0x17c
 800397e:	2300      	movs	r3, #0
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	23ff      	movs	r3, #255	; 0xff
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	4b21      	ldr	r3, [pc, #132]	; (8003a0c <vPrint_Skin_Lecture_Room+0x208>)
 8003988:	f240 1177 	movw	r1, #375	; 0x177
 800398c:	2028      	movs	r0, #40	; 0x28
 800398e:	f7ff fc01 	bl	8003194 <Paint_DrawString_EN>
	//3. Titel
	UmlautCheck(Com->u8L9);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f503 73d7 	add.w	r3, r3, #430	; 0x1ae
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fcbf 	bl	800331c <UmlautCheck>
	Com->u8L9[28] = 0;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
	Paint_DrawString_EN(40, 417, (const char *)Com->u8L9, &Font_Lucida_30b, WHITE, BLACK);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f503 72d7 	add.w	r2, r3, #430	; 0x1ae
 80039ac:	2300      	movs	r3, #0
 80039ae:	9301      	str	r3, [sp, #4]
 80039b0:	23ff      	movs	r3, #255	; 0xff
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <vPrint_Skin_Lecture_Room+0x20c>)
 80039b6:	f240 11a1 	movw	r1, #417	; 0x1a1
 80039ba:	2028      	movs	r0, #40	; 0x28
 80039bc:	f7ff fbea 	bl	8003194 <Paint_DrawString_EN>
	//3. Name
	UmlautCheck(Com->u8L10);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7ff fca8 	bl	800331c <UmlautCheck>
	Com->u8L10[28] = 0;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
	Paint_DrawString_EN(330, 382, (const char *)Com->u8L10, &Font_Lucida_18, WHITE, BLACK);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 72f0 	add.w	r2, r3, #480	; 0x1e0
 80039da:	2300      	movs	r3, #0
 80039dc:	9301      	str	r3, [sp, #4]
 80039de:	23ff      	movs	r3, #255	; 0xff
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <vPrint_Skin_Lecture_Room+0x210>)
 80039e4:	f44f 71bf 	mov.w	r1, #382	; 0x17e
 80039e8:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80039ec:	f7ff fbd2 	bl	8003194 <Paint_DrawString_EN>


	//Paint_DrawLine(0, 0, 800, 480, 0x00, DOT_PIXEL_5X5, LINE_STYLE_SOLID);
	////
	EPD_7IN5_V2_Display(BlackImage);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff f8a3 	bl	8002b3c <EPD_7IN5_V2_Display>
	free(BlackImage);
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f007 fbac 	bl	800b154 <free>
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	0801325c 	.word	0x0801325c
 8003a08:	20000180 	.word	0x20000180
 8003a0c:	20000170 	.word	0x20000170
 8003a10:	20000178 	.word	0x20000178
 8003a14:	20000160 	.word	0x20000160

08003a18 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8003a20:	4b22      	ldr	r3, [pc, #136]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <WIZCHIP_READ+0x24>
 8003a34:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d114      	bne.n	8003a66 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003a3c:	4b1b      	ldr	r3, [pc, #108]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	0c12      	lsrs	r2, r2, #16
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	4610      	mov	r0, r2
 8003a48:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003a4a:	4b18      	ldr	r3, [pc, #96]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	0a12      	lsrs	r2, r2, #8
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	4610      	mov	r0, r2
 8003a56:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003a58:	4b14      	ldr	r3, [pc, #80]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	4610      	mov	r0, r2
 8003a62:	4798      	blx	r3
 8003a64:	e011      	b.n	8003a8a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	0c1b      	lsrs	r3, r3, #16
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	f107 020c 	add.w	r2, r7, #12
 8003a84:	2103      	movs	r1, #3
 8003a86:	4610      	mov	r0, r2
 8003a88:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4798      	blx	r3
 8003a90:	4603      	mov	r3, r0
 8003a92:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8003a94:	4b05      	ldr	r3, [pc, #20]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003a9a:	4b04      	ldr	r3, [pc, #16]	; (8003aac <WIZCHIP_READ+0x94>)
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	4798      	blx	r3
   return ret;
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2000012c 	.word	0x2000012c

08003ab0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003abc:	4b22      	ldr	r3, [pc, #136]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003ac2:	4b21      	ldr	r3, [pc, #132]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f043 0304 	orr.w	r3, r3, #4
 8003ace:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003ad0:	4b1d      	ldr	r3, [pc, #116]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d119      	bne.n	8003b0c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	0c12      	lsrs	r2, r2, #16
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003ae6:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	0a12      	lsrs	r2, r2, #8
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	4610      	mov	r0, r2
 8003af2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003af4:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	4610      	mov	r0, r2
 8003afe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8003b00:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	4610      	mov	r0, r2
 8003b08:	4798      	blx	r3
 8003b0a:	e013      	b.n	8003b34 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8003b26:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	f107 020c 	add.w	r2, r7, #12
 8003b2e:	2104      	movs	r1, #4
 8003b30:	4610      	mov	r0, r2
 8003b32:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003b3a:	4b03      	ldr	r3, [pc, #12]	; (8003b48 <WIZCHIP_WRITE+0x98>)
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	4798      	blx	r3
}
 8003b40:	bf00      	nop
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	2000012c 	.word	0x2000012c

08003b4c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003b60:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003b66:	4b28      	ldr	r3, [pc, #160]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <WIZCHIP_READ_BUF+0x2a>
 8003b6e:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d126      	bne.n	8003bc4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003b76:	4b24      	ldr	r3, [pc, #144]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	0c12      	lsrs	r2, r2, #16
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	4610      	mov	r0, r2
 8003b82:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	0a12      	lsrs	r2, r2, #8
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	82fb      	strh	r3, [r7, #22]
 8003ba2:	e00a      	b.n	8003bba <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8003ba4:	4b18      	ldr	r3, [pc, #96]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	8afa      	ldrh	r2, [r7, #22]
 8003baa:	68b9      	ldr	r1, [r7, #8]
 8003bac:	188c      	adds	r4, r1, r2
 8003bae:	4798      	blx	r3
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	82fb      	strh	r3, [r7, #22]
 8003bba:	8afa      	ldrh	r2, [r7, #22]
 8003bbc:	88fb      	ldrh	r3, [r7, #6]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d3f0      	bcc.n	8003ba4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003bc2:	e017      	b.n	8003bf4 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	0c1b      	lsrs	r3, r3, #16
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	0a1b      	lsrs	r3, r3, #8
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	f107 0210 	add.w	r2, r7, #16
 8003be2:	2103      	movs	r1, #3
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8003be8:	4b07      	ldr	r3, [pc, #28]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	4611      	mov	r1, r2
 8003bf0:	68b8      	ldr	r0, [r7, #8]
 8003bf2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003bf4:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003bfa:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <WIZCHIP_READ_BUF+0xbc>)
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	4798      	blx	r3
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd90      	pop	{r4, r7, pc}
 8003c08:	2000012c 	.word	0x2000012c

08003c0c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8003c1a:	4b2b      	ldr	r3, [pc, #172]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003c20:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8003c2e:	4b26      	ldr	r3, [pc, #152]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d126      	bne.n	8003c84 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	0c12      	lsrs	r2, r2, #16
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	4610      	mov	r0, r2
 8003c42:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003c44:	4b20      	ldr	r3, [pc, #128]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	0a12      	lsrs	r2, r2, #8
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003c52:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003c5e:	2300      	movs	r3, #0
 8003c60:	82fb      	strh	r3, [r7, #22]
 8003c62:	e00a      	b.n	8003c7a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003c64:	4b18      	ldr	r3, [pc, #96]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c66:	6a1b      	ldr	r3, [r3, #32]
 8003c68:	8afa      	ldrh	r2, [r7, #22]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	7812      	ldrb	r2, [r2, #0]
 8003c70:	4610      	mov	r0, r2
 8003c72:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003c74:	8afb      	ldrh	r3, [r7, #22]
 8003c76:	3301      	adds	r3, #1
 8003c78:	82fb      	strh	r3, [r7, #22]
 8003c7a:	8afa      	ldrh	r2, [r7, #22]
 8003c7c:	88fb      	ldrh	r3, [r7, #6]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d3f0      	bcc.n	8003c64 <WIZCHIP_WRITE_BUF+0x58>
 8003c82:	e017      	b.n	8003cb4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8003c9a:	4b0b      	ldr	r3, [pc, #44]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	f107 0210 	add.w	r2, r7, #16
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8003ca8:	4b07      	ldr	r3, [pc, #28]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	68b8      	ldr	r0, [r7, #8]
 8003cb2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003cb4:	4b04      	ldr	r3, [pc, #16]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8003cba:	4b03      	ldr	r3, [pc, #12]	; (8003cc8 <WIZCHIP_WRITE_BUF+0xbc>)
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	4798      	blx	r3
}
 8003cc0:	bf00      	nop
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	2000012c 	.word	0x2000012c

08003ccc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	81fb      	strh	r3, [r7, #14]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7ff fe94 	bl	8003a18 <WIZCHIP_READ>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003cf4:	89bb      	ldrh	r3, [r7, #12]
 8003cf6:	021b      	lsls	r3, r3, #8
 8003cf8:	b29c      	uxth	r4, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3301      	adds	r3, #1
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fe86 	bl	8003a18 <WIZCHIP_READ>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	4423      	add	r3, r4
 8003d12:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003d14:	89bb      	ldrh	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01a      	beq.n	8003d50 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	3301      	adds	r3, #1
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7ff fe76 	bl	8003a18 <WIZCHIP_READ>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003d30:	89fb      	ldrh	r3, [r7, #14]
 8003d32:	021b      	lsls	r3, r3, #8
 8003d34:	b29c      	uxth	r4, r3
 8003d36:	79fb      	ldrb	r3, [r7, #7]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fe68 	bl	8003a18 <WIZCHIP_READ>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4423      	add	r3, r4
 8003d4e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003d50:	89fa      	ldrh	r2, [r7, #14]
 8003d52:	89bb      	ldrh	r3, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d1c2      	bne.n	8003cde <getSn_TX_FSR+0x12>
   return val;
 8003d58:	89fb      	ldrh	r3, [r7, #14]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}

08003d62 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8003d62:	b590      	push	{r4, r7, lr}
 8003d64:	b085      	sub	sp, #20
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	81fb      	strh	r3, [r7, #14]
 8003d70:	2300      	movs	r3, #0
 8003d72:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003d74:	79fb      	ldrb	r3, [r7, #7]
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	3301      	adds	r3, #1
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fe49 	bl	8003a18 <WIZCHIP_READ>
 8003d86:	4603      	mov	r3, r0
 8003d88:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003d8a:	89bb      	ldrh	r3, [r7, #12]
 8003d8c:	021b      	lsls	r3, r3, #8
 8003d8e:	b29c      	uxth	r4, r3
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	3301      	adds	r3, #1
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fe3b 	bl	8003a18 <WIZCHIP_READ>
 8003da2:	4603      	mov	r3, r0
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	4423      	add	r3, r4
 8003da8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8003daa:	89bb      	ldrh	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01a      	beq.n	8003de6 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3301      	adds	r3, #1
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fe2b 	bl	8003a18 <WIZCHIP_READ>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003dc6:	89fb      	ldrh	r3, [r7, #14]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	b29c      	uxth	r4, r3
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe1d 	bl	8003a18 <WIZCHIP_READ>
 8003dde:	4603      	mov	r3, r0
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	4423      	add	r3, r4
 8003de4:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8003de6:	89fa      	ldrh	r2, [r7, #14]
 8003de8:	89bb      	ldrh	r3, [r7, #12]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d1c2      	bne.n	8003d74 <getSn_RX_RSR+0x12>
   return val;
 8003dee:	89fb      	ldrh	r3, [r7, #14]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd90      	pop	{r4, r7, pc}

08003df8 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	4603      	mov	r3, r0
 8003e00:	6039      	str	r1, [r7, #0]
 8003e02:	71fb      	strb	r3, [r7, #7]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8003e10:	88bb      	ldrh	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d048      	beq.n	8003ea8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fdf8 	bl	8003a18 <WIZCHIP_READ>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	021b      	lsls	r3, r3, #8
 8003e2e:	b29c      	uxth	r4, r3
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	3301      	adds	r3, #1
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fdeb 	bl	8003a18 <WIZCHIP_READ>
 8003e42:	4603      	mov	r3, r0
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	4423      	add	r3, r4
 8003e48:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003e4a:	89fb      	ldrh	r3, [r7, #14]
 8003e4c:	021b      	lsls	r3, r3, #8
 8003e4e:	79fa      	ldrb	r2, [r7, #7]
 8003e50:	0092      	lsls	r2, r2, #2
 8003e52:	3202      	adds	r2, #2
 8003e54:	00d2      	lsls	r2, r2, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8003e5a:	88bb      	ldrh	r3, [r7, #4]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6839      	ldr	r1, [r7, #0]
 8003e60:	68b8      	ldr	r0, [r7, #8]
 8003e62:	f7ff fed3 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003e66:	89fa      	ldrh	r2, [r7, #14]
 8003e68:	88bb      	ldrh	r3, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	3301      	adds	r3, #1
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	0a1b      	lsrs	r3, r3, #8
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f7ff fe12 	bl	8003ab0 <WIZCHIP_WRITE>
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	3301      	adds	r3, #1
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8003e98:	461a      	mov	r2, r3
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4610      	mov	r0, r2
 8003ea2:	f7ff fe05 	bl	8003ab0 <WIZCHIP_WRITE>
 8003ea6:	e000      	b.n	8003eaa <wiz_send_data+0xb2>
   if(len == 0)  return;
 8003ea8:	bf00      	nop
}
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}

08003eb0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	71fb      	strb	r3, [r7, #7]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8003ec8:	88bb      	ldrh	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d048      	beq.n	8003f60 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff fd9c 	bl	8003a18 <WIZCHIP_READ>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	b29c      	uxth	r4, r3
 8003ee8:	79fb      	ldrb	r3, [r7, #7]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	3301      	adds	r3, #1
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fd8f 	bl	8003a18 <WIZCHIP_READ>
 8003efa:	4603      	mov	r3, r0
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	4423      	add	r3, r4
 8003f00:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8003f02:	89fb      	ldrh	r3, [r7, #14]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	79fa      	ldrb	r2, [r7, #7]
 8003f08:	0092      	lsls	r2, r2, #2
 8003f0a:	3203      	adds	r2, #3
 8003f0c:	00d2      	lsls	r2, r2, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8003f12:	88bb      	ldrh	r3, [r7, #4]
 8003f14:	461a      	mov	r2, r3
 8003f16:	6839      	ldr	r1, [r7, #0]
 8003f18:	68b8      	ldr	r0, [r7, #8]
 8003f1a:	f7ff fe17 	bl	8003b4c <WIZCHIP_READ_BUF>
   ptr += len;
 8003f1e:	89fa      	ldrh	r2, [r7, #14]
 8003f20:	88bb      	ldrh	r3, [r7, #4]
 8003f22:	4413      	add	r3, r2
 8003f24:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003f32:	461a      	mov	r2, r3
 8003f34:	89fb      	ldrh	r3, [r7, #14]
 8003f36:	0a1b      	lsrs	r3, r3, #8
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7ff fdb6 	bl	8003ab0 <WIZCHIP_WRITE>
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	3301      	adds	r3, #1
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003f50:	461a      	mov	r2, r3
 8003f52:	89fb      	ldrh	r3, [r7, #14]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7ff fda9 	bl	8003ab0 <WIZCHIP_WRITE>
 8003f5e:	e000      	b.n	8003f62 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8003f60:	bf00      	nop
}
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd90      	pop	{r4, r7, pc}

08003f68 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	460a      	mov	r2, r1
 8003f72:	71fb      	strb	r3, [r7, #7]
 8003f74:	4613      	mov	r3, r2
 8003f76:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	3301      	adds	r3, #1
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fd45 	bl	8003a18 <WIZCHIP_READ>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	b29c      	uxth	r4, r3
 8003f96:	79fb      	ldrb	r3, [r7, #7]
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fd38 	bl	8003a18 <WIZCHIP_READ>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4423      	add	r3, r4
 8003fae:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8003fb0:	89fa      	ldrh	r2, [r7, #14]
 8003fb2:	88bb      	ldrh	r3, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f7ff fd6d 	bl	8003ab0 <WIZCHIP_WRITE>
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	3301      	adds	r3, #1
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	89fb      	ldrh	r3, [r7, #14]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7ff fd60 	bl	8003ab0 <WIZCHIP_WRITE>
}
 8003ff0:	bf00      	nop
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd90      	pop	{r4, r7, pc}

08003ff8 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4909      	ldr	r1, [pc, #36]	; (8004024 <default_ip_assign+0x2c>)
 8004000:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8004004:	f7ff fe02 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8004008:	2204      	movs	r2, #4
 800400a:	4907      	ldr	r1, [pc, #28]	; (8004028 <default_ip_assign+0x30>)
 800400c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8004010:	f7ff fdfc 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8004014:	2204      	movs	r2, #4
 8004016:	4905      	ldr	r1, [pc, #20]	; (800402c <default_ip_assign+0x34>)
 8004018:	f44f 7080 	mov.w	r0, #256	; 0x100
 800401c:	f7ff fdf6 	bl	8003c0c <WIZCHIP_WRITE_BUF>
}
 8004020:	bf00      	nop
 8004022:	bd80      	pop	{r7, pc}
 8004024:	20000650 	.word	0x20000650
 8004028:	20000658 	.word	0x20000658
 800402c:	20000654 	.word	0x20000654

08004030 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8004034:	2180      	movs	r1, #128	; 0x80
 8004036:	2000      	movs	r0, #0
 8004038:	f7ff fd3a 	bl	8003ab0 <WIZCHIP_WRITE>
   getMR(); // for delay
 800403c:	2000      	movs	r0, #0
 800403e:	f7ff fceb 	bl	8003a18 <WIZCHIP_READ>
   default_ip_assign();
 8004042:	f7ff ffd9 	bl	8003ff8 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8004046:	2206      	movs	r2, #6
 8004048:	4903      	ldr	r1, [pc, #12]	; (8004058 <default_ip_update+0x28>)
 800404a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800404e:	f7ff fddd 	bl	8003c0c <WIZCHIP_WRITE_BUF>
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000670 	.word	0x20000670

0800405c <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	2000      	movs	r0, #0
 8004064:	f7ff fd24 	bl	8003ab0 <WIZCHIP_WRITE>
	getMR(); // for delay
 8004068:	2000      	movs	r0, #0
 800406a:	f7ff fcd5 	bl	8003a18 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 800406e:	2206      	movs	r2, #6
 8004070:	4903      	ldr	r1, [pc, #12]	; (8004080 <default_ip_conflict+0x24>)
 8004072:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004076:	f7ff fdc9 	bl	8003c0c <WIZCHIP_WRITE_BUF>
}
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000670 	.word	0x20000670

08004084 <makeDHCPMSG>:
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
}

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800408a:	463b      	mov	r3, r7
 800408c:	2206      	movs	r2, #6
 800408e:	4619      	mov	r1, r3
 8004090:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8004094:	f7ff fd5a 	bl	8003b4c <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8004098:	4b72      	ldr	r3, [pc, #456]	; (8004264 <makeDHCPMSG+0x1e0>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 80040a0:	4b70      	ldr	r3, [pc, #448]	; (8004264 <makeDHCPMSG+0x1e0>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 80040a8:	4b6e      	ldr	r3, [pc, #440]	; (8004264 <makeDHCPMSG+0x1e0>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2206      	movs	r2, #6
 80040ae:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 80040b0:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <makeDHCPMSG+0x1e0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2200      	movs	r2, #0
 80040b6:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 80040b8:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <makeDHCPMSG+0x1e0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3304      	adds	r3, #4
 80040be:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 80040c0:	4b69      	ldr	r3, [pc, #420]	; (8004268 <makeDHCPMSG+0x1e4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	0e1b      	lsrs	r3, r3, #24
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 80040cc:	4b66      	ldr	r3, [pc, #408]	; (8004268 <makeDHCPMSG+0x1e4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	0c1a      	lsrs	r2, r3, #16
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	3301      	adds	r3, #1
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80040da:	4b63      	ldr	r3, [pc, #396]	; (8004268 <makeDHCPMSG+0x1e4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	0a1a      	lsrs	r2, r3, #8
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	3302      	adds	r3, #2
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80040e8:	4b5f      	ldr	r3, [pc, #380]	; (8004268 <makeDHCPMSG+0x1e4>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3303      	adds	r3, #3
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80040f4:	4b5b      	ldr	r3, [pc, #364]	; (8004264 <makeDHCPMSG+0x1e0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2200      	movs	r2, #0
 80040fa:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80040fc:	4b59      	ldr	r3, [pc, #356]	; (8004264 <makeDHCPMSG+0x1e0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330a      	adds	r3, #10
 8004102:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2280      	movs	r2, #128	; 0x80
 8004108:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	3301      	adds	r3, #1
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 8004112:	4b54      	ldr	r3, [pc, #336]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 800411a:	4b52      	ldr	r3, [pc, #328]	; (8004264 <makeDHCPMSG+0x1e0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2200      	movs	r2, #0
 8004120:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 8004122:	4b50      	ldr	r3, [pc, #320]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 800412a:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <makeDHCPMSG+0x1e0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8004132:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800413a:	4b4a      	ldr	r3, [pc, #296]	; (8004264 <makeDHCPMSG+0x1e0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8004142:	4b48      	ldr	r3, [pc, #288]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800414a:	4b46      	ldr	r3, [pc, #280]	; (8004264 <makeDHCPMSG+0x1e0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8004152:	4b44      	ldr	r3, [pc, #272]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2200      	movs	r2, #0
 8004158:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800415a:	4b42      	ldr	r3, [pc, #264]	; (8004264 <makeDHCPMSG+0x1e0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2200      	movs	r2, #0
 8004160:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8004162:	4b40      	ldr	r3, [pc, #256]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800416a:	4b3e      	ldr	r3, [pc, #248]	; (8004264 <makeDHCPMSG+0x1e0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8004172:	4b3c      	ldr	r3, [pc, #240]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2200      	movs	r2, #0
 8004178:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800417a:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <makeDHCPMSG+0x1e0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2200      	movs	r2, #0
 8004180:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8004182:	4b38      	ldr	r3, [pc, #224]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800418a:	4b36      	ldr	r3, [pc, #216]	; (8004264 <makeDHCPMSG+0x1e0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2200      	movs	r2, #0
 8004190:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8004192:	4b34      	ldr	r3, [pc, #208]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a35      	ldr	r2, [pc, #212]	; (800426c <makeDHCPMSG+0x1e8>)
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800419c:	4b31      	ldr	r3, [pc, #196]	; (8004264 <makeDHCPMSG+0x1e0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a32      	ldr	r2, [pc, #200]	; (800426c <makeDHCPMSG+0x1e8>)
 80041a2:	7852      	ldrb	r2, [r2, #1]
 80041a4:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 80041a6:	4b2f      	ldr	r3, [pc, #188]	; (8004264 <makeDHCPMSG+0x1e0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a30      	ldr	r2, [pc, #192]	; (800426c <makeDHCPMSG+0x1e8>)
 80041ac:	7892      	ldrb	r2, [r2, #2]
 80041ae:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 80041b0:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <makeDHCPMSG+0x1e0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a2d      	ldr	r2, [pc, #180]	; (800426c <makeDHCPMSG+0x1e8>)
 80041b6:	78d2      	ldrb	r2, [r2, #3]
 80041b8:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <makeDHCPMSG+0x1e0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a2b      	ldr	r2, [pc, #172]	; (800426c <makeDHCPMSG+0x1e8>)
 80041c0:	7912      	ldrb	r2, [r2, #4]
 80041c2:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 80041c6:	4b27      	ldr	r3, [pc, #156]	; (8004264 <makeDHCPMSG+0x1e0>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a28      	ldr	r2, [pc, #160]	; (800426c <makeDHCPMSG+0x1e8>)
 80041cc:	7952      	ldrb	r2, [r2, #5]
 80041ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80041d2:	2306      	movs	r3, #6
 80041d4:	73fb      	strb	r3, [r7, #15]
 80041d6:	e008      	b.n	80041ea <makeDHCPMSG+0x166>
 80041d8:	4b22      	ldr	r3, [pc, #136]	; (8004264 <makeDHCPMSG+0x1e0>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	4413      	add	r3, r2
 80041e0:	2200      	movs	r2, #0
 80041e2:	771a      	strb	r2, [r3, #28]
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	3301      	adds	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
 80041ea:	7bfb      	ldrb	r3, [r7, #15]
 80041ec:	2b0f      	cmp	r3, #15
 80041ee:	d9f3      	bls.n	80041d8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]
 80041f4:	e009      	b.n	800420a <makeDHCPMSG+0x186>
 80041f6:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <makeDHCPMSG+0x1e0>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	7bfb      	ldrb	r3, [r7, #15]
 80041fc:	4413      	add	r3, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	3301      	adds	r3, #1
 8004208:	73fb      	strb	r3, [r7, #15]
 800420a:	7bfb      	ldrb	r3, [r7, #15]
 800420c:	2b3f      	cmp	r3, #63	; 0x3f
 800420e:	d9f2      	bls.n	80041f6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e009      	b.n	800422a <makeDHCPMSG+0x1a6>
 8004216:	4b13      	ldr	r3, [pc, #76]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	4413      	add	r3, r2
 800421e:	2200      	movs	r2, #0
 8004220:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	3301      	adds	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422e:	2b00      	cmp	r3, #0
 8004230:	daf1      	bge.n	8004216 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2263      	movs	r2, #99	; 0x63
 8004238:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <makeDHCPMSG+0x1e0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2282      	movs	r2, #130	; 0x82
 8004242:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8004246:	4b07      	ldr	r3, [pc, #28]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2253      	movs	r2, #83	; 0x53
 800424c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <makeDHCPMSG+0x1e0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2263      	movs	r2, #99	; 0x63
 8004256:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 800425a:	bf00      	nop
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	2000066c 	.word	0x2000066c
 8004268:	20000668 	.word	0x20000668
 800426c:	20000670 	.word	0x20000670

08004270 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8004276:	2300      	movs	r3, #0
 8004278:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800427a:	f7ff ff03 	bl	8004084 <makeDHCPMSG>

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800427e:	2304      	movs	r3, #4
 8004280:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8004282:	4ba9      	ldr	r3, [pc, #676]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	88bb      	ldrh	r3, [r7, #4]
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	80b9      	strh	r1, [r7, #4]
 800428c:	4413      	add	r3, r2
 800428e:	2235      	movs	r2, #53	; 0x35
 8004290:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8004294:	4ba4      	ldr	r3, [pc, #656]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	88bb      	ldrh	r3, [r7, #4]
 800429a:	1c59      	adds	r1, r3, #1
 800429c:	80b9      	strh	r1, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80042a6:	4ba0      	ldr	r3, [pc, #640]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	88bb      	ldrh	r3, [r7, #4]
 80042ac:	1c59      	adds	r1, r3, #1
 80042ae:	80b9      	strh	r1, [r7, #4]
 80042b0:	4413      	add	r3, r2
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80042b8:	4b9b      	ldr	r3, [pc, #620]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	88bb      	ldrh	r3, [r7, #4]
 80042be:	1c59      	adds	r1, r3, #1
 80042c0:	80b9      	strh	r1, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	223d      	movs	r2, #61	; 0x3d
 80042c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80042ca:	4b97      	ldr	r3, [pc, #604]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	88bb      	ldrh	r3, [r7, #4]
 80042d0:	1c59      	adds	r1, r3, #1
 80042d2:	80b9      	strh	r1, [r7, #4]
 80042d4:	4413      	add	r3, r2
 80042d6:	2207      	movs	r2, #7
 80042d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80042dc:	4b92      	ldr	r3, [pc, #584]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	88bb      	ldrh	r3, [r7, #4]
 80042e2:	1c59      	adds	r1, r3, #1
 80042e4:	80b9      	strh	r1, [r7, #4]
 80042e6:	4413      	add	r3, r2
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80042ee:	4b8e      	ldr	r3, [pc, #568]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	88bb      	ldrh	r3, [r7, #4]
 80042f4:	1c59      	adds	r1, r3, #1
 80042f6:	80b9      	strh	r1, [r7, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	4b8c      	ldr	r3, [pc, #560]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 80042fc:	7819      	ldrb	r1, [r3, #0]
 80042fe:	1813      	adds	r3, r2, r0
 8004300:	460a      	mov	r2, r1
 8004302:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8004306:	4b88      	ldr	r3, [pc, #544]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	88bb      	ldrh	r3, [r7, #4]
 800430c:	1c59      	adds	r1, r3, #1
 800430e:	80b9      	strh	r1, [r7, #4]
 8004310:	4618      	mov	r0, r3
 8004312:	4b86      	ldr	r3, [pc, #536]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 8004314:	7859      	ldrb	r1, [r3, #1]
 8004316:	1813      	adds	r3, r2, r0
 8004318:	460a      	mov	r2, r1
 800431a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800431e:	4b82      	ldr	r3, [pc, #520]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	88bb      	ldrh	r3, [r7, #4]
 8004324:	1c59      	adds	r1, r3, #1
 8004326:	80b9      	strh	r1, [r7, #4]
 8004328:	4618      	mov	r0, r3
 800432a:	4b80      	ldr	r3, [pc, #512]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 800432c:	7899      	ldrb	r1, [r3, #2]
 800432e:	1813      	adds	r3, r2, r0
 8004330:	460a      	mov	r2, r1
 8004332:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8004336:	4b7c      	ldr	r3, [pc, #496]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	88bb      	ldrh	r3, [r7, #4]
 800433c:	1c59      	adds	r1, r3, #1
 800433e:	80b9      	strh	r1, [r7, #4]
 8004340:	4618      	mov	r0, r3
 8004342:	4b7a      	ldr	r3, [pc, #488]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 8004344:	78d9      	ldrb	r1, [r3, #3]
 8004346:	1813      	adds	r3, r2, r0
 8004348:	460a      	mov	r2, r1
 800434a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800434e:	4b76      	ldr	r3, [pc, #472]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	88bb      	ldrh	r3, [r7, #4]
 8004354:	1c59      	adds	r1, r3, #1
 8004356:	80b9      	strh	r1, [r7, #4]
 8004358:	4618      	mov	r0, r3
 800435a:	4b74      	ldr	r3, [pc, #464]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 800435c:	7919      	ldrb	r1, [r3, #4]
 800435e:	1813      	adds	r3, r2, r0
 8004360:	460a      	mov	r2, r1
 8004362:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8004366:	4b70      	ldr	r3, [pc, #448]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	88bb      	ldrh	r3, [r7, #4]
 800436c:	1c59      	adds	r1, r3, #1
 800436e:	80b9      	strh	r1, [r7, #4]
 8004370:	4618      	mov	r0, r3
 8004372:	4b6e      	ldr	r3, [pc, #440]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 8004374:	7959      	ldrb	r1, [r3, #5]
 8004376:	1813      	adds	r3, r2, r0
 8004378:	460a      	mov	r2, r1
 800437a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800437e:	4b6a      	ldr	r3, [pc, #424]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	88bb      	ldrh	r3, [r7, #4]
 8004384:	1c59      	adds	r1, r3, #1
 8004386:	80b9      	strh	r1, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	220c      	movs	r2, #12
 800438c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8004390:	4b65      	ldr	r3, [pc, #404]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	88bb      	ldrh	r3, [r7, #4]
 8004396:	1c59      	adds	r1, r3, #1
 8004398:	80b9      	strh	r1, [r7, #4]
 800439a:	4413      	add	r3, r2
 800439c:	2200      	movs	r2, #0
 800439e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80043a2:	2300      	movs	r3, #0
 80043a4:	80fb      	strh	r3, [r7, #6]
 80043a6:	e00f      	b.n	80043c8 <send_DHCP_DISCOVER+0x158>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80043a8:	88f9      	ldrh	r1, [r7, #6]
 80043aa:	4b5f      	ldr	r3, [pc, #380]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	88bb      	ldrh	r3, [r7, #4]
 80043b0:	1c58      	adds	r0, r3, #1
 80043b2:	80b8      	strh	r0, [r7, #4]
 80043b4:	4618      	mov	r0, r3
 80043b6:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <send_DHCP_DISCOVER+0x2c0>)
 80043b8:	5c59      	ldrb	r1, [r3, r1]
 80043ba:	1813      	adds	r3, r2, r0
 80043bc:	460a      	mov	r2, r1
 80043be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	3301      	adds	r3, #1
 80043c6:	80fb      	strh	r3, [r7, #6]
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	4a59      	ldr	r2, [pc, #356]	; (8004530 <send_DHCP_DISCOVER+0x2c0>)
 80043cc:	5cd3      	ldrb	r3, [r2, r3]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1ea      	bne.n	80043a8 <send_DHCP_DISCOVER+0x138>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80043d2:	4b55      	ldr	r3, [pc, #340]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	88bb      	ldrh	r3, [r7, #4]
 80043d8:	1c59      	adds	r1, r3, #1
 80043da:	80b9      	strh	r1, [r7, #4]
 80043dc:	4618      	mov	r0, r3
 80043de:	4b53      	ldr	r3, [pc, #332]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 80043e0:	78d9      	ldrb	r1, [r3, #3]
 80043e2:	1813      	adds	r3, r2, r0
 80043e4:	460a      	mov	r2, r1
 80043e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80043ea:	4b4f      	ldr	r3, [pc, #316]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	88bb      	ldrh	r3, [r7, #4]
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	80b9      	strh	r1, [r7, #4]
 80043f4:	4618      	mov	r0, r3
 80043f6:	4b4d      	ldr	r3, [pc, #308]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 80043f8:	7919      	ldrb	r1, [r3, #4]
 80043fa:	1813      	adds	r3, r2, r0
 80043fc:	460a      	mov	r2, r1
 80043fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8004402:	4b49      	ldr	r3, [pc, #292]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	88bb      	ldrh	r3, [r7, #4]
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	80b9      	strh	r1, [r7, #4]
 800440c:	4618      	mov	r0, r3
 800440e:	4b47      	ldr	r3, [pc, #284]	; (800452c <send_DHCP_DISCOVER+0x2bc>)
 8004410:	7959      	ldrb	r1, [r3, #5]
 8004412:	1813      	adds	r3, r2, r0
 8004414:	460a      	mov	r2, r1
 8004416:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+3+1)] = i+3; // length of hostname
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	b2d9      	uxtb	r1, r3
 800441e:	4b42      	ldr	r3, [pc, #264]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	88b8      	ldrh	r0, [r7, #4]
 8004424:	88fb      	ldrh	r3, [r7, #6]
 8004426:	3304      	adds	r3, #4
 8004428:	1ac3      	subs	r3, r0, r3
 800442a:	3103      	adds	r1, #3
 800442c:	b2c9      	uxtb	r1, r1
 800442e:	4413      	add	r3, r2
 8004430:	460a      	mov	r2, r1
 8004432:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8004436:	4b3c      	ldr	r3, [pc, #240]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	88bb      	ldrh	r3, [r7, #4]
 800443c:	1c59      	adds	r1, r3, #1
 800443e:	80b9      	strh	r1, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	2237      	movs	r2, #55	; 0x37
 8004444:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 8004448:	4b37      	ldr	r3, [pc, #220]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	88bb      	ldrh	r3, [r7, #4]
 800444e:	1c59      	adds	r1, r3, #1
 8004450:	80b9      	strh	r1, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	2206      	movs	r2, #6
 8004456:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800445a:	4b33      	ldr	r3, [pc, #204]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	88bb      	ldrh	r3, [r7, #4]
 8004460:	1c59      	adds	r1, r3, #1
 8004462:	80b9      	strh	r1, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	2201      	movs	r2, #1
 8004468:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800446c:	4b2e      	ldr	r3, [pc, #184]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	88bb      	ldrh	r3, [r7, #4]
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	80b9      	strh	r1, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	2203      	movs	r2, #3
 800447a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800447e:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	88bb      	ldrh	r3, [r7, #4]
 8004484:	1c59      	adds	r1, r3, #1
 8004486:	80b9      	strh	r1, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	2206      	movs	r2, #6
 800448c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8004490:	4b25      	ldr	r3, [pc, #148]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	88bb      	ldrh	r3, [r7, #4]
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	80b9      	strh	r1, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	220f      	movs	r2, #15
 800449e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	88bb      	ldrh	r3, [r7, #4]
 80044a8:	1c59      	adds	r1, r3, #1
 80044aa:	80b9      	strh	r1, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	223a      	movs	r2, #58	; 0x3a
 80044b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80044b4:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	88bb      	ldrh	r3, [r7, #4]
 80044ba:	1c59      	adds	r1, r3, #1
 80044bc:	80b9      	strh	r1, [r7, #4]
 80044be:	4413      	add	r3, r2
 80044c0:	223b      	movs	r2, #59	; 0x3b
 80044c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80044c6:	4b18      	ldr	r3, [pc, #96]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	88bb      	ldrh	r3, [r7, #4]
 80044cc:	1c59      	adds	r1, r3, #1
 80044ce:	80b9      	strh	r1, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	22ff      	movs	r2, #255	; 0xff
 80044d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80044d8:	88bb      	ldrh	r3, [r7, #4]
 80044da:	80fb      	strh	r3, [r7, #6]
 80044dc:	e009      	b.n	80044f2 <send_DHCP_DISCOVER+0x282>
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	4413      	add	r3, r2
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	3301      	adds	r3, #1
 80044f0:	80fb      	strh	r3, [r7, #6]
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 80044f8:	d3f1      	bcc.n	80044de <send_DHCP_DISCOVER+0x26e>

	// send broadcasting packet
	ip[0] = 255;
 80044fa:	23ff      	movs	r3, #255	; 0xff
 80044fc:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 80044fe:	23ff      	movs	r3, #255	; 0xff
 8004500:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8004502:	23ff      	movs	r3, #255	; 0xff
 8004504:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 8004506:	23ff      	movs	r3, #255	; 0xff
 8004508:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800450a:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <send_DHCP_DISCOVER+0x2c4>)
 800450c:	7818      	ldrb	r0, [r3, #0]
 800450e:	4b06      	ldr	r3, [pc, #24]	; (8004528 <send_DHCP_DISCOVER+0x2b8>)
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	463b      	mov	r3, r7
 8004514:	2243      	movs	r2, #67	; 0x43
 8004516:	9200      	str	r2, [sp, #0]
 8004518:	f44f 7209 	mov.w	r2, #548	; 0x224
 800451c:	f001 fc1c 	bl	8005d58 <sendto>
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	2000066c 	.word	0x2000066c
 800452c:	20000670 	.word	0x20000670
 8004530:	20000114 	.word	0x20000114
 8004534:	20000644 	.word	0x20000644

08004538 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8004538:	b5b0      	push	{r4, r5, r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 8004542:	f7ff fd9f 	bl	8004084 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 8004546:	4b1b      	ldr	r3, [pc, #108]	; (80045b4 <send_DHCP_REQUEST+0x7c>)
 8004548:	f993 3000 	ldrsb.w	r3, [r3]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d004      	beq.n	800455a <send_DHCP_REQUEST+0x22>
 8004550:	4b18      	ldr	r3, [pc, #96]	; (80045b4 <send_DHCP_REQUEST+0x7c>)
 8004552:	f993 3000 	ldrsb.w	r3, [r3]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d134      	bne.n	80045c4 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <send_DHCP_REQUEST+0x80>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	330a      	adds	r3, #10
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8004564:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <send_DHCP_REQUEST+0x80>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330a      	adds	r3, #10
 800456a:	3301      	adds	r3, #1
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <send_DHCP_REQUEST+0x80>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a11      	ldr	r2, [pc, #68]	; (80045bc <send_DHCP_REQUEST+0x84>)
 8004576:	7812      	ldrb	r2, [r2, #0]
 8004578:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800457a:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <send_DHCP_REQUEST+0x80>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <send_DHCP_REQUEST+0x84>)
 8004580:	7852      	ldrb	r2, [r2, #1]
 8004582:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <send_DHCP_REQUEST+0x80>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a0c      	ldr	r2, [pc, #48]	; (80045bc <send_DHCP_REQUEST+0x84>)
 800458a:	7892      	ldrb	r2, [r2, #2]
 800458c:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 800458e:	4b0a      	ldr	r3, [pc, #40]	; (80045b8 <send_DHCP_REQUEST+0x80>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a0a      	ldr	r2, [pc, #40]	; (80045bc <send_DHCP_REQUEST+0x84>)
 8004594:	78d2      	ldrb	r2, [r2, #3]
 8004596:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <send_DHCP_REQUEST+0x88>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 800459e:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <send_DHCP_REQUEST+0x88>)
 80045a0:	785b      	ldrb	r3, [r3, #1]
 80045a2:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <send_DHCP_REQUEST+0x88>)
 80045a6:	789b      	ldrb	r3, [r3, #2]
 80045a8:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <send_DHCP_REQUEST+0x88>)
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	71fb      	strb	r3, [r7, #7]
 80045b0:	e010      	b.n	80045d4 <send_DHCP_REQUEST+0x9c>
 80045b2:	bf00      	nop
 80045b4:	20000660 	.word	0x20000660
 80045b8:	2000066c 	.word	0x2000066c
 80045bc:	20000650 	.word	0x20000650
 80045c0:	20000648 	.word	0x20000648
   }
   else
   {
   	ip[0] = 255;
 80045c4:	23ff      	movs	r3, #255	; 0xff
 80045c6:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 80045c8:	23ff      	movs	r3, #255	; 0xff
 80045ca:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 80045cc:	23ff      	movs	r3, #255	; 0xff
 80045ce:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 80045d0:	23ff      	movs	r3, #255	; 0xff
 80045d2:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 80045d4:	2304      	movs	r3, #4
 80045d6:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80045d8:	4b8d      	ldr	r3, [pc, #564]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	897b      	ldrh	r3, [r7, #10]
 80045de:	1c59      	adds	r1, r3, #1
 80045e0:	8179      	strh	r1, [r7, #10]
 80045e2:	4413      	add	r3, r2
 80045e4:	2235      	movs	r2, #53	; 0x35
 80045e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80045ea:	4b89      	ldr	r3, [pc, #548]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	897b      	ldrh	r3, [r7, #10]
 80045f0:	1c59      	adds	r1, r3, #1
 80045f2:	8179      	strh	r1, [r7, #10]
 80045f4:	4413      	add	r3, r2
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 80045fc:	4b84      	ldr	r3, [pc, #528]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	897b      	ldrh	r3, [r7, #10]
 8004602:	1c59      	adds	r1, r3, #1
 8004604:	8179      	strh	r1, [r7, #10]
 8004606:	4413      	add	r3, r2
 8004608:	2203      	movs	r2, #3
 800460a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800460e:	4b80      	ldr	r3, [pc, #512]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	897b      	ldrh	r3, [r7, #10]
 8004614:	1c59      	adds	r1, r3, #1
 8004616:	8179      	strh	r1, [r7, #10]
 8004618:	4413      	add	r3, r2
 800461a:	223d      	movs	r2, #61	; 0x3d
 800461c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8004620:	4b7b      	ldr	r3, [pc, #492]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	897b      	ldrh	r3, [r7, #10]
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	8179      	strh	r1, [r7, #10]
 800462a:	4413      	add	r3, r2
 800462c:	2207      	movs	r2, #7
 800462e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8004632:	4b77      	ldr	r3, [pc, #476]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	897b      	ldrh	r3, [r7, #10]
 8004638:	1c59      	adds	r1, r3, #1
 800463a:	8179      	strh	r1, [r7, #10]
 800463c:	4413      	add	r3, r2
 800463e:	2201      	movs	r2, #1
 8004640:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8004644:	4b72      	ldr	r3, [pc, #456]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	897b      	ldrh	r3, [r7, #10]
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	8179      	strh	r1, [r7, #10]
 800464e:	4618      	mov	r0, r3
 8004650:	4b70      	ldr	r3, [pc, #448]	; (8004814 <send_DHCP_REQUEST+0x2dc>)
 8004652:	7819      	ldrb	r1, [r3, #0]
 8004654:	1813      	adds	r3, r2, r0
 8004656:	460a      	mov	r2, r1
 8004658:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800465c:	4b6c      	ldr	r3, [pc, #432]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	897b      	ldrh	r3, [r7, #10]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	8179      	strh	r1, [r7, #10]
 8004666:	4618      	mov	r0, r3
 8004668:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <send_DHCP_REQUEST+0x2dc>)
 800466a:	7859      	ldrb	r1, [r3, #1]
 800466c:	1813      	adds	r3, r2, r0
 800466e:	460a      	mov	r2, r1
 8004670:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8004674:	4b66      	ldr	r3, [pc, #408]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	897b      	ldrh	r3, [r7, #10]
 800467a:	1c59      	adds	r1, r3, #1
 800467c:	8179      	strh	r1, [r7, #10]
 800467e:	4618      	mov	r0, r3
 8004680:	4b64      	ldr	r3, [pc, #400]	; (8004814 <send_DHCP_REQUEST+0x2dc>)
 8004682:	7899      	ldrb	r1, [r3, #2]
 8004684:	1813      	adds	r3, r2, r0
 8004686:	460a      	mov	r2, r1
 8004688:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800468c:	4b60      	ldr	r3, [pc, #384]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	897b      	ldrh	r3, [r7, #10]
 8004692:	1c59      	adds	r1, r3, #1
 8004694:	8179      	strh	r1, [r7, #10]
 8004696:	4618      	mov	r0, r3
 8004698:	4b5e      	ldr	r3, [pc, #376]	; (8004814 <send_DHCP_REQUEST+0x2dc>)
 800469a:	78d9      	ldrb	r1, [r3, #3]
 800469c:	1813      	adds	r3, r2, r0
 800469e:	460a      	mov	r2, r1
 80046a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 80046a4:	4b5a      	ldr	r3, [pc, #360]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	897b      	ldrh	r3, [r7, #10]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	8179      	strh	r1, [r7, #10]
 80046ae:	4618      	mov	r0, r3
 80046b0:	4b58      	ldr	r3, [pc, #352]	; (8004814 <send_DHCP_REQUEST+0x2dc>)
 80046b2:	7919      	ldrb	r1, [r3, #4]
 80046b4:	1813      	adds	r3, r2, r0
 80046b6:	460a      	mov	r2, r1
 80046b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 80046bc:	4b54      	ldr	r3, [pc, #336]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	897b      	ldrh	r3, [r7, #10]
 80046c2:	1c59      	adds	r1, r3, #1
 80046c4:	8179      	strh	r1, [r7, #10]
 80046c6:	4618      	mov	r0, r3
 80046c8:	4b52      	ldr	r3, [pc, #328]	; (8004814 <send_DHCP_REQUEST+0x2dc>)
 80046ca:	7959      	ldrb	r1, [r3, #5]
 80046cc:	1813      	adds	r3, r2, r0
 80046ce:	460a      	mov	r2, r1
 80046d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 80046d4:	79fb      	ldrb	r3, [r7, #7]
 80046d6:	2bff      	cmp	r3, #255	; 0xff
 80046d8:	f040 8084 	bne.w	80047e4 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 80046dc:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	897b      	ldrh	r3, [r7, #10]
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	8179      	strh	r1, [r7, #10]
 80046e6:	4413      	add	r3, r2
 80046e8:	2232      	movs	r2, #50	; 0x32
 80046ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80046ee:	4b48      	ldr	r3, [pc, #288]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	897b      	ldrh	r3, [r7, #10]
 80046f4:	1c59      	adds	r1, r3, #1
 80046f6:	8179      	strh	r1, [r7, #10]
 80046f8:	4413      	add	r3, r2
 80046fa:	2204      	movs	r2, #4
 80046fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8004700:	4b43      	ldr	r3, [pc, #268]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	897b      	ldrh	r3, [r7, #10]
 8004706:	1c59      	adds	r1, r3, #1
 8004708:	8179      	strh	r1, [r7, #10]
 800470a:	4618      	mov	r0, r3
 800470c:	4b42      	ldr	r3, [pc, #264]	; (8004818 <send_DHCP_REQUEST+0x2e0>)
 800470e:	7819      	ldrb	r1, [r3, #0]
 8004710:	1813      	adds	r3, r2, r0
 8004712:	460a      	mov	r2, r1
 8004714:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8004718:	4b3d      	ldr	r3, [pc, #244]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	897b      	ldrh	r3, [r7, #10]
 800471e:	1c59      	adds	r1, r3, #1
 8004720:	8179      	strh	r1, [r7, #10]
 8004722:	4618      	mov	r0, r3
 8004724:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <send_DHCP_REQUEST+0x2e0>)
 8004726:	7859      	ldrb	r1, [r3, #1]
 8004728:	1813      	adds	r3, r2, r0
 800472a:	460a      	mov	r2, r1
 800472c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8004730:	4b37      	ldr	r3, [pc, #220]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	897b      	ldrh	r3, [r7, #10]
 8004736:	1c59      	adds	r1, r3, #1
 8004738:	8179      	strh	r1, [r7, #10]
 800473a:	4618      	mov	r0, r3
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <send_DHCP_REQUEST+0x2e0>)
 800473e:	7899      	ldrb	r1, [r3, #2]
 8004740:	1813      	adds	r3, r2, r0
 8004742:	460a      	mov	r2, r1
 8004744:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8004748:	4b31      	ldr	r3, [pc, #196]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	897b      	ldrh	r3, [r7, #10]
 800474e:	1c59      	adds	r1, r3, #1
 8004750:	8179      	strh	r1, [r7, #10]
 8004752:	4618      	mov	r0, r3
 8004754:	4b30      	ldr	r3, [pc, #192]	; (8004818 <send_DHCP_REQUEST+0x2e0>)
 8004756:	78d9      	ldrb	r1, [r3, #3]
 8004758:	1813      	adds	r3, r2, r0
 800475a:	460a      	mov	r2, r1
 800475c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8004760:	4b2b      	ldr	r3, [pc, #172]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	897b      	ldrh	r3, [r7, #10]
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	8179      	strh	r1, [r7, #10]
 800476a:	4413      	add	r3, r2
 800476c:	2236      	movs	r2, #54	; 0x36
 800476e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8004772:	4b27      	ldr	r3, [pc, #156]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	897b      	ldrh	r3, [r7, #10]
 8004778:	1c59      	adds	r1, r3, #1
 800477a:	8179      	strh	r1, [r7, #10]
 800477c:	4413      	add	r3, r2
 800477e:	2204      	movs	r2, #4
 8004780:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	897b      	ldrh	r3, [r7, #10]
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	8179      	strh	r1, [r7, #10]
 800478e:	4618      	mov	r0, r3
 8004790:	4b22      	ldr	r3, [pc, #136]	; (800481c <send_DHCP_REQUEST+0x2e4>)
 8004792:	7819      	ldrb	r1, [r3, #0]
 8004794:	1813      	adds	r3, r2, r0
 8004796:	460a      	mov	r2, r1
 8004798:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800479c:	4b1c      	ldr	r3, [pc, #112]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	897b      	ldrh	r3, [r7, #10]
 80047a2:	1c59      	adds	r1, r3, #1
 80047a4:	8179      	strh	r1, [r7, #10]
 80047a6:	4618      	mov	r0, r3
 80047a8:	4b1c      	ldr	r3, [pc, #112]	; (800481c <send_DHCP_REQUEST+0x2e4>)
 80047aa:	7859      	ldrb	r1, [r3, #1]
 80047ac:	1813      	adds	r3, r2, r0
 80047ae:	460a      	mov	r2, r1
 80047b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 80047b4:	4b16      	ldr	r3, [pc, #88]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	897b      	ldrh	r3, [r7, #10]
 80047ba:	1c59      	adds	r1, r3, #1
 80047bc:	8179      	strh	r1, [r7, #10]
 80047be:	4618      	mov	r0, r3
 80047c0:	4b16      	ldr	r3, [pc, #88]	; (800481c <send_DHCP_REQUEST+0x2e4>)
 80047c2:	7899      	ldrb	r1, [r3, #2]
 80047c4:	1813      	adds	r3, r2, r0
 80047c6:	460a      	mov	r2, r1
 80047c8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	897b      	ldrh	r3, [r7, #10]
 80047d2:	1c59      	adds	r1, r3, #1
 80047d4:	8179      	strh	r1, [r7, #10]
 80047d6:	4618      	mov	r0, r3
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <send_DHCP_REQUEST+0x2e4>)
 80047da:	78d9      	ldrb	r1, [r3, #3]
 80047dc:	1813      	adds	r3, r2, r0
 80047de:	460a      	mov	r2, r1
 80047e0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	897b      	ldrh	r3, [r7, #10]
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	8179      	strh	r1, [r7, #10]
 80047ee:	4413      	add	r3, r2
 80047f0:	220c      	movs	r2, #12
 80047f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80047f6:	4b06      	ldr	r3, [pc, #24]	; (8004810 <send_DHCP_REQUEST+0x2d8>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	897b      	ldrh	r3, [r7, #10]
 80047fc:	1c59      	adds	r1, r3, #1
 80047fe:	8179      	strh	r1, [r7, #10]
 8004800:	4413      	add	r3, r2
 8004802:	2200      	movs	r2, #0
 8004804:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e019      	b.n	8004842 <send_DHCP_REQUEST+0x30a>
 800480e:	bf00      	nop
 8004810:	2000066c 	.word	0x2000066c
 8004814:	20000670 	.word	0x20000670
 8004818:	20000650 	.word	0x20000650
 800481c:	20000648 	.word	0x20000648
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8004820:	4b86      	ldr	r3, [pc, #536]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	897b      	ldrh	r3, [r7, #10]
 8004826:	1c59      	adds	r1, r3, #1
 8004828:	8179      	strh	r1, [r7, #10]
 800482a:	4618      	mov	r0, r3
 800482c:	4984      	ldr	r1, [pc, #528]	; (8004a40 <send_DHCP_REQUEST+0x508>)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	440b      	add	r3, r1
 8004832:	7819      	ldrb	r1, [r3, #0]
 8004834:	1813      	adds	r3, r2, r0
 8004836:	460a      	mov	r2, r1
 8004838:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	4a7f      	ldr	r2, [pc, #508]	; (8004a40 <send_DHCP_REQUEST+0x508>)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1e8      	bne.n	8004820 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800484e:	4b7d      	ldr	r3, [pc, #500]	; (8004a44 <send_DHCP_REQUEST+0x50c>)
 8004850:	78db      	ldrb	r3, [r3, #3]
 8004852:	091b      	lsrs	r3, r3, #4
 8004854:	b2da      	uxtb	r2, r3
 8004856:	4b79      	ldr	r3, [pc, #484]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004858:	681c      	ldr	r4, [r3, #0]
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	1c59      	adds	r1, r3, #1
 800485e:	8179      	strh	r1, [r7, #10]
 8004860:	461d      	mov	r5, r3
 8004862:	4610      	mov	r0, r2
 8004864:	f000 fe50 	bl	8005508 <NibbleToHex>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	1963      	adds	r3, r4, r5
 800486e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8004872:	4b74      	ldr	r3, [pc, #464]	; (8004a44 <send_DHCP_REQUEST+0x50c>)
 8004874:	78da      	ldrb	r2, [r3, #3]
 8004876:	4b71      	ldr	r3, [pc, #452]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004878:	681c      	ldr	r4, [r3, #0]
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	1c59      	adds	r1, r3, #1
 800487e:	8179      	strh	r1, [r7, #10]
 8004880:	461d      	mov	r5, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 fe40 	bl	8005508 <NibbleToHex>
 8004888:	4603      	mov	r3, r0
 800488a:	461a      	mov	r2, r3
 800488c:	1963      	adds	r3, r4, r5
 800488e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8004892:	4b6c      	ldr	r3, [pc, #432]	; (8004a44 <send_DHCP_REQUEST+0x50c>)
 8004894:	791b      	ldrb	r3, [r3, #4]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4b68      	ldr	r3, [pc, #416]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 800489c:	681c      	ldr	r4, [r3, #0]
 800489e:	897b      	ldrh	r3, [r7, #10]
 80048a0:	1c59      	adds	r1, r3, #1
 80048a2:	8179      	strh	r1, [r7, #10]
 80048a4:	461d      	mov	r5, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f000 fe2e 	bl	8005508 <NibbleToHex>
 80048ac:	4603      	mov	r3, r0
 80048ae:	461a      	mov	r2, r3
 80048b0:	1963      	adds	r3, r4, r5
 80048b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80048b6:	4b63      	ldr	r3, [pc, #396]	; (8004a44 <send_DHCP_REQUEST+0x50c>)
 80048b8:	791a      	ldrb	r2, [r3, #4]
 80048ba:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 80048bc:	681c      	ldr	r4, [r3, #0]
 80048be:	897b      	ldrh	r3, [r7, #10]
 80048c0:	1c59      	adds	r1, r3, #1
 80048c2:	8179      	strh	r1, [r7, #10]
 80048c4:	461d      	mov	r5, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f000 fe1e 	bl	8005508 <NibbleToHex>
 80048cc:	4603      	mov	r3, r0
 80048ce:	461a      	mov	r2, r3
 80048d0:	1963      	adds	r3, r4, r5
 80048d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80048d6:	4b5b      	ldr	r3, [pc, #364]	; (8004a44 <send_DHCP_REQUEST+0x50c>)
 80048d8:	795b      	ldrb	r3, [r3, #5]
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4b57      	ldr	r3, [pc, #348]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 80048e0:	681c      	ldr	r4, [r3, #0]
 80048e2:	897b      	ldrh	r3, [r7, #10]
 80048e4:	1c59      	adds	r1, r3, #1
 80048e6:	8179      	strh	r1, [r7, #10]
 80048e8:	461d      	mov	r5, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f000 fe0c 	bl	8005508 <NibbleToHex>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	1963      	adds	r3, r4, r5
 80048f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80048fa:	4b52      	ldr	r3, [pc, #328]	; (8004a44 <send_DHCP_REQUEST+0x50c>)
 80048fc:	795a      	ldrb	r2, [r3, #5]
 80048fe:	4b4f      	ldr	r3, [pc, #316]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004900:	681c      	ldr	r4, [r3, #0]
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	1c59      	adds	r1, r3, #1
 8004906:	8179      	strh	r1, [r7, #10]
 8004908:	461d      	mov	r5, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f000 fdfc 	bl	8005508 <NibbleToHex>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	1963      	adds	r3, r4, r5
 8004916:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	b2d9      	uxtb	r1, r3
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	8978      	ldrh	r0, [r7, #10]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3307      	adds	r3, #7
 8004928:	1ac3      	subs	r3, r0, r3
 800492a:	3106      	adds	r1, #6
 800492c:	b2c9      	uxtb	r1, r1
 800492e:	4413      	add	r3, r2
 8004930:	460a      	mov	r2, r1
 8004932:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8004936:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	1c59      	adds	r1, r3, #1
 800493e:	8179      	strh	r1, [r7, #10]
 8004940:	4413      	add	r3, r2
 8004942:	2237      	movs	r2, #55	; 0x37
 8004944:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8004948:	4b3c      	ldr	r3, [pc, #240]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	897b      	ldrh	r3, [r7, #10]
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	8179      	strh	r1, [r7, #10]
 8004952:	4413      	add	r3, r2
 8004954:	2208      	movs	r2, #8
 8004956:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 800495a:	4b38      	ldr	r3, [pc, #224]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	1c59      	adds	r1, r3, #1
 8004962:	8179      	strh	r1, [r7, #10]
 8004964:	4413      	add	r3, r2
 8004966:	2201      	movs	r2, #1
 8004968:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 800496c:	4b33      	ldr	r3, [pc, #204]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	897b      	ldrh	r3, [r7, #10]
 8004972:	1c59      	adds	r1, r3, #1
 8004974:	8179      	strh	r1, [r7, #10]
 8004976:	4413      	add	r3, r2
 8004978:	2203      	movs	r2, #3
 800497a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 800497e:	4b2f      	ldr	r3, [pc, #188]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	897b      	ldrh	r3, [r7, #10]
 8004984:	1c59      	adds	r1, r3, #1
 8004986:	8179      	strh	r1, [r7, #10]
 8004988:	4413      	add	r3, r2
 800498a:	2206      	movs	r2, #6
 800498c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8004990:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	897b      	ldrh	r3, [r7, #10]
 8004996:	1c59      	adds	r1, r3, #1
 8004998:	8179      	strh	r1, [r7, #10]
 800499a:	4413      	add	r3, r2
 800499c:	220f      	movs	r2, #15
 800499e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80049a2:	4b26      	ldr	r3, [pc, #152]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	897b      	ldrh	r3, [r7, #10]
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	8179      	strh	r1, [r7, #10]
 80049ac:	4413      	add	r3, r2
 80049ae:	223a      	movs	r2, #58	; 0x3a
 80049b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 80049b4:	4b21      	ldr	r3, [pc, #132]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	897b      	ldrh	r3, [r7, #10]
 80049ba:	1c59      	adds	r1, r3, #1
 80049bc:	8179      	strh	r1, [r7, #10]
 80049be:	4413      	add	r3, r2
 80049c0:	223b      	movs	r2, #59	; 0x3b
 80049c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 80049c6:	4b1d      	ldr	r3, [pc, #116]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	8179      	strh	r1, [r7, #10]
 80049d0:	4413      	add	r3, r2
 80049d2:	221f      	movs	r2, #31
 80049d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 80049d8:	4b18      	ldr	r3, [pc, #96]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	897b      	ldrh	r3, [r7, #10]
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	8179      	strh	r1, [r7, #10]
 80049e2:	4413      	add	r3, r2
 80049e4:	2221      	movs	r2, #33	; 0x21
 80049e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	897b      	ldrh	r3, [r7, #10]
 80049f0:	1c59      	adds	r1, r3, #1
 80049f2:	8179      	strh	r1, [r7, #10]
 80049f4:	4413      	add	r3, r2
 80049f6:	22ff      	movs	r2, #255	; 0xff
 80049f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 80049fc:	897b      	ldrh	r3, [r7, #10]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e009      	b.n	8004a16 <send_DHCP_REQUEST+0x4de>
 8004a02:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4413      	add	r3, r2
 8004a0a:	33ec      	adds	r3, #236	; 0xec
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8004a1c:	dbf1      	blt.n	8004a02 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <send_DHCP_REQUEST+0x510>)
 8004a20:	7818      	ldrb	r0, [r3, #0]
 8004a22:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <send_DHCP_REQUEST+0x504>)
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	1d3b      	adds	r3, r7, #4
 8004a28:	2243      	movs	r2, #67	; 0x43
 8004a2a:	9200      	str	r2, [sp, #0]
 8004a2c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8004a30:	f001 f992 	bl	8005d58 <sendto>

}
 8004a34:	bf00      	nop
 8004a36:	3710      	adds	r7, #16
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3c:	2000066c 	.word	0x2000066c
 8004a40:	20000114 	.word	0x20000114
 8004a44:	20000670 	.word	0x20000670
 8004a48:	20000644 	.word	0x20000644

08004a4c <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8004a52:	2300      	movs	r3, #0
 8004a54:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8004a56:	f7ff fb15 	bl	8004084 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8004a5e:	4b9f      	ldr	r3, [pc, #636]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330a      	adds	r3, #10
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8004a68:	4b9c      	ldr	r3, [pc, #624]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330a      	adds	r3, #10
 8004a6e:	3301      	adds	r3, #1
 8004a70:	2200      	movs	r2, #0
 8004a72:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8004a74:	4b99      	ldr	r3, [pc, #612]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	897b      	ldrh	r3, [r7, #10]
 8004a7a:	1c59      	adds	r1, r3, #1
 8004a7c:	8179      	strh	r1, [r7, #10]
 8004a7e:	4413      	add	r3, r2
 8004a80:	2235      	movs	r2, #53	; 0x35
 8004a82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8004a86:	4b95      	ldr	r3, [pc, #596]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	897b      	ldrh	r3, [r7, #10]
 8004a8c:	1c59      	adds	r1, r3, #1
 8004a8e:	8179      	strh	r1, [r7, #10]
 8004a90:	4413      	add	r3, r2
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8004a98:	4b90      	ldr	r3, [pc, #576]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	897b      	ldrh	r3, [r7, #10]
 8004a9e:	1c59      	adds	r1, r3, #1
 8004aa0:	8179      	strh	r1, [r7, #10]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8004aaa:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	897b      	ldrh	r3, [r7, #10]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	8179      	strh	r1, [r7, #10]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	223d      	movs	r2, #61	; 0x3d
 8004ab8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8004abc:	4b87      	ldr	r3, [pc, #540]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	897b      	ldrh	r3, [r7, #10]
 8004ac2:	1c59      	adds	r1, r3, #1
 8004ac4:	8179      	strh	r1, [r7, #10]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	2207      	movs	r2, #7
 8004aca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8004ace:	4b83      	ldr	r3, [pc, #524]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	897b      	ldrh	r3, [r7, #10]
 8004ad4:	1c59      	adds	r1, r3, #1
 8004ad6:	8179      	strh	r1, [r7, #10]
 8004ad8:	4413      	add	r3, r2
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8004ae0:	4b7e      	ldr	r3, [pc, #504]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	897b      	ldrh	r3, [r7, #10]
 8004ae6:	1c59      	adds	r1, r3, #1
 8004ae8:	8179      	strh	r1, [r7, #10]
 8004aea:	4618      	mov	r0, r3
 8004aec:	4b7c      	ldr	r3, [pc, #496]	; (8004ce0 <send_DHCP_DECLINE+0x294>)
 8004aee:	7819      	ldrb	r1, [r3, #0]
 8004af0:	1813      	adds	r3, r2, r0
 8004af2:	460a      	mov	r2, r1
 8004af4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8004af8:	4b78      	ldr	r3, [pc, #480]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	897b      	ldrh	r3, [r7, #10]
 8004afe:	1c59      	adds	r1, r3, #1
 8004b00:	8179      	strh	r1, [r7, #10]
 8004b02:	4618      	mov	r0, r3
 8004b04:	4b76      	ldr	r3, [pc, #472]	; (8004ce0 <send_DHCP_DECLINE+0x294>)
 8004b06:	7859      	ldrb	r1, [r3, #1]
 8004b08:	1813      	adds	r3, r2, r0
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8004b10:	4b72      	ldr	r3, [pc, #456]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	897b      	ldrh	r3, [r7, #10]
 8004b16:	1c59      	adds	r1, r3, #1
 8004b18:	8179      	strh	r1, [r7, #10]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	4b70      	ldr	r3, [pc, #448]	; (8004ce0 <send_DHCP_DECLINE+0x294>)
 8004b1e:	7899      	ldrb	r1, [r3, #2]
 8004b20:	1813      	adds	r3, r2, r0
 8004b22:	460a      	mov	r2, r1
 8004b24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8004b28:	4b6c      	ldr	r3, [pc, #432]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	897b      	ldrh	r3, [r7, #10]
 8004b2e:	1c59      	adds	r1, r3, #1
 8004b30:	8179      	strh	r1, [r7, #10]
 8004b32:	4618      	mov	r0, r3
 8004b34:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <send_DHCP_DECLINE+0x294>)
 8004b36:	78d9      	ldrb	r1, [r3, #3]
 8004b38:	1813      	adds	r3, r2, r0
 8004b3a:	460a      	mov	r2, r1
 8004b3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8004b40:	4b66      	ldr	r3, [pc, #408]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	897b      	ldrh	r3, [r7, #10]
 8004b46:	1c59      	adds	r1, r3, #1
 8004b48:	8179      	strh	r1, [r7, #10]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	4b64      	ldr	r3, [pc, #400]	; (8004ce0 <send_DHCP_DECLINE+0x294>)
 8004b4e:	7919      	ldrb	r1, [r3, #4]
 8004b50:	1813      	adds	r3, r2, r0
 8004b52:	460a      	mov	r2, r1
 8004b54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8004b58:	4b60      	ldr	r3, [pc, #384]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	897b      	ldrh	r3, [r7, #10]
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	8179      	strh	r1, [r7, #10]
 8004b62:	4618      	mov	r0, r3
 8004b64:	4b5e      	ldr	r3, [pc, #376]	; (8004ce0 <send_DHCP_DECLINE+0x294>)
 8004b66:	7959      	ldrb	r1, [r3, #5]
 8004b68:	1813      	adds	r3, r2, r0
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8004b70:	4b5a      	ldr	r3, [pc, #360]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	897b      	ldrh	r3, [r7, #10]
 8004b76:	1c59      	adds	r1, r3, #1
 8004b78:	8179      	strh	r1, [r7, #10]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	2232      	movs	r2, #50	; 0x32
 8004b7e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8004b82:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	897b      	ldrh	r3, [r7, #10]
 8004b88:	1c59      	adds	r1, r3, #1
 8004b8a:	8179      	strh	r1, [r7, #10]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	2204      	movs	r2, #4
 8004b90:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8004b94:	4b51      	ldr	r3, [pc, #324]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	897b      	ldrh	r3, [r7, #10]
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	8179      	strh	r1, [r7, #10]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <send_DHCP_DECLINE+0x298>)
 8004ba2:	7819      	ldrb	r1, [r3, #0]
 8004ba4:	1813      	adds	r3, r2, r0
 8004ba6:	460a      	mov	r2, r1
 8004ba8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8004bac:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	897b      	ldrh	r3, [r7, #10]
 8004bb2:	1c59      	adds	r1, r3, #1
 8004bb4:	8179      	strh	r1, [r7, #10]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	4b4a      	ldr	r3, [pc, #296]	; (8004ce4 <send_DHCP_DECLINE+0x298>)
 8004bba:	7859      	ldrb	r1, [r3, #1]
 8004bbc:	1813      	adds	r3, r2, r0
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8004bc4:	4b45      	ldr	r3, [pc, #276]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	897b      	ldrh	r3, [r7, #10]
 8004bca:	1c59      	adds	r1, r3, #1
 8004bcc:	8179      	strh	r1, [r7, #10]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	4b44      	ldr	r3, [pc, #272]	; (8004ce4 <send_DHCP_DECLINE+0x298>)
 8004bd2:	7899      	ldrb	r1, [r3, #2]
 8004bd4:	1813      	adds	r3, r2, r0
 8004bd6:	460a      	mov	r2, r1
 8004bd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	897b      	ldrh	r3, [r7, #10]
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	8179      	strh	r1, [r7, #10]
 8004be6:	4618      	mov	r0, r3
 8004be8:	4b3e      	ldr	r3, [pc, #248]	; (8004ce4 <send_DHCP_DECLINE+0x298>)
 8004bea:	78d9      	ldrb	r1, [r3, #3]
 8004bec:	1813      	adds	r3, r2, r0
 8004bee:	460a      	mov	r2, r1
 8004bf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8004bf4:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	897b      	ldrh	r3, [r7, #10]
 8004bfa:	1c59      	adds	r1, r3, #1
 8004bfc:	8179      	strh	r1, [r7, #10]
 8004bfe:	4413      	add	r3, r2
 8004c00:	2236      	movs	r2, #54	; 0x36
 8004c02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8004c06:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	1c59      	adds	r1, r3, #1
 8004c0e:	8179      	strh	r1, [r7, #10]
 8004c10:	4413      	add	r3, r2
 8004c12:	2204      	movs	r2, #4
 8004c14:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8004c18:	4b30      	ldr	r3, [pc, #192]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	897b      	ldrh	r3, [r7, #10]
 8004c1e:	1c59      	adds	r1, r3, #1
 8004c20:	8179      	strh	r1, [r7, #10]
 8004c22:	4618      	mov	r0, r3
 8004c24:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <send_DHCP_DECLINE+0x29c>)
 8004c26:	7819      	ldrb	r1, [r3, #0]
 8004c28:	1813      	adds	r3, r2, r0
 8004c2a:	460a      	mov	r2, r1
 8004c2c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8004c30:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	897b      	ldrh	r3, [r7, #10]
 8004c36:	1c59      	adds	r1, r3, #1
 8004c38:	8179      	strh	r1, [r7, #10]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ce8 <send_DHCP_DECLINE+0x29c>)
 8004c3e:	7859      	ldrb	r1, [r3, #1]
 8004c40:	1813      	adds	r3, r2, r0
 8004c42:	460a      	mov	r2, r1
 8004c44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	897b      	ldrh	r3, [r7, #10]
 8004c4e:	1c59      	adds	r1, r3, #1
 8004c50:	8179      	strh	r1, [r7, #10]
 8004c52:	4618      	mov	r0, r3
 8004c54:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <send_DHCP_DECLINE+0x29c>)
 8004c56:	7899      	ldrb	r1, [r3, #2]
 8004c58:	1813      	adds	r3, r2, r0
 8004c5a:	460a      	mov	r2, r1
 8004c5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8004c60:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	897b      	ldrh	r3, [r7, #10]
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	8179      	strh	r1, [r7, #10]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <send_DHCP_DECLINE+0x29c>)
 8004c6e:	78d9      	ldrb	r1, [r3, #3]
 8004c70:	1813      	adds	r3, r2, r0
 8004c72:	460a      	mov	r2, r1
 8004c74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8004c78:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	897b      	ldrh	r3, [r7, #10]
 8004c7e:	1c59      	adds	r1, r3, #1
 8004c80:	8179      	strh	r1, [r7, #10]
 8004c82:	4413      	add	r3, r2
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	e009      	b.n	8004ca4 <send_DHCP_DECLINE+0x258>
 8004c90:	4b12      	ldr	r3, [pc, #72]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	33ec      	adds	r3, #236	; 0xec
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8004caa:	dbf1      	blt.n	8004c90 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8004cac:	23ff      	movs	r3, #255	; 0xff
 8004cae:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8004cb0:	23ff      	movs	r3, #255	; 0xff
 8004cb2:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8004cb4:	23ff      	movs	r3, #255	; 0xff
 8004cb6:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8004cb8:	23ff      	movs	r3, #255	; 0xff
 8004cba:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <send_DHCP_DECLINE+0x2a0>)
 8004cbe:	7818      	ldrb	r0, [r3, #0]
 8004cc0:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <send_DHCP_DECLINE+0x290>)
 8004cc2:	6819      	ldr	r1, [r3, #0]
 8004cc4:	1d3b      	adds	r3, r7, #4
 8004cc6:	2243      	movs	r2, #67	; 0x43
 8004cc8:	9200      	str	r2, [sp, #0]
 8004cca:	f44f 7209 	mov.w	r2, #548	; 0x224
 8004cce:	f001 f843 	bl	8005d58 <sendto>
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	2000066c 	.word	0x2000066c
 8004ce0:	20000670 	.word	0x20000670
 8004ce4:	20000650 	.word	0x20000650
 8004ce8:	20000648 	.word	0x20000648
 8004cec:	20000644 	.word	0x20000644

08004cf0 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8004cf0:	b590      	push	{r4, r7, lr}
 8004cf2:	b089      	sub	sp, #36	; 0x24
 8004cf4:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8004cfa:	4baa      	ldr	r3, [pc, #680]	; (8004fa4 <parseDHCPMSG+0x2b4>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f82f 	bl	8003d62 <getSn_RX_RSR>
 8004d04:	4603      	mov	r3, r0
 8004d06:	823b      	strh	r3, [r7, #16]
 8004d08:	8a3b      	ldrh	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d011      	beq.n	8004d32 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8004d0e:	4ba5      	ldr	r3, [pc, #660]	; (8004fa4 <parseDHCPMSG+0x2b4>)
 8004d10:	7818      	ldrb	r0, [r3, #0]
 8004d12:	4ba5      	ldr	r3, [pc, #660]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d14:	6819      	ldr	r1, [r3, #0]
 8004d16:	1d3c      	adds	r4, r7, #4
 8004d18:	8a3a      	ldrh	r2, [r7, #16]
 8004d1a:	1cbb      	adds	r3, r7, #2
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	4623      	mov	r3, r4
 8004d20:	f001 f950 	bl	8005fc4 <recvfrom>
 8004d24:	4603      	mov	r3, r0
 8004d26:	823b      	strh	r3, [r7, #16]
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;

   if (svr_port == DHCP_SERVER_PORT) {
 8004d28:	887b      	ldrh	r3, [r7, #2]
 8004d2a:	2b43      	cmp	r3, #67	; 0x43
 8004d2c:	f040 81a7 	bne.w	800507e <parseDHCPMSG+0x38e>
 8004d30:	e001      	b.n	8004d36 <parseDHCPMSG+0x46>
   else return 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	e1a5      	b.n	8005082 <parseDHCPMSG+0x392>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8004d36:	4b9c      	ldr	r3, [pc, #624]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	7f1a      	ldrb	r2, [r3, #28]
 8004d3c:	4b9b      	ldr	r3, [pc, #620]	; (8004fac <parseDHCPMSG+0x2bc>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d124      	bne.n	8004d8e <parseDHCPMSG+0x9e>
 8004d44:	4b98      	ldr	r3, [pc, #608]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	7f5a      	ldrb	r2, [r3, #29]
 8004d4a:	4b98      	ldr	r3, [pc, #608]	; (8004fac <parseDHCPMSG+0x2bc>)
 8004d4c:	785b      	ldrb	r3, [r3, #1]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d11d      	bne.n	8004d8e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8004d52:	4b95      	ldr	r3, [pc, #596]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	7f9a      	ldrb	r2, [r3, #30]
 8004d58:	4b94      	ldr	r3, [pc, #592]	; (8004fac <parseDHCPMSG+0x2bc>)
 8004d5a:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d116      	bne.n	8004d8e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8004d60:	4b91      	ldr	r3, [pc, #580]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	7fda      	ldrb	r2, [r3, #31]
 8004d66:	4b91      	ldr	r3, [pc, #580]	; (8004fac <parseDHCPMSG+0x2bc>)
 8004d68:	78db      	ldrb	r3, [r3, #3]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10f      	bne.n	8004d8e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8004d6e:	4b8e      	ldr	r3, [pc, #568]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004d76:	4b8d      	ldr	r3, [pc, #564]	; (8004fac <parseDHCPMSG+0x2bc>)
 8004d78:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d107      	bne.n	8004d8e <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8004d7e:	4b8a      	ldr	r3, [pc, #552]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004d86:	4b89      	ldr	r3, [pc, #548]	; (8004fac <parseDHCPMSG+0x2bc>)
 8004d88:	795b      	ldrb	r3, [r3, #5]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d001      	beq.n	8004d92 <parseDHCPMSG+0xa2>
         return 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	e177      	b.n	8005082 <parseDHCPMSG+0x392>
		p = (uint8_t *)(&pDHCPMSG->op);
 8004d92:	4b85      	ldr	r3, [pc, #532]	; (8004fa8 <parseDHCPMSG+0x2b8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	33f0      	adds	r3, #240	; 0xf0
 8004d9c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8004d9e:	8a3b      	ldrh	r3, [r7, #16]
 8004da0:	3bf0      	subs	r3, #240	; 0xf0
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4413      	add	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8004da8:	e164      	b.n	8005074 <parseDHCPMSG+0x384>

			switch ( *p ) {
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b36      	cmp	r3, #54	; 0x36
 8004db0:	dc76      	bgt.n	8004ea0 <parseDHCPMSG+0x1b0>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f2c0 8151 	blt.w	800505a <parseDHCPMSG+0x36a>
 8004db8:	2b36      	cmp	r3, #54	; 0x36
 8004dba:	f200 814e 	bhi.w	800505a <parseDHCPMSG+0x36a>
 8004dbe:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <parseDHCPMSG+0xd4>)
 8004dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc4:	08004ead 	.word	0x08004ead
 8004dc8:	08004ecd 	.word	0x08004ecd
 8004dcc:	0800505b 	.word	0x0800505b
 8004dd0:	08004f0b 	.word	0x08004f0b
 8004dd4:	0800505b 	.word	0x0800505b
 8004dd8:	0800505b 	.word	0x0800505b
 8004ddc:	08004f57 	.word	0x08004f57
 8004de0:	0800505b 	.word	0x0800505b
 8004de4:	0800505b 	.word	0x0800505b
 8004de8:	0800505b 	.word	0x0800505b
 8004dec:	0800505b 	.word	0x0800505b
 8004df0:	0800505b 	.word	0x0800505b
 8004df4:	0800505b 	.word	0x0800505b
 8004df8:	0800505b 	.word	0x0800505b
 8004dfc:	0800505b 	.word	0x0800505b
 8004e00:	0800505b 	.word	0x0800505b
 8004e04:	0800505b 	.word	0x0800505b
 8004e08:	0800505b 	.word	0x0800505b
 8004e0c:	0800505b 	.word	0x0800505b
 8004e10:	0800505b 	.word	0x0800505b
 8004e14:	0800505b 	.word	0x0800505b
 8004e18:	0800505b 	.word	0x0800505b
 8004e1c:	0800505b 	.word	0x0800505b
 8004e20:	0800505b 	.word	0x0800505b
 8004e24:	0800505b 	.word	0x0800505b
 8004e28:	0800505b 	.word	0x0800505b
 8004e2c:	0800505b 	.word	0x0800505b
 8004e30:	0800505b 	.word	0x0800505b
 8004e34:	0800505b 	.word	0x0800505b
 8004e38:	0800505b 	.word	0x0800505b
 8004e3c:	0800505b 	.word	0x0800505b
 8004e40:	0800505b 	.word	0x0800505b
 8004e44:	0800505b 	.word	0x0800505b
 8004e48:	0800505b 	.word	0x0800505b
 8004e4c:	0800505b 	.word	0x0800505b
 8004e50:	0800505b 	.word	0x0800505b
 8004e54:	0800505b 	.word	0x0800505b
 8004e58:	0800505b 	.word	0x0800505b
 8004e5c:	0800505b 	.word	0x0800505b
 8004e60:	0800505b 	.word	0x0800505b
 8004e64:	0800505b 	.word	0x0800505b
 8004e68:	0800505b 	.word	0x0800505b
 8004e6c:	0800505b 	.word	0x0800505b
 8004e70:	0800505b 	.word	0x0800505b
 8004e74:	0800505b 	.word	0x0800505b
 8004e78:	0800505b 	.word	0x0800505b
 8004e7c:	0800505b 	.word	0x0800505b
 8004e80:	0800505b 	.word	0x0800505b
 8004e84:	0800505b 	.word	0x0800505b
 8004e88:	0800505b 	.word	0x0800505b
 8004e8c:	0800505b 	.word	0x0800505b
 8004e90:	08004fbd 	.word	0x08004fbd
 8004e94:	0800505b 	.word	0x0800505b
 8004e98:	08004eb5 	.word	0x08004eb5
 8004e9c:	08005019 	.word	0x08005019
 8004ea0:	2bff      	cmp	r3, #255	; 0xff
 8004ea2:	f040 80da 	bne.w	800505a <parseDHCPMSG+0x36a>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	617b      	str	r3, [r7, #20]
   				break;
 8004eaa:	e0e3      	b.n	8005074 <parseDHCPMSG+0x384>
            case padOption :
   				p++;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	617b      	str	r3, [r7, #20]
   				break;
 8004eb2:	e0df      	b.n	8005074 <parseDHCPMSG+0x384>
   			case dhcpMessageType :
   				p++;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	617b      	str	r3, [r7, #20]
   				p++;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	617a      	str	r2, [r7, #20]
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	74fb      	strb	r3, [r7, #19]
   				break;
 8004eca:	e0d3      	b.n	8005074 <parseDHCPMSG+0x384>
   			case subnetMask :
   				p++;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	617b      	str	r3, [r7, #20]
   				p++;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	617a      	str	r2, [r7, #20]
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	4b33      	ldr	r3, [pc, #204]	; (8004fb0 <parseDHCPMSG+0x2c0>)
 8004ee2:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	617a      	str	r2, [r7, #20]
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <parseDHCPMSG+0x2c0>)
 8004eee:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	617a      	str	r2, [r7, #20]
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	4b2d      	ldr	r3, [pc, #180]	; (8004fb0 <parseDHCPMSG+0x2c0>)
 8004efa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	617a      	str	r2, [r7, #20]
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	4b2a      	ldr	r3, [pc, #168]	; (8004fb0 <parseDHCPMSG+0x2c0>)
 8004f06:	70da      	strb	r2, [r3, #3]
   				break;
 8004f08:	e0b4      	b.n	8005074 <parseDHCPMSG+0x384>
   			case routersOnSubnet :
   				p++;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	617a      	str	r2, [r7, #20]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	1c5a      	adds	r2, r3, #1
 8004f1e:	617a      	str	r2, [r7, #20]
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	4b24      	ldr	r3, [pc, #144]	; (8004fb4 <parseDHCPMSG+0x2c4>)
 8004f24:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	617a      	str	r2, [r7, #20]
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	4b21      	ldr	r3, [pc, #132]	; (8004fb4 <parseDHCPMSG+0x2c4>)
 8004f30:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	617a      	str	r2, [r7, #20]
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <parseDHCPMSG+0x2c4>)
 8004f3c:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	1c5a      	adds	r2, r3, #1
 8004f42:	617a      	str	r2, [r7, #20]
 8004f44:	781a      	ldrb	r2, [r3, #0]
 8004f46:	4b1b      	ldr	r3, [pc, #108]	; (8004fb4 <parseDHCPMSG+0x2c4>)
 8004f48:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8004f4a:	7afb      	ldrb	r3, [r7, #11]
 8004f4c:	3b04      	subs	r3, #4
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	4413      	add	r3, r2
 8004f52:	617b      	str	r3, [r7, #20]
   				break;
 8004f54:	e08e      	b.n	8005074 <parseDHCPMSG+0x384>
   			case dns :
   				p++;                  
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	617a      	str	r2, [r7, #20]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	617a      	str	r2, [r7, #20]
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <parseDHCPMSG+0x2c8>)
 8004f70:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	617a      	str	r2, [r7, #20]
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <parseDHCPMSG+0x2c8>)
 8004f7c:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	1c5a      	adds	r2, r3, #1
 8004f82:	617a      	str	r2, [r7, #20]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <parseDHCPMSG+0x2c8>)
 8004f88:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	617a      	str	r2, [r7, #20]
 8004f90:	781a      	ldrb	r2, [r3, #0]
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <parseDHCPMSG+0x2c8>)
 8004f94:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8004f96:	7afb      	ldrb	r3, [r7, #11]
 8004f98:	3b04      	subs	r3, #4
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]
   				break;
 8004fa0:	e068      	b.n	8005074 <parseDHCPMSG+0x384>
 8004fa2:	bf00      	nop
 8004fa4:	20000644 	.word	0x20000644
 8004fa8:	2000066c 	.word	0x2000066c
 8004fac:	20000670 	.word	0x20000670
 8004fb0:	20000658 	.word	0x20000658
 8004fb4:	20000654 	.word	0x20000654
 8004fb8:	2000065c 	.word	0x2000065c
   			case dhcpIPaddrLeaseTime :
   				p++;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	617a      	str	r2, [r7, #20]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	617a      	str	r2, [r7, #20]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	4b2d      	ldr	r3, [pc, #180]	; (800508c <parseDHCPMSG+0x39c>)
 8004fd8:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004fda:	4b2c      	ldr	r3, [pc, #176]	; (800508c <parseDHCPMSG+0x39c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	021a      	lsls	r2, r3, #8
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1c59      	adds	r1, r3, #1
 8004fe4:	6179      	str	r1, [r7, #20]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4413      	add	r3, r2
 8004fea:	4a28      	ldr	r2, [pc, #160]	; (800508c <parseDHCPMSG+0x39c>)
 8004fec:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8004fee:	4b27      	ldr	r3, [pc, #156]	; (800508c <parseDHCPMSG+0x39c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	021a      	lsls	r2, r3, #8
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	6179      	str	r1, [r7, #20]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	4a23      	ldr	r2, [pc, #140]	; (800508c <parseDHCPMSG+0x39c>)
 8005000:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8005002:	4b22      	ldr	r3, [pc, #136]	; (800508c <parseDHCPMSG+0x39c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1c59      	adds	r1, r3, #1
 800500c:	6179      	str	r1, [r7, #20]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	4413      	add	r3, r2
 8005012:	4a1e      	ldr	r2, [pc, #120]	; (800508c <parseDHCPMSG+0x39c>)
 8005014:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 8005016:	e02d      	b.n	8005074 <parseDHCPMSG+0x384>
   			case dhcpServerIdentifier :
   				p++;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	1c5a      	adds	r2, r3, #1
 8005022:	617a      	str	r2, [r7, #20]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	617a      	str	r2, [r7, #20]
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	4b17      	ldr	r3, [pc, #92]	; (8005090 <parseDHCPMSG+0x3a0>)
 8005032:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	617a      	str	r2, [r7, #20]
 800503a:	781a      	ldrb	r2, [r3, #0]
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <parseDHCPMSG+0x3a0>)
 800503e:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	617a      	str	r2, [r7, #20]
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	4b11      	ldr	r3, [pc, #68]	; (8005090 <parseDHCPMSG+0x3a0>)
 800504a:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	617a      	str	r2, [r7, #20]
 8005052:	781a      	ldrb	r2, [r3, #0]
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <parseDHCPMSG+0x3a0>)
 8005056:	70da      	strb	r2, [r3, #3]
   				break;
 8005058:	e00c      	b.n	8005074 <parseDHCPMSG+0x384>
   			default :
   				p++;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	3301      	adds	r3, #1
 800505e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	617a      	str	r2, [r7, #20]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	4413      	add	r3, r2
 8005070:	617b      	str	r3, [r7, #20]
   				break;
 8005072:	bf00      	nop
		while ( p < e ) {
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	429a      	cmp	r2, r3
 800507a:	f4ff ae96 	bcc.w	8004daa <parseDHCPMSG+0xba>
			} // switch
		} // while
	} // if
	return	type;
 800507e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8005082:	4618      	mov	r0, r3
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	bf00      	nop
 800508c:	2000010c 	.word	0x2000010c
 8005090:	20000648 	.word	0x20000648

08005094 <DHCP_run>:

uint8_t DHCP_run(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 800509a:	4b7f      	ldr	r3, [pc, #508]	; (8005298 <DHCP_run+0x204>)
 800509c:	f993 3000 	ldrsb.w	r3, [r3]
 80050a0:	2b06      	cmp	r3, #6
 80050a2:	d101      	bne.n	80050a8 <DHCP_run+0x14>
 80050a4:	2305      	movs	r3, #5
 80050a6:	e0f3      	b.n	8005290 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80050a8:	4b7c      	ldr	r3, [pc, #496]	; (800529c <DHCP_run+0x208>)
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	3301      	adds	r3, #1
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fcae 	bl	8003a18 <WIZCHIP_READ>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b22      	cmp	r3, #34	; 0x22
 80050c0:	d006      	beq.n	80050d0 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80050c2:	4b76      	ldr	r3, [pc, #472]	; (800529c <DHCP_run+0x208>)
 80050c4:	7818      	ldrb	r0, [r3, #0]
 80050c6:	2300      	movs	r3, #0
 80050c8:	2244      	movs	r2, #68	; 0x44
 80050ca:	2102      	movs	r1, #2
 80050cc:	f000 fa36 	bl	800553c <socket>

	ret = DHCP_RUNNING;
 80050d0:	2301      	movs	r3, #1
 80050d2:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 80050d4:	f7ff fe0c 	bl	8004cf0 <parseDHCPMSG>
 80050d8:	4603      	mov	r3, r0
 80050da:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 80050dc:	4b6e      	ldr	r3, [pc, #440]	; (8005298 <DHCP_run+0x204>)
 80050de:	f993 3000 	ldrsb.w	r3, [r3]
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	f200 80d0 	bhi.w	8005288 <DHCP_run+0x1f4>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <DHCP_run+0x5c>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005105 	.word	0x08005105
 80050f4:	08005129 	.word	0x08005129
 80050f8:	0800516d 	.word	0x0800516d
 80050fc:	080051bd 	.word	0x080051bd
 8005100:	08005217 	.word	0x08005217
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8005104:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <DHCP_run+0x20c>)
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 800510a:	4b65      	ldr	r3, [pc, #404]	; (80052a0 <DHCP_run+0x20c>)
 800510c:	2200      	movs	r2, #0
 800510e:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8005110:	4b63      	ldr	r3, [pc, #396]	; (80052a0 <DHCP_run+0x20c>)
 8005112:	2200      	movs	r2, #0
 8005114:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8005116:	4b62      	ldr	r3, [pc, #392]	; (80052a0 <DHCP_run+0x20c>)
 8005118:	2200      	movs	r2, #0
 800511a:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 800511c:	f7ff f8a8 	bl	8004270 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 8005120:	4b5d      	ldr	r3, [pc, #372]	; (8005298 <DHCP_run+0x204>)
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
   		break;
 8005126:	e0b2      	b.n	800528e <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8005128:	79bb      	ldrb	r3, [r7, #6]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d119      	bne.n	8005162 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800512e:	4b5d      	ldr	r3, [pc, #372]	; (80052a4 <DHCP_run+0x210>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	7c1a      	ldrb	r2, [r3, #16]
 8005134:	4b5a      	ldr	r3, [pc, #360]	; (80052a0 <DHCP_run+0x20c>)
 8005136:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8005138:	4b5a      	ldr	r3, [pc, #360]	; (80052a4 <DHCP_run+0x210>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	7c5a      	ldrb	r2, [r3, #17]
 800513e:	4b58      	ldr	r3, [pc, #352]	; (80052a0 <DHCP_run+0x20c>)
 8005140:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8005142:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <DHCP_run+0x210>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	7c9a      	ldrb	r2, [r3, #18]
 8005148:	4b55      	ldr	r3, [pc, #340]	; (80052a0 <DHCP_run+0x20c>)
 800514a:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 800514c:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <DHCP_run+0x210>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	7cda      	ldrb	r2, [r3, #19]
 8005152:	4b53      	ldr	r3, [pc, #332]	; (80052a0 <DHCP_run+0x20c>)
 8005154:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8005156:	f7ff f9ef 	bl	8004538 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 800515a:	4b4f      	ldr	r3, [pc, #316]	; (8005298 <DHCP_run+0x204>)
 800515c:	2202      	movs	r2, #2
 800515e:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 8005160:	e095      	b.n	800528e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 8005162:	f000 f8b1 	bl	80052c8 <check_DHCP_timeout>
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
         break;
 800516a:	e090      	b.n	800528e <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 800516c:	79bb      	ldrb	r3, [r7, #6]
 800516e:	2b05      	cmp	r3, #5
 8005170:	d116      	bne.n	80051a0 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 8005172:	f000 f909 	bl	8005388 <check_DHCP_leasedIP>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d008      	beq.n	800518e <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 800517c:	4b4a      	ldr	r3, [pc, #296]	; (80052a8 <DHCP_run+0x214>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4798      	blx	r3
					reset_DHCP_timeout();
 8005182:	f000 f9ab 	bl	80054dc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 8005186:	4b44      	ldr	r3, [pc, #272]	; (8005298 <DHCP_run+0x204>)
 8005188:	2203      	movs	r2, #3
 800518a:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 800518c:	e07f      	b.n	800528e <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 800518e:	f000 f9a5 	bl	80054dc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8005192:	4b46      	ldr	r3, [pc, #280]	; (80052ac <DHCP_run+0x218>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 8005198:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <DHCP_run+0x204>)
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
		break;
 800519e:	e076      	b.n	800528e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80051a0:	79bb      	ldrb	r3, [r7, #6]
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d105      	bne.n	80051b2 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80051a6:	f000 f999 	bl	80054dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80051aa:	4b3b      	ldr	r3, [pc, #236]	; (8005298 <DHCP_run+0x204>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
		break;
 80051b0:	e06d      	b.n	800528e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80051b2:	f000 f889 	bl	80052c8 <check_DHCP_timeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	71fb      	strb	r3, [r7, #7]
		break;
 80051ba:	e068      	b.n	800528e <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80051bc:	2304      	movs	r3, #4
 80051be:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <DHCP_run+0x21c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d060      	beq.n	800528c <DHCP_run+0x1f8>
 80051ca:	4b39      	ldr	r3, [pc, #228]	; (80052b0 <DHCP_run+0x21c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	085a      	lsrs	r2, r3, #1
 80051d0:	4b38      	ldr	r3, [pc, #224]	; (80052b4 <DHCP_run+0x220>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d259      	bcs.n	800528c <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 80051dc:	4b30      	ldr	r3, [pc, #192]	; (80052a0 <DHCP_run+0x20c>)
 80051de:	781a      	ldrb	r2, [r3, #0]
 80051e0:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <DHCP_run+0x224>)
 80051e2:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 80051e4:	4b2e      	ldr	r3, [pc, #184]	; (80052a0 <DHCP_run+0x20c>)
 80051e6:	785a      	ldrb	r2, [r3, #1]
 80051e8:	4b33      	ldr	r3, [pc, #204]	; (80052b8 <DHCP_run+0x224>)
 80051ea:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 80051ec:	4b2c      	ldr	r3, [pc, #176]	; (80052a0 <DHCP_run+0x20c>)
 80051ee:	789a      	ldrb	r2, [r3, #2]
 80051f0:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <DHCP_run+0x224>)
 80051f2:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 80051f4:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <DHCP_run+0x20c>)
 80051f6:	78da      	ldrb	r2, [r3, #3]
 80051f8:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <DHCP_run+0x224>)
 80051fa:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 80051fc:	4b2f      	ldr	r3, [pc, #188]	; (80052bc <DHCP_run+0x228>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <DHCP_run+0x228>)
 8005204:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8005206:	f7ff f997 	bl	8004538 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 800520a:	f000 f967 	bl	80054dc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800520e:	4b22      	ldr	r3, [pc, #136]	; (8005298 <DHCP_run+0x204>)
 8005210:	2204      	movs	r2, #4
 8005212:	701a      	strb	r2, [r3, #0]
			}
		break;
 8005214:	e03a      	b.n	800528c <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8005216:	2304      	movs	r3, #4
 8005218:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 800521a:	79bb      	ldrb	r3, [r7, #6]
 800521c:	2b05      	cmp	r3, #5
 800521e:	d125      	bne.n	800526c <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 8005220:	4b27      	ldr	r3, [pc, #156]	; (80052c0 <DHCP_run+0x22c>)
 8005222:	2200      	movs	r2, #0
 8005224:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <DHCP_run+0x224>)
 8005228:	781a      	ldrb	r2, [r3, #0]
 800522a:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <DHCP_run+0x20c>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	429a      	cmp	r2, r3
 8005230:	d111      	bne.n	8005256 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8005232:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <DHCP_run+0x224>)
 8005234:	785a      	ldrb	r2, [r3, #1]
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <DHCP_run+0x20c>)
 8005238:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 800523a:	429a      	cmp	r2, r3
 800523c:	d10b      	bne.n	8005256 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <DHCP_run+0x224>)
 8005240:	789a      	ldrb	r2, [r3, #2]
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <DHCP_run+0x20c>)
 8005244:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d105      	bne.n	8005256 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 800524a:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <DHCP_run+0x224>)
 800524c:	78da      	ldrb	r2, [r3, #3]
 800524e:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <DHCP_run+0x20c>)
 8005250:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d004      	beq.n	8005260 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8005256:	2303      	movs	r3, #3
 8005258:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 800525a:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <DHCP_run+0x230>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 8005260:	f000 f93c 	bl	80054dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8005264:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <DHCP_run+0x204>)
 8005266:	2203      	movs	r2, #3
 8005268:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 800526a:	e010      	b.n	800528e <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 800526c:	79bb      	ldrb	r3, [r7, #6]
 800526e:	2b06      	cmp	r3, #6
 8005270:	d105      	bne.n	800527e <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 8005272:	f000 f933 	bl	80054dc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8005276:	4b08      	ldr	r3, [pc, #32]	; (8005298 <DHCP_run+0x204>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
	   	break;
 800527c:	e007      	b.n	800528e <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800527e:	f000 f823 	bl	80052c8 <check_DHCP_timeout>
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
	   	break;
 8005286:	e002      	b.n	800528e <DHCP_run+0x1fa>
		default :
   		break;
 8005288:	bf00      	nop
 800528a:	e000      	b.n	800528e <DHCP_run+0x1fa>
		break;
 800528c:	bf00      	nop
	}

	return ret;
 800528e:	79fb      	ldrb	r3, [r7, #7]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000660 	.word	0x20000660
 800529c:	20000644 	.word	0x20000644
 80052a0:	20000650 	.word	0x20000650
 80052a4:	2000066c 	.word	0x2000066c
 80052a8:	2000011c 	.word	0x2000011c
 80052ac:	20000124 	.word	0x20000124
 80052b0:	2000010c 	.word	0x2000010c
 80052b4:	20000664 	.word	0x20000664
 80052b8:	2000064c 	.word	0x2000064c
 80052bc:	20000668 	.word	0x20000668
 80052c0:	20000661 	.word	0x20000661
 80052c4:	20000120 	.word	0x20000120

080052c8 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80052ce:	2301      	movs	r3, #1
 80052d0:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80052d2:	4b29      	ldr	r3, [pc, #164]	; (8005378 <check_DHCP_timeout+0xb0>)
 80052d4:	f993 3000 	ldrsb.w	r3, [r3]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	dc2d      	bgt.n	8005338 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <check_DHCP_timeout+0xb4>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <check_DHCP_timeout+0xb8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d242      	bcs.n	800536e <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 80052e8:	4b26      	ldr	r3, [pc, #152]	; (8005384 <check_DHCP_timeout+0xbc>)
 80052ea:	f993 3000 	ldrsb.w	r3, [r3]
 80052ee:	2b04      	cmp	r3, #4
 80052f0:	d00c      	beq.n	800530c <check_DHCP_timeout+0x44>
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	dc0d      	bgt.n	8005312 <check_DHCP_timeout+0x4a>
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d002      	beq.n	8005300 <check_DHCP_timeout+0x38>
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d003      	beq.n	8005306 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 80052fe:	e008      	b.n	8005312 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 8005300:	f7fe ffb6 	bl	8004270 <send_DHCP_DISCOVER>
				break;
 8005304:	e006      	b.n	8005314 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8005306:	f7ff f917 	bl	8004538 <send_DHCP_REQUEST>
				break;
 800530a:	e003      	b.n	8005314 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 800530c:	f7ff f914 	bl	8004538 <send_DHCP_REQUEST>
				break;
 8005310:	e000      	b.n	8005314 <check_DHCP_timeout+0x4c>
				break;
 8005312:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8005314:	4b1a      	ldr	r3, [pc, #104]	; (8005380 <check_DHCP_timeout+0xb8>)
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 800531a:	4b19      	ldr	r3, [pc, #100]	; (8005380 <check_DHCP_timeout+0xb8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330a      	adds	r3, #10
 8005320:	4a16      	ldr	r2, [pc, #88]	; (800537c <check_DHCP_timeout+0xb4>)
 8005322:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <check_DHCP_timeout+0xb0>)
 8005326:	f993 3000 	ldrsb.w	r3, [r3]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	3301      	adds	r3, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	b25a      	sxtb	r2, r3
 8005332:	4b11      	ldr	r3, [pc, #68]	; (8005378 <check_DHCP_timeout+0xb0>)
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e01a      	b.n	800536e <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8005338:	4b12      	ldr	r3, [pc, #72]	; (8005384 <check_DHCP_timeout+0xbc>)
 800533a:	f993 3000 	ldrsb.w	r3, [r3]
 800533e:	2b04      	cmp	r3, #4
 8005340:	d00c      	beq.n	800535c <check_DHCP_timeout+0x94>
 8005342:	2b04      	cmp	r3, #4
 8005344:	dc10      	bgt.n	8005368 <check_DHCP_timeout+0xa0>
 8005346:	2b01      	cmp	r3, #1
 8005348:	d002      	beq.n	8005350 <check_DHCP_timeout+0x88>
 800534a:	2b02      	cmp	r3, #2
 800534c:	d006      	beq.n	800535c <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800534e:	e00b      	b.n	8005368 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 8005350:	4b0c      	ldr	r3, [pc, #48]	; (8005384 <check_DHCP_timeout+0xbc>)
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8005356:	2300      	movs	r3, #0
 8005358:	71fb      	strb	r3, [r7, #7]
				break;
 800535a:	e006      	b.n	800536a <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 800535c:	f7fe ff88 	bl	8004270 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <check_DHCP_timeout+0xbc>)
 8005362:	2201      	movs	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
				break;
 8005366:	e000      	b.n	800536a <check_DHCP_timeout+0xa2>
				break;
 8005368:	bf00      	nop
		}
		reset_DHCP_timeout();
 800536a:	f000 f8b7 	bl	80054dc <reset_DHCP_timeout>
	}
	return ret;
 800536e:	79fb      	ldrb	r3, [r7, #7]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	20000661 	.word	0x20000661
 800537c:	20000110 	.word	0x20000110
 8005380:	20000664 	.word	0x20000664
 8005384:	20000660 	.word	0x20000660

08005388 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800538e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8005392:	f7fe fb41 	bl	8003a18 <WIZCHIP_READ>
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 800539a:	2103      	movs	r1, #3
 800539c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80053a0:	f7fe fb86 	bl	8003ab0 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80053a4:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <check_DHCP_leasedIP+0x6c>)
 80053a6:	7818      	ldrb	r0, [r3, #0]
 80053a8:	f241 3388 	movw	r3, #5000	; 0x1388
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <check_DHCP_leasedIP+0x70>)
 80053b0:	2211      	movs	r2, #17
 80053b2:	4912      	ldr	r1, [pc, #72]	; (80053fc <check_DHCP_leasedIP+0x74>)
 80053b4:	f000 fcd0 	bl	8005d58 <sendto>
 80053b8:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	4619      	mov	r1, r3
 80053be:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80053c2:	f7fe fb75 	bl	8003ab0 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	f113 0f0d 	cmn.w	r3, #13
 80053cc:	d101      	bne.n	80053d2 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e00c      	b.n	80053ec <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80053d2:	f7ff fb3b 	bl	8004a4c <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <check_DHCP_leasedIP+0x78>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80053dc:	bf00      	nop
 80053de:	4b08      	ldr	r3, [pc, #32]	; (8005400 <check_DHCP_leasedIP+0x78>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d9f9      	bls.n	80053de <check_DHCP_leasedIP+0x56>

		return 0;
 80053ea:	2300      	movs	r3, #0
	}
}	
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	20000644 	.word	0x20000644
 80053f8:	20000650 	.word	0x20000650
 80053fc:	0800cffc 	.word	0x0800cffc
 8005400:	20000664 	.word	0x20000664

08005404 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8005414:	2206      	movs	r2, #6
 8005416:	492b      	ldr	r1, [pc, #172]	; (80054c4 <DHCP_init+0xc0>)
 8005418:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800541c:	f7fe fb96 	bl	8003b4c <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 8005420:	4b28      	ldr	r3, [pc, #160]	; (80054c4 <DHCP_init+0xc0>)
 8005422:	781a      	ldrb	r2, [r3, #0]
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <DHCP_init+0xc0>)
 8005426:	785b      	ldrb	r3, [r3, #1]
 8005428:	4313      	orrs	r3, r2
 800542a:	b2da      	uxtb	r2, r3
 800542c:	4b25      	ldr	r3, [pc, #148]	; (80054c4 <DHCP_init+0xc0>)
 800542e:	789b      	ldrb	r3, [r3, #2]
 8005430:	4313      	orrs	r3, r2
 8005432:	b2da      	uxtb	r2, r3
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <DHCP_init+0xc0>)
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	4313      	orrs	r3, r2
 800543a:	b2da      	uxtb	r2, r3
 800543c:	4b21      	ldr	r3, [pc, #132]	; (80054c4 <DHCP_init+0xc0>)
 800543e:	791b      	ldrb	r3, [r3, #4]
 8005440:	4313      	orrs	r3, r2
 8005442:	b2da      	uxtb	r2, r3
 8005444:	4b1f      	ldr	r3, [pc, #124]	; (80054c4 <DHCP_init+0xc0>)
 8005446:	795b      	ldrb	r3, [r3, #5]
 8005448:	4313      	orrs	r3, r2
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d117      	bne.n	8005480 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 8005450:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <DHCP_init+0xc0>)
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8005456:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <DHCP_init+0xc0>)
 8005458:	2208      	movs	r2, #8
 800545a:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 800545c:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <DHCP_init+0xc0>)
 800545e:	22dc      	movs	r2, #220	; 0xdc
 8005460:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 8005462:	4b18      	ldr	r3, [pc, #96]	; (80054c4 <DHCP_init+0xc0>)
 8005464:	2200      	movs	r2, #0
 8005466:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8005468:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <DHCP_init+0xc0>)
 800546a:	2200      	movs	r2, #0
 800546c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <DHCP_init+0xc0>)
 8005470:	2200      	movs	r2, #0
 8005472:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 8005474:	2206      	movs	r2, #6
 8005476:	4913      	ldr	r1, [pc, #76]	; (80054c4 <DHCP_init+0xc0>)
 8005478:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800547c:	f7fe fbc6 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8005480:	4a11      	ldr	r2, [pc, #68]	; (80054c8 <DHCP_init+0xc4>)
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 8005486:	4a11      	ldr	r2, [pc, #68]	; (80054cc <DHCP_init+0xc8>)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <DHCP_init+0xcc>)
 800548e:	4a11      	ldr	r2, [pc, #68]	; (80054d4 <DHCP_init+0xd0>)
 8005490:	601a      	str	r2, [r3, #0]

	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	2204      	movs	r2, #4
 8005498:	4619      	mov	r1, r3
 800549a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800549e:	f7fe fbb5 	bl	8003c0c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	2204      	movs	r2, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80054ae:	f7fe fbad 	bl	8003c0c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 80054b2:	f000 f813 	bl	80054dc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 80054b6:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <DHCP_init+0xd4>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
}
 80054bc:	bf00      	nop
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000670 	.word	0x20000670
 80054c8:	20000644 	.word	0x20000644
 80054cc:	2000066c 	.word	0x2000066c
 80054d0:	20000668 	.word	0x20000668
 80054d4:	12345678 	.word	0x12345678
 80054d8:	20000660 	.word	0x20000660

080054dc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <reset_DHCP_timeout+0x20>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80054e6:	4b06      	ldr	r3, [pc, #24]	; (8005500 <reset_DHCP_timeout+0x24>)
 80054e8:	220a      	movs	r2, #10
 80054ea:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <reset_DHCP_timeout+0x28>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	701a      	strb	r2, [r3, #0]
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	20000664 	.word	0x20000664
 8005500:	20000110 	.word	0x20000110
 8005504:	20000661 	.word	0x20000661

08005508 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8005512:	79fb      	ldrb	r3, [r7, #7]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	2b09      	cmp	r3, #9
 800551e:	d803      	bhi.n	8005528 <NibbleToHex+0x20>
    return nibble + '0';
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	3330      	adds	r3, #48	; 0x30
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e002      	b.n	800552e <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	3337      	adds	r3, #55	; 0x37
 800552c:	b2db      	uxtb	r3, r3
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
	...

0800553c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	4604      	mov	r4, r0
 8005544:	4608      	mov	r0, r1
 8005546:	4611      	mov	r1, r2
 8005548:	461a      	mov	r2, r3
 800554a:	4623      	mov	r3, r4
 800554c:	71fb      	strb	r3, [r7, #7]
 800554e:	4603      	mov	r3, r0
 8005550:	71bb      	strb	r3, [r7, #6]
 8005552:	460b      	mov	r3, r1
 8005554:	80bb      	strh	r3, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800555a:	79fb      	ldrb	r3, [r7, #7]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d902      	bls.n	8005566 <socket+0x2a>
 8005560:	f04f 33ff 	mov.w	r3, #4294967295
 8005564:	e0f0      	b.n	8005748 <socket+0x20c>
	switch(protocol)
 8005566:	79bb      	ldrb	r3, [r7, #6]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d005      	beq.n	8005578 <socket+0x3c>
 800556c:	2b00      	cmp	r3, #0
 800556e:	dd11      	ble.n	8005594 <socket+0x58>
 8005570:	3b02      	subs	r3, #2
 8005572:	2b02      	cmp	r3, #2
 8005574:	d80e      	bhi.n	8005594 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8005576:	e011      	b.n	800559c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	2204      	movs	r2, #4
 800557e:	4619      	mov	r1, r3
 8005580:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8005584:	f7fe fae2 	bl	8003b4c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d105      	bne.n	800559a <socket+0x5e>
 800558e:	f06f 0302 	mvn.w	r3, #2
 8005592:	e0d9      	b.n	8005748 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8005594:	f06f 0304 	mvn.w	r3, #4
 8005598:	e0d6      	b.n	8005748 <socket+0x20c>
	    break;
 800559a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d002      	beq.n	80055ac <socket+0x70>
 80055a6:	f06f 0305 	mvn.w	r3, #5
 80055aa:	e0cd      	b.n	8005748 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d028      	beq.n	8005604 <socket+0xc8>
	{
   	switch(protocol)
 80055b2:	79bb      	ldrb	r3, [r7, #6]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d002      	beq.n	80055be <socket+0x82>
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d008      	beq.n	80055ce <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80055bc:	e022      	b.n	8005604 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80055be:	78fb      	ldrb	r3, [r7, #3]
 80055c0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11a      	bne.n	80055fe <socket+0xc2>
 80055c8:	f06f 0305 	mvn.w	r3, #5
 80055cc:	e0bc      	b.n	8005748 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	f003 0320 	and.w	r3, r3, #32
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d006      	beq.n	80055e6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80055d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	db02      	blt.n	80055e6 <socket+0xaa>
 80055e0:	f06f 0305 	mvn.w	r3, #5
 80055e4:	e0b0      	b.n	8005748 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80055f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	db04      	blt.n	8005602 <socket+0xc6>
 80055f8:	f06f 0305 	mvn.w	r3, #5
 80055fc:	e0a4      	b.n	8005748 <socket+0x20c>
   	      break;
 80055fe:	bf00      	nop
 8005600:	e000      	b.n	8005604 <socket+0xc8>
   	      break;
 8005602:	bf00      	nop
   	}
   }
	close(sn);
 8005604:	79fb      	ldrb	r3, [r7, #7]
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f8ac 	bl	8005764 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	3301      	adds	r3, #1
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4618      	mov	r0, r3
 8005616:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800561a:	f023 030f 	bic.w	r3, r3, #15
 800561e:	b25a      	sxtb	r2, r3
 8005620:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005624:	4313      	orrs	r3, r2
 8005626:	b25b      	sxtb	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	4619      	mov	r1, r3
 800562c:	f7fe fa40 	bl	8003ab0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8005630:	88bb      	ldrh	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d110      	bne.n	8005658 <socket+0x11c>
	{
	   port = sock_any_port++;
 8005636:	4b46      	ldr	r3, [pc, #280]	; (8005750 <socket+0x214>)
 8005638:	881b      	ldrh	r3, [r3, #0]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	b291      	uxth	r1, r2
 800563e:	4a44      	ldr	r2, [pc, #272]	; (8005750 <socket+0x214>)
 8005640:	8011      	strh	r1, [r2, #0]
 8005642:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8005644:	4b42      	ldr	r3, [pc, #264]	; (8005750 <socket+0x214>)
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800564c:	4293      	cmp	r3, r2
 800564e:	d103      	bne.n	8005658 <socket+0x11c>
 8005650:	4b3f      	ldr	r3, [pc, #252]	; (8005750 <socket+0x214>)
 8005652:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8005656:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8005658:	79fb      	ldrb	r3, [r7, #7]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	3301      	adds	r3, #1
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005664:	461a      	mov	r2, r3
 8005666:	88bb      	ldrh	r3, [r7, #4]
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	b29b      	uxth	r3, r3
 800566c:	b2db      	uxtb	r3, r3
 800566e:	4619      	mov	r1, r3
 8005670:	4610      	mov	r0, r2
 8005672:	f7fe fa1d 	bl	8003ab0 <WIZCHIP_WRITE>
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	3301      	adds	r3, #1
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005682:	461a      	mov	r2, r3
 8005684:	88bb      	ldrh	r3, [r7, #4]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4619      	mov	r1, r3
 800568a:	4610      	mov	r0, r2
 800568c:	f7fe fa10 	bl	8003ab0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	3301      	adds	r3, #1
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800569c:	2101      	movs	r1, #1
 800569e:	4618      	mov	r0, r3
 80056a0:	f7fe fa06 	bl	8003ab0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80056a4:	bf00      	nop
 80056a6:	79fb      	ldrb	r3, [r7, #7]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	3301      	adds	r3, #1
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fe f9b0 	bl	8003a18 <WIZCHIP_READ>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f3      	bne.n	80056a6 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	2201      	movs	r2, #1
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	b21b      	sxth	r3, r3
 80056c8:	43db      	mvns	r3, r3
 80056ca:	b21a      	sxth	r2, r3
 80056cc:	4b21      	ldr	r3, [pc, #132]	; (8005754 <socket+0x218>)
 80056ce:	881b      	ldrh	r3, [r3, #0]
 80056d0:	b21b      	sxth	r3, r3
 80056d2:	4013      	ands	r3, r2
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	4b1e      	ldr	r3, [pc, #120]	; (8005754 <socket+0x218>)
 80056da:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 0201 	and.w	r2, r3, #1
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	b21a      	sxth	r2, r3
 80056ea:	4b1a      	ldr	r3, [pc, #104]	; (8005754 <socket+0x218>)
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	4b17      	ldr	r3, [pc, #92]	; (8005754 <socket+0x218>)
 80056f8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80056fa:	79fb      	ldrb	r3, [r7, #7]
 80056fc:	2201      	movs	r2, #1
 80056fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005702:	b21b      	sxth	r3, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	b21a      	sxth	r2, r3
 8005708:	4b13      	ldr	r3, [pc, #76]	; (8005758 <socket+0x21c>)
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	b21b      	sxth	r3, r3
 800570e:	4013      	ands	r3, r2
 8005710:	b21b      	sxth	r3, r3
 8005712:	b29a      	uxth	r2, r3
 8005714:	4b10      	ldr	r3, [pc, #64]	; (8005758 <socket+0x21c>)
 8005716:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8005718:	79fb      	ldrb	r3, [r7, #7]
 800571a:	4a10      	ldr	r2, [pc, #64]	; (800575c <socket+0x220>)
 800571c:	2100      	movs	r1, #0
 800571e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8005722:	79fb      	ldrb	r3, [r7, #7]
 8005724:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <socket+0x224>)
 8005726:	2100      	movs	r1, #0
 8005728:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800572a:	bf00      	nop
 800572c:	79fb      	ldrb	r3, [r7, #7]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	3301      	adds	r3, #1
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005738:	4618      	mov	r0, r3
 800573a:	f7fe f96d 	bl	8003a18 <WIZCHIP_READ>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f3      	beq.n	800572c <socket+0x1f0>
   return (int8_t)sn;
 8005744:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	bd90      	pop	{r4, r7, pc}
 8005750:	20000128 	.word	0x20000128
 8005754:	20000676 	.word	0x20000676
 8005758:	20000678 	.word	0x20000678
 800575c:	2000067c 	.word	0x2000067c
 8005760:	2000068c 	.word	0x2000068c

08005764 <close>:

int8_t close(uint8_t sn)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d902      	bls.n	800577a <close+0x16>
 8005774:	f04f 33ff 	mov.w	r3, #4294967295
 8005778:	e055      	b.n	8005826 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	3301      	adds	r3, #1
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005786:	2110      	movs	r1, #16
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe f991 	bl	8003ab0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800578e:	bf00      	nop
 8005790:	79fb      	ldrb	r3, [r7, #7]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	3301      	adds	r3, #1
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe f93b 	bl	8003a18 <WIZCHIP_READ>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1f3      	bne.n	8005790 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80057a8:	79fb      	ldrb	r3, [r7, #7]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	3301      	adds	r3, #1
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80057b4:	211f      	movs	r1, #31
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe f97a 	bl	8003ab0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	2201      	movs	r2, #1
 80057c0:	fa02 f303 	lsl.w	r3, r2, r3
 80057c4:	b21b      	sxth	r3, r3
 80057c6:	43db      	mvns	r3, r3
 80057c8:	b21a      	sxth	r2, r3
 80057ca:	4b19      	ldr	r3, [pc, #100]	; (8005830 <close+0xcc>)
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	b21b      	sxth	r3, r3
 80057d0:	4013      	ands	r3, r2
 80057d2:	b21b      	sxth	r3, r3
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	4b16      	ldr	r3, [pc, #88]	; (8005830 <close+0xcc>)
 80057d8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	2201      	movs	r2, #1
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	b21b      	sxth	r3, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	b21a      	sxth	r2, r3
 80057e8:	4b12      	ldr	r3, [pc, #72]	; (8005834 <close+0xd0>)
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b21b      	sxth	r3, r3
 80057ee:	4013      	ands	r3, r2
 80057f0:	b21b      	sxth	r3, r3
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <close+0xd0>)
 80057f6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	4a0f      	ldr	r2, [pc, #60]	; (8005838 <close+0xd4>)
 80057fc:	2100      	movs	r1, #0
 80057fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8005802:	79fb      	ldrb	r3, [r7, #7]
 8005804:	4a0d      	ldr	r2, [pc, #52]	; (800583c <close+0xd8>)
 8005806:	2100      	movs	r1, #0
 8005808:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800580a:	bf00      	nop
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	3301      	adds	r3, #1
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe f8fd 	bl	8003a18 <WIZCHIP_READ>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d1f3      	bne.n	800580c <close+0xa8>
	return SOCK_OK;
 8005824:	2301      	movs	r3, #1
}
 8005826:	4618      	mov	r0, r3
 8005828:	3708      	adds	r7, #8
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000676 	.word	0x20000676
 8005834:	20000678 	.word	0x20000678
 8005838:	2000067c 	.word	0x2000067c
 800583c:	2000068c 	.word	0x2000068c

08005840 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	4603      	mov	r3, r0
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	71fb      	strb	r3, [r7, #7]
 800584c:	4613      	mov	r3, r2
 800584e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8005850:	79fb      	ldrb	r3, [r7, #7]
 8005852:	2b08      	cmp	r3, #8
 8005854:	d902      	bls.n	800585c <connect+0x1c>
 8005856:	f04f 33ff 	mov.w	r3, #4294967295
 800585a:	e0c6      	b.n	80059ea <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800585c:	79fb      	ldrb	r3, [r7, #7]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	3301      	adds	r3, #1
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe f8d7 	bl	8003a18 <WIZCHIP_READ>
 800586a:	4603      	mov	r3, r0
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	2b01      	cmp	r3, #1
 8005872:	d002      	beq.n	800587a <connect+0x3a>
 8005874:	f06f 0304 	mvn.w	r3, #4
 8005878:	e0b7      	b.n	80059ea <connect+0x1aa>
   CHECK_SOCKINIT();
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	3301      	adds	r3, #1
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe f8c6 	bl	8003a18 <WIZCHIP_READ>
 800588c:	4603      	mov	r3, r0
 800588e:	2b13      	cmp	r3, #19
 8005890:	d002      	beq.n	8005898 <connect+0x58>
 8005892:	f06f 0302 	mvn.w	r3, #2
 8005896:	e0a8      	b.n	80059ea <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	3201      	adds	r2, #1
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	4413      	add	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	021b      	lsls	r3, r3, #8
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	3202      	adds	r2, #2
 80058b4:	7812      	ldrb	r2, [r2, #0]
 80058b6:	4413      	add	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	021b      	lsls	r3, r3, #8
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	3203      	adds	r2, #3
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	4413      	add	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ce:	d002      	beq.n	80058d6 <connect+0x96>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <connect+0x9c>
 80058d6:	f06f 030b 	mvn.w	r3, #11
 80058da:	e086      	b.n	80059ea <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80058dc:	88bb      	ldrh	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <connect+0xa8>
 80058e2:	f06f 030a 	mvn.w	r3, #10
 80058e6:	e080      	b.n	80059ea <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80058e8:	79fb      	ldrb	r3, [r7, #7]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	3301      	adds	r3, #1
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80058f4:	2204      	movs	r2, #4
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe f987 	bl	8003c0c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	3301      	adds	r3, #1
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590a:	461a      	mov	r2, r3
 800590c:	88bb      	ldrh	r3, [r7, #4]
 800590e:	0a1b      	lsrs	r3, r3, #8
 8005910:	b29b      	uxth	r3, r3
 8005912:	b2db      	uxtb	r3, r3
 8005914:	4619      	mov	r1, r3
 8005916:	4610      	mov	r0, r2
 8005918:	f7fe f8ca 	bl	8003ab0 <WIZCHIP_WRITE>
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	3301      	adds	r3, #1
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005928:	461a      	mov	r2, r3
 800592a:	88bb      	ldrh	r3, [r7, #4]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7fe f8bd 	bl	8003ab0 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	3301      	adds	r3, #1
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005942:	2104      	movs	r1, #4
 8005944:	4618      	mov	r0, r3
 8005946:	f7fe f8b3 	bl	8003ab0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800594a:	bf00      	nop
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	3301      	adds	r3, #1
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe f85d 	bl	8003a18 <WIZCHIP_READ>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f3      	bne.n	800594c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005964:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <connect+0x1b4>)
 8005966:	881b      	ldrh	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	fa42 f303 	asr.w	r3, r2, r3
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d02b      	beq.n	80059d0 <connect+0x190>
 8005978:	2300      	movs	r3, #0
 800597a:	e036      	b.n	80059ea <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	3301      	adds	r3, #1
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005988:	4618      	mov	r0, r3
 800598a:	f7fe f845 	bl	8003a18 <WIZCHIP_READ>
 800598e:	4603      	mov	r3, r0
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00c      	beq.n	80059b2 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	3301      	adds	r3, #1
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80059a4:	2108      	movs	r1, #8
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe f882 	bl	8003ab0 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80059ac:	f06f 030c 	mvn.w	r3, #12
 80059b0:	e01b      	b.n	80059ea <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	3301      	adds	r3, #1
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80059be:	4618      	mov	r0, r3
 80059c0:	f7fe f82a 	bl	8003a18 <WIZCHIP_READ>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80059ca:	f06f 0303 	mvn.w	r3, #3
 80059ce:	e00c      	b.n	80059ea <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	3301      	adds	r3, #1
 80059d6:	00db      	lsls	r3, r3, #3
 80059d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe f81b 	bl	8003a18 <WIZCHIP_READ>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b17      	cmp	r3, #23
 80059e6:	d1c9      	bne.n	800597c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80059e8:	2301      	movs	r3, #1
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20000676 	.word	0x20000676

080059f8 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	6039      	str	r1, [r7, #0]
 8005a02:	71fb      	strb	r3, [r7, #7]
 8005a04:	4613      	mov	r3, r2
 8005a06:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8005a10:	79fb      	ldrb	r3, [r7, #7]
 8005a12:	2b08      	cmp	r3, #8
 8005a14:	d902      	bls.n	8005a1c <send+0x24>
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	e0de      	b.n	8005bda <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	3301      	adds	r3, #1
 8005a22:	00db      	lsls	r3, r3, #3
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fd fff7 	bl	8003a18 <WIZCHIP_READ>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d002      	beq.n	8005a3a <send+0x42>
 8005a34:	f06f 0304 	mvn.w	r3, #4
 8005a38:	e0cf      	b.n	8005bda <send+0x1e2>
   CHECK_SOCKDATA();
 8005a3a:	88bb      	ldrh	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <send+0x4e>
 8005a40:	f06f 030d 	mvn.w	r3, #13
 8005a44:	e0c9      	b.n	8005bda <send+0x1e2>
   tmp = getSn_SR(sn);
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fd ffe0 	bl	8003a18 <WIZCHIP_READ>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b17      	cmp	r3, #23
 8005a60:	d005      	beq.n	8005a6e <send+0x76>
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2b1c      	cmp	r3, #28
 8005a66:	d002      	beq.n	8005a6e <send+0x76>
 8005a68:	f06f 0306 	mvn.w	r3, #6
 8005a6c:	e0b5      	b.n	8005bda <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8005a6e:	4b5d      	ldr	r3, [pc, #372]	; (8005be4 <send+0x1ec>)
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	79fb      	ldrb	r3, [r7, #7]
 8005a76:	fa42 f303 	asr.w	r3, r2, r3
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d039      	beq.n	8005af6 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	3301      	adds	r3, #1
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fd ffc2 	bl	8003a18 <WIZCHIP_READ>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	f003 0310 	and.w	r3, r3, #16
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d019      	beq.n	8005ada <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005aa6:	79fb      	ldrb	r3, [r7, #7]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	3301      	adds	r3, #1
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ab2:	2110      	movs	r1, #16
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fd fffb 	bl	8003ab0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	2201      	movs	r2, #1
 8005abe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac2:	b21b      	sxth	r3, r3
 8005ac4:	43db      	mvns	r3, r3
 8005ac6:	b21a      	sxth	r2, r3
 8005ac8:	4b46      	ldr	r3, [pc, #280]	; (8005be4 <send+0x1ec>)
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b21b      	sxth	r3, r3
 8005ace:	4013      	ands	r3, r2
 8005ad0:	b21b      	sxth	r3, r3
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	4b43      	ldr	r3, [pc, #268]	; (8005be4 <send+0x1ec>)
 8005ad6:	801a      	strh	r2, [r3, #0]
 8005ad8:	e00d      	b.n	8005af6 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d006      	beq.n	8005af2 <send+0xfa>
      {
         close(sn);
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fe3c 	bl	8005764 <close>
         return SOCKERR_TIMEOUT;
 8005aec:	f06f 030c 	mvn.w	r3, #12
 8005af0:	e073      	b.n	8005bda <send+0x1e2>
      }
      else return SOCK_BUSY;
 8005af2:	2300      	movs	r3, #0
 8005af4:	e071      	b.n	8005bda <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8005af6:	79fb      	ldrb	r3, [r7, #7]
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	3301      	adds	r3, #1
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fd ff88 	bl	8003a18 <WIZCHIP_READ>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005b10:	88ba      	ldrh	r2, [r7, #4]
 8005b12:	89bb      	ldrh	r3, [r7, #12]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d901      	bls.n	8005b1c <send+0x124>
 8005b18:	89bb      	ldrh	r3, [r7, #12]
 8005b1a:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fe f8d4 	bl	8003ccc <getSn_TX_FSR>
 8005b24:	4603      	mov	r3, r0
 8005b26:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005b28:	79fb      	ldrb	r3, [r7, #7]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fd ff6f 	bl	8003a18 <WIZCHIP_READ>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b17      	cmp	r3, #23
 8005b42:	d009      	beq.n	8005b58 <send+0x160>
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b1c      	cmp	r3, #28
 8005b48:	d006      	beq.n	8005b58 <send+0x160>
      {
         close(sn);
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f7ff fe09 	bl	8005764 <close>
         return SOCKERR_SOCKSTATUS;
 8005b52:	f06f 0306 	mvn.w	r3, #6
 8005b56:	e040      	b.n	8005bda <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005b58:	4b23      	ldr	r3, [pc, #140]	; (8005be8 <send+0x1f0>)
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	fa42 f303 	asr.w	r3, r2, r3
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <send+0x180>
 8005b6c:	88ba      	ldrh	r2, [r7, #4]
 8005b6e:	89bb      	ldrh	r3, [r7, #12]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d901      	bls.n	8005b78 <send+0x180>
 8005b74:	2300      	movs	r3, #0
 8005b76:	e030      	b.n	8005bda <send+0x1e2>
      if(len <= freesize) break;
 8005b78:	88ba      	ldrh	r2, [r7, #4]
 8005b7a:	89bb      	ldrh	r3, [r7, #12]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d900      	bls.n	8005b82 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8005b80:	e7cc      	b.n	8005b1c <send+0x124>
      if(len <= freesize) break;
 8005b82:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8005b84:	88ba      	ldrh	r2, [r7, #4]
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fe f934 	bl	8003df8 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	3301      	adds	r3, #1
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005b9c:	2120      	movs	r1, #32
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fd ff86 	bl	8003ab0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005ba4:	bf00      	nop
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	3301      	adds	r3, #1
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fd ff30 	bl	8003a18 <WIZCHIP_READ>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1f3      	bne.n	8005ba6 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	b21a      	sxth	r2, r3
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <send+0x1ec>)
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b21b      	sxth	r3, r3
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b21b      	sxth	r3, r3
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	4b03      	ldr	r3, [pc, #12]	; (8005be4 <send+0x1ec>)
 8005bd6:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005bd8:	88bb      	ldrh	r3, [r7, #4]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000678 	.word	0x20000678
 8005be8:	20000676 	.word	0x20000676

08005bec <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	6039      	str	r1, [r7, #0]
 8005bf6:	71fb      	strb	r3, [r7, #7]
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d902      	bls.n	8005c10 <recv+0x24>
 8005c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0e:	e09c      	b.n	8005d4a <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	3301      	adds	r3, #1
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fd fefd 	bl	8003a18 <WIZCHIP_READ>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	f003 030f 	and.w	r3, r3, #15
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d002      	beq.n	8005c2e <recv+0x42>
 8005c28:	f06f 0304 	mvn.w	r3, #4
 8005c2c:	e08d      	b.n	8005d4a <recv+0x15e>
   CHECK_SOCKDATA();
 8005c2e:	88bb      	ldrh	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <recv+0x4e>
 8005c34:	f06f 030d 	mvn.w	r3, #13
 8005c38:	e087      	b.n	8005d4a <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	3301      	adds	r3, #1
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fd fee6 	bl	8003a18 <WIZCHIP_READ>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8005c54:	89ba      	ldrh	r2, [r7, #12]
 8005c56:	88bb      	ldrh	r3, [r7, #4]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d201      	bcs.n	8005c60 <recv+0x74>
 8005c5c:	89bb      	ldrh	r3, [r7, #12]
 8005c5e:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe f87d 	bl	8003d62 <getSn_RX_RSR>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	3301      	adds	r3, #1
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fd fecd 	bl	8003a18 <WIZCHIP_READ>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8005c82:	7bfb      	ldrb	r3, [r7, #15]
 8005c84:	2b17      	cmp	r3, #23
 8005c86:	d026      	beq.n	8005cd6 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b1c      	cmp	r3, #28
 8005c8c:	d11c      	bne.n	8005cc8 <recv+0xdc>
            {
               if(recvsize != 0) break;
 8005c8e:	89bb      	ldrh	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d133      	bne.n	8005cfc <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005c94:	79fb      	ldrb	r3, [r7, #7]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe f818 	bl	8003ccc <getSn_TX_FSR>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	461c      	mov	r4, r3
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7fd feb3 	bl	8003a18 <WIZCHIP_READ>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	429c      	cmp	r4, r3
 8005cb8:	d10d      	bne.n	8005cd6 <recv+0xea>
               {
                  close(sn);
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fd51 	bl	8005764 <close>
                  return SOCKERR_SOCKSTATUS;
 8005cc2:	f06f 0306 	mvn.w	r3, #6
 8005cc6:	e040      	b.n	8005d4a <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fd4a 	bl	8005764 <close>
               return SOCKERR_SOCKSTATUS;
 8005cd0:	f06f 0306 	mvn.w	r3, #6
 8005cd4:	e039      	b.n	8005d4a <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005cd6:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <recv+0x168>)
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	fa42 f303 	asr.w	r3, r2, r3
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d004      	beq.n	8005cf4 <recv+0x108>
 8005cea:	89bb      	ldrh	r3, [r7, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <recv+0x108>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e02a      	b.n	8005d4a <recv+0x15e>
         if(recvsize != 0) break;
 8005cf4:	89bb      	ldrh	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 8005cfa:	e7b1      	b.n	8005c60 <recv+0x74>
               if(recvsize != 0) break;
 8005cfc:	bf00      	nop
 8005cfe:	e000      	b.n	8005d02 <recv+0x116>
         if(recvsize != 0) break;
 8005d00:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005d02:	89ba      	ldrh	r2, [r7, #12]
 8005d04:	88bb      	ldrh	r3, [r7, #4]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d201      	bcs.n	8005d0e <recv+0x122>
 8005d0a:	89bb      	ldrh	r3, [r7, #12]
 8005d0c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8005d0e:	88ba      	ldrh	r2, [r7, #4]
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe f8cb 	bl	8003eb0 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8005d1a:	79fb      	ldrb	r3, [r7, #7]
 8005d1c:	009b      	lsls	r3, r3, #2
 8005d1e:	3301      	adds	r3, #1
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d26:	2140      	movs	r1, #64	; 0x40
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7fd fec1 	bl	8003ab0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8005d2e:	bf00      	nop
 8005d30:	79fb      	ldrb	r3, [r7, #7]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	3301      	adds	r3, #1
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fd fe6b 	bl	8003a18 <WIZCHIP_READ>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f3      	bne.n	8005d30 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005d48:	88bb      	ldrh	r3, [r7, #4]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd90      	pop	{r4, r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000676 	.word	0x20000676

08005d58 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607b      	str	r3, [r7, #4]
 8005d62:	4603      	mov	r3, r0
 8005d64:	73fb      	strb	r3, [r7, #15]
 8005d66:	4613      	mov	r3, r2
 8005d68:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d902      	bls.n	8005d7e <sendto+0x26>
 8005d78:	f04f 33ff 	mov.w	r3, #4294967295
 8005d7c:	e11b      	b.n	8005fb6 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	3301      	adds	r3, #1
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fd fe46 	bl	8003a18 <WIZCHIP_READ>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	3b02      	subs	r3, #2
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d902      	bls.n	8005d9e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8005d98:	f06f 0304 	mvn.w	r3, #4
 8005d9c:	e10b      	b.n	8005fb6 <sendto+0x25e>
         break;
 8005d9e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005da0:	89bb      	ldrh	r3, [r7, #12]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <sendto+0x54>
 8005da6:	f06f 030d 	mvn.w	r3, #13
 8005daa:	e104      	b.n	8005fb6 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	3201      	adds	r2, #1
 8005dba:	7812      	ldrb	r2, [r2, #0]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	3202      	adds	r2, #2
 8005dc8:	7812      	ldrb	r2, [r2, #0]
 8005dca:	4413      	add	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	021b      	lsls	r3, r3, #8
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	3203      	adds	r2, #3
 8005dd6:	7812      	ldrb	r2, [r2, #0]
 8005dd8:	4413      	add	r3, r2
 8005dda:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10e      	bne.n	8005e00 <sendto+0xa8>
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	3301      	adds	r3, #1
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fd fe14 	bl	8003a18 <WIZCHIP_READ>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f003 0304 	and.w	r3, r3, #4
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d002      	beq.n	8005e00 <sendto+0xa8>
 8005dfa:	f06f 030b 	mvn.w	r3, #11
 8005dfe:	e0da      	b.n	8005fb6 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005e00:	8c3b      	ldrh	r3, [r7, #32]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10e      	bne.n	8005e24 <sendto+0xcc>
 8005e06:	7bfb      	ldrb	r3, [r7, #15]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fd fe02 	bl	8003a18 <WIZCHIP_READ>
 8005e14:	4603      	mov	r3, r0
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d002      	beq.n	8005e24 <sendto+0xcc>
 8005e1e:	f06f 030a 	mvn.w	r3, #10
 8005e22:	e0c8      	b.n	8005fb6 <sendto+0x25e>
   tmp = getSn_SR(sn);
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	3301      	adds	r3, #1
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7fd fdf1 	bl	8003a18 <WIZCHIP_READ>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	2b42      	cmp	r3, #66	; 0x42
 8005e3e:	d008      	beq.n	8005e52 <sendto+0xfa>
 8005e40:	7dfb      	ldrb	r3, [r7, #23]
 8005e42:	2b22      	cmp	r3, #34	; 0x22
 8005e44:	d005      	beq.n	8005e52 <sendto+0xfa>
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
 8005e48:	2b32      	cmp	r3, #50	; 0x32
 8005e4a:	d002      	beq.n	8005e52 <sendto+0xfa>
 8005e4c:	f06f 0306 	mvn.w	r3, #6
 8005e50:	e0b1      	b.n	8005fb6 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	3301      	adds	r3, #1
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005e5e:	2204      	movs	r2, #4
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fd fed2 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e74:	461a      	mov	r2, r3
 8005e76:	8c3b      	ldrh	r3, [r7, #32]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fd fe15 	bl	8003ab0 <WIZCHIP_WRITE>
 8005e86:	7bfb      	ldrb	r3, [r7, #15]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005e92:	461a      	mov	r2, r3
 8005e94:	8c3b      	ldrh	r3, [r7, #32]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	f7fd fe08 	bl	8003ab0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	00db      	lsls	r3, r3, #3
 8005ea8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8005eac:	4618      	mov	r0, r3
 8005eae:	f7fd fdb3 	bl	8003a18 <WIZCHIP_READ>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	029b      	lsls	r3, r3, #10
 8005eb8:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8005eba:	89ba      	ldrh	r2, [r7, #12]
 8005ebc:	8abb      	ldrh	r3, [r7, #20]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d901      	bls.n	8005ec6 <sendto+0x16e>
 8005ec2:	8abb      	ldrh	r3, [r7, #20]
 8005ec4:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fd feff 	bl	8003ccc <getSn_TX_FSR>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fd fd9a 	bl	8003a18 <WIZCHIP_READ>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <sendto+0x198>
 8005eea:	f06f 0303 	mvn.w	r3, #3
 8005eee:	e062      	b.n	8005fb6 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005ef0:	4b33      	ldr	r3, [pc, #204]	; (8005fc0 <sendto+0x268>)
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	fa42 f303 	asr.w	r3, r2, r3
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <sendto+0x1b8>
 8005f04:	89ba      	ldrh	r2, [r7, #12]
 8005f06:	8abb      	ldrh	r3, [r7, #20]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d901      	bls.n	8005f10 <sendto+0x1b8>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	e052      	b.n	8005fb6 <sendto+0x25e>
      if(len <= freesize) break;
 8005f10:	89ba      	ldrh	r2, [r7, #12]
 8005f12:	8abb      	ldrh	r3, [r7, #20]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d900      	bls.n	8005f1a <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8005f18:	e7d5      	b.n	8005ec6 <sendto+0x16e>
      if(len <= freesize) break;
 8005f1a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8005f1c:	89ba      	ldrh	r2, [r7, #12]
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fd ff68 	bl	8003df8 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	00db      	lsls	r3, r3, #3
 8005f30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005f34:	2120      	movs	r1, #32
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fd fdba 	bl	8003ab0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8005f3c:	bf00      	nop
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	3301      	adds	r3, #1
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fd fd64 	bl	8003a18 <WIZCHIP_READ>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f3      	bne.n	8005f3e <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fd fd58 	bl	8003a18 <WIZCHIP_READ>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005f70:	7dfb      	ldrb	r3, [r7, #23]
 8005f72:	f003 0310 	and.w	r3, r3, #16
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	3301      	adds	r3, #1
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005f86:	2110      	movs	r1, #16
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fd91 	bl	8003ab0 <WIZCHIP_WRITE>
         break;
 8005f8e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005f90:	89bb      	ldrh	r3, [r7, #12]
 8005f92:	e010      	b.n	8005fb6 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8005f94:	7dfb      	ldrb	r3, [r7, #23]
 8005f96:	f003 0308 	and.w	r3, r3, #8
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0db      	beq.n	8005f56 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	00db      	lsls	r3, r3, #3
 8005fa6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005faa:	2108      	movs	r1, #8
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fd fd7f 	bl	8003ab0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8005fb2:	f06f 030c 	mvn.w	r3, #12
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000676 	.word	0x20000676

08005fc4 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60b9      	str	r1, [r7, #8]
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	4603      	mov	r3, r0
 8005fd0:	73fb      	strb	r3, [r7, #15]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b08      	cmp	r3, #8
 8005fde:	d902      	bls.n	8005fe6 <recvfrom+0x22>
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	e1d4      	b.n	8006390 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3301      	adds	r3, #1
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fd fd12 	bl	8003a18 <WIZCHIP_READ>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	777b      	strb	r3, [r7, #29]
 8005ff8:	7f7b      	ldrb	r3, [r7, #29]
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	3b02      	subs	r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	d902      	bls.n	800600a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8006004:	f06f 0304 	mvn.w	r3, #4
 8006008:	e1c2      	b.n	8006390 <recvfrom+0x3cc>
         break;
 800600a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800600c:	89bb      	ldrh	r3, [r7, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <recvfrom+0x54>
 8006012:	f06f 030d 	mvn.w	r3, #13
 8006016:	e1bb      	b.n	8006390 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	4a88      	ldr	r2, [pc, #544]	; (800623c <recvfrom+0x278>)
 800601c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d128      	bne.n	8006076 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fd fe9b 	bl	8003d62 <getSn_RX_RSR>
 800602c:	4603      	mov	r3, r0
 800602e:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	3301      	adds	r3, #1
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800603c:	4618      	mov	r0, r3
 800603e:	f7fd fceb 	bl	8003a18 <WIZCHIP_READ>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d102      	bne.n	800604e <recvfrom+0x8a>
 8006048:	f06f 0303 	mvn.w	r3, #3
 800604c:	e1a0      	b.n	8006390 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800604e:	4b7c      	ldr	r3, [pc, #496]	; (8006240 <recvfrom+0x27c>)
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	fa42 f303 	asr.w	r3, r2, r3
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d004      	beq.n	800606c <recvfrom+0xa8>
 8006062:	8bfb      	ldrh	r3, [r7, #30]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <recvfrom+0xa8>
 8006068:	2300      	movs	r3, #0
 800606a:	e191      	b.n	8006390 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 800606c:	8bfb      	ldrh	r3, [r7, #30]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d100      	bne.n	8006074 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8006072:	e7d7      	b.n	8006024 <recvfrom+0x60>
         if(pack_len != 0) break;
 8006074:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8006076:	7f7b      	ldrb	r3, [r7, #29]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	2b04      	cmp	r3, #4
 800607e:	d079      	beq.n	8006174 <recvfrom+0x1b0>
 8006080:	2b04      	cmp	r3, #4
 8006082:	f300 8142 	bgt.w	800630a <recvfrom+0x346>
 8006086:	2b02      	cmp	r3, #2
 8006088:	d003      	beq.n	8006092 <recvfrom+0xce>
 800608a:	2b03      	cmp	r3, #3
 800608c:	f000 80dc 	beq.w	8006248 <recvfrom+0x284>
 8006090:	e13b      	b.n	800630a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	4a69      	ldr	r2, [pc, #420]	; (800623c <recvfrom+0x278>)
 8006096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d152      	bne.n	8006144 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800609e:	f107 0114 	add.w	r1, r7, #20
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	2208      	movs	r2, #8
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fd ff02 	bl	8003eb0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	3301      	adds	r3, #1
 80060b2:	00db      	lsls	r3, r3, #3
 80060b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80060b8:	2140      	movs	r1, #64	; 0x40
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fd fcf8 	bl	8003ab0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80060c0:	bf00      	nop
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	3301      	adds	r3, #1
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fd fca2 	bl	8003a18 <WIZCHIP_READ>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1f3      	bne.n	80060c2 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80060da:	7d3a      	ldrb	r2, [r7, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3301      	adds	r3, #1
 80060e4:	7d7a      	ldrb	r2, [r7, #21]
 80060e6:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3302      	adds	r3, #2
 80060ec:	7dba      	ldrb	r2, [r7, #22]
 80060ee:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3303      	adds	r3, #3
 80060f4:	7dfa      	ldrb	r2, [r7, #23]
 80060f6:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80060f8:	7e3b      	ldrb	r3, [r7, #24]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	b29a      	uxth	r2, r3
 8006108:	7e7b      	ldrb	r3, [r7, #25]
 800610a:	b29b      	uxth	r3, r3
 800610c:	4413      	add	r3, r2
 800610e:	b29a      	uxth	r2, r3
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8006114:	7eba      	ldrb	r2, [r7, #26]
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	b291      	uxth	r1, r2
 800611a:	4a48      	ldr	r2, [pc, #288]	; (800623c <recvfrom+0x278>)
 800611c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	4a46      	ldr	r2, [pc, #280]	; (800623c <recvfrom+0x278>)
 8006124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	b299      	uxth	r1, r3
 800612c:	7efb      	ldrb	r3, [r7, #27]
 800612e:	b29a      	uxth	r2, r3
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	440a      	add	r2, r1
 8006134:	b291      	uxth	r1, r2
 8006136:	4a41      	ldr	r2, [pc, #260]	; (800623c <recvfrom+0x278>)
 8006138:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	4a41      	ldr	r2, [pc, #260]	; (8006244 <recvfrom+0x280>)
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	4a3d      	ldr	r2, [pc, #244]	; (800623c <recvfrom+0x278>)
 8006148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614c:	89ba      	ldrh	r2, [r7, #12]
 800614e:	429a      	cmp	r2, r3
 8006150:	d202      	bcs.n	8006158 <recvfrom+0x194>
 8006152:	89bb      	ldrh	r3, [r7, #12]
 8006154:	83fb      	strh	r3, [r7, #30]
 8006156:	e004      	b.n	8006162 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	4a38      	ldr	r2, [pc, #224]	; (800623c <recvfrom+0x278>)
 800615c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006160:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8006162:	8bfb      	ldrh	r3, [r7, #30]
 8006164:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8006166:	8bfa      	ldrh	r2, [r7, #30]
 8006168:	7bfb      	ldrb	r3, [r7, #15]
 800616a:	68b9      	ldr	r1, [r7, #8]
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd fe9f 	bl	8003eb0 <wiz_recv_data>
			break;
 8006172:	e0d6      	b.n	8006322 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	4a31      	ldr	r2, [pc, #196]	; (800623c <recvfrom+0x278>)
 8006178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d146      	bne.n	800620e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8006180:	f107 0114 	add.w	r1, r7, #20
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2202      	movs	r2, #2
 8006188:	4618      	mov	r0, r3
 800618a:	f7fd fe91 	bl	8003eb0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	3301      	adds	r3, #1
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800619a:	2140      	movs	r1, #64	; 0x40
 800619c:	4618      	mov	r0, r3
 800619e:	f7fd fc87 	bl	8003ab0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80061a2:	bf00      	nop
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	3301      	adds	r3, #1
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fd fc31 	bl	8003a18 <WIZCHIP_READ>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f3      	bne.n	80061a4 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80061bc:	7d3a      	ldrb	r2, [r7, #20]
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	b291      	uxth	r1, r2
 80061c2:	4a1e      	ldr	r2, [pc, #120]	; (800623c <recvfrom+0x278>)
 80061c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	4a1c      	ldr	r2, [pc, #112]	; (800623c <recvfrom+0x278>)
 80061cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	7d7b      	ldrb	r3, [r7, #21]
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	4413      	add	r3, r2
 80061da:	b29a      	uxth	r2, r3
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	3a02      	subs	r2, #2
 80061e0:	b291      	uxth	r1, r2
 80061e2:	4a16      	ldr	r2, [pc, #88]	; (800623c <recvfrom+0x278>)
 80061e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	4a14      	ldr	r2, [pc, #80]	; (800623c <recvfrom+0x278>)
 80061ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f0:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d906      	bls.n	8006206 <recvfrom+0x242>
   			{
   			   close(sn);
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7ff fab2 	bl	8005764 <close>
   			   return SOCKFATAL_PACKLEN;
 8006200:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8006204:	e0c4      	b.n	8006390 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	4a0e      	ldr	r2, [pc, #56]	; (8006244 <recvfrom+0x280>)
 800620a:	2180      	movs	r1, #128	; 0x80
 800620c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
 8006210:	4a0a      	ldr	r2, [pc, #40]	; (800623c <recvfrom+0x278>)
 8006212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006216:	89ba      	ldrh	r2, [r7, #12]
 8006218:	429a      	cmp	r2, r3
 800621a:	d202      	bcs.n	8006222 <recvfrom+0x25e>
 800621c:	89bb      	ldrh	r3, [r7, #12]
 800621e:	83fb      	strh	r3, [r7, #30]
 8006220:	e004      	b.n	800622c <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	4a05      	ldr	r2, [pc, #20]	; (800623c <recvfrom+0x278>)
 8006226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800622a:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 800622c:	8bfa      	ldrh	r2, [r7, #30]
 800622e:	7bfb      	ldrb	r3, [r7, #15]
 8006230:	68b9      	ldr	r1, [r7, #8]
 8006232:	4618      	mov	r0, r3
 8006234:	f7fd fe3c 	bl	8003eb0 <wiz_recv_data>
		   break;
 8006238:	e073      	b.n	8006322 <recvfrom+0x35e>
 800623a:	bf00      	nop
 800623c:	2000067c 	.word	0x2000067c
 8006240:	20000676 	.word	0x20000676
 8006244:	2000068c 	.word	0x2000068c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	4a53      	ldr	r2, [pc, #332]	; (8006398 <recvfrom+0x3d4>)
 800624c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d144      	bne.n	80062de <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8006254:	f107 0114 	add.w	r1, r7, #20
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	2206      	movs	r2, #6
 800625c:	4618      	mov	r0, r3
 800625e:	f7fd fe27 	bl	8003eb0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	3301      	adds	r3, #1
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800626e:	2140      	movs	r1, #64	; 0x40
 8006270:	4618      	mov	r0, r3
 8006272:	f7fd fc1d 	bl	8003ab0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8006276:	bf00      	nop
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	3301      	adds	r3, #1
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006284:	4618      	mov	r0, r3
 8006286:	f7fd fbc7 	bl	8003a18 <WIZCHIP_READ>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1f3      	bne.n	8006278 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8006290:	7d3a      	ldrb	r2, [r7, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3301      	adds	r3, #1
 800629a:	7d7a      	ldrb	r2, [r7, #21]
 800629c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3302      	adds	r3, #2
 80062a2:	7dba      	ldrb	r2, [r7, #22]
 80062a4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3303      	adds	r3, #3
 80062aa:	7dfa      	ldrb	r2, [r7, #23]
 80062ac:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80062ae:	7e3a      	ldrb	r2, [r7, #24]
 80062b0:	7bfb      	ldrb	r3, [r7, #15]
 80062b2:	b291      	uxth	r1, r2
 80062b4:	4a38      	ldr	r2, [pc, #224]	; (8006398 <recvfrom+0x3d4>)
 80062b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	4a36      	ldr	r2, [pc, #216]	; (8006398 <recvfrom+0x3d4>)
 80062be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	b299      	uxth	r1, r3
 80062c6:	7e7b      	ldrb	r3, [r7, #25]
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	440a      	add	r2, r1
 80062ce:	b291      	uxth	r1, r2
 80062d0:	4a31      	ldr	r2, [pc, #196]	; (8006398 <recvfrom+0x3d4>)
 80062d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	4a30      	ldr	r2, [pc, #192]	; (800639c <recvfrom+0x3d8>)
 80062da:	2180      	movs	r1, #128	; 0x80
 80062dc:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	4a2d      	ldr	r2, [pc, #180]	; (8006398 <recvfrom+0x3d4>)
 80062e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e6:	89ba      	ldrh	r2, [r7, #12]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d202      	bcs.n	80062f2 <recvfrom+0x32e>
 80062ec:	89bb      	ldrh	r3, [r7, #12]
 80062ee:	83fb      	strh	r3, [r7, #30]
 80062f0:	e004      	b.n	80062fc <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	4a28      	ldr	r2, [pc, #160]	; (8006398 <recvfrom+0x3d4>)
 80062f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fa:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80062fc:	8bfa      	ldrh	r2, [r7, #30]
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	4618      	mov	r0, r3
 8006304:	f7fd fdd4 	bl	8003eb0 <wiz_recv_data>
			break;
 8006308:	e00b      	b.n	8006322 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 800630a:	8bfa      	ldrh	r2, [r7, #30]
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f7fd fe29 	bl	8003f68 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	491f      	ldr	r1, [pc, #124]	; (8006398 <recvfrom+0x3d4>)
 800631a:	8bfa      	ldrh	r2, [r7, #30]
 800631c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8006320:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8006322:	7bfb      	ldrb	r3, [r7, #15]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	3301      	adds	r3, #1
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800632e:	2140      	movs	r1, #64	; 0x40
 8006330:	4618      	mov	r0, r3
 8006332:	f7fd fbbd 	bl	8003ab0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8006336:	bf00      	nop
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	3301      	adds	r3, #1
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006344:	4618      	mov	r0, r3
 8006346:	f7fd fb67 	bl	8003a18 <WIZCHIP_READ>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f3      	bne.n	8006338 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
 8006352:	4a11      	ldr	r2, [pc, #68]	; (8006398 <recvfrom+0x3d4>)
 8006354:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	8bfa      	ldrh	r2, [r7, #30]
 800635c:	1a8a      	subs	r2, r1, r2
 800635e:	b291      	uxth	r1, r2
 8006360:	4a0d      	ldr	r2, [pc, #52]	; (8006398 <recvfrom+0x3d4>)
 8006362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8006366:	7bfb      	ldrb	r3, [r7, #15]
 8006368:	4a0b      	ldr	r2, [pc, #44]	; (8006398 <recvfrom+0x3d4>)
 800636a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	4a09      	ldr	r2, [pc, #36]	; (800639c <recvfrom+0x3d8>)
 8006376:	5cd2      	ldrb	r2, [r2, r3]
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	b2d1      	uxtb	r1, r2
 8006380:	4a06      	ldr	r2, [pc, #24]	; (800639c <recvfrom+0x3d8>)
 8006382:	54d1      	strb	r1, [r2, r3]
 8006384:	e003      	b.n	800638e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	4a04      	ldr	r2, [pc, #16]	; (800639c <recvfrom+0x3d8>)
 800638a:	2100      	movs	r1, #0
 800638c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 800638e:	8bfb      	ldrh	r3, [r7, #30]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3720      	adds	r7, #32
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}
 8006398:	2000067c 	.word	0x2000067c
 800639c:	2000068c 	.word	0x2000068c

080063a0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	bf00      	nop
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80063ae:	b480      	push	{r7}
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	bf00      	nop
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
 80063c0:	bf00      	nop
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	bf00      	nop
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80063f2:	b480      	push	{r7}
 80063f4:	b083      	sub	sp, #12
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70fb      	strb	r3, [r7, #3]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	78fa      	ldrb	r2, [r7, #3]
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4618      	mov	r0, r3
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	71fb      	strb	r3, [r7, #7]
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d002      	beq.n	800644e <reg_wizchip_cs_cbfunc+0x16>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800644e:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <reg_wizchip_cs_cbfunc+0x40>)
 8006450:	4a0a      	ldr	r2, [pc, #40]	; (800647c <reg_wizchip_cs_cbfunc+0x44>)
 8006452:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8006454:	4b08      	ldr	r3, [pc, #32]	; (8006478 <reg_wizchip_cs_cbfunc+0x40>)
 8006456:	4a0a      	ldr	r2, [pc, #40]	; (8006480 <reg_wizchip_cs_cbfunc+0x48>)
 8006458:	619a      	str	r2, [r3, #24]
 800645a:	e006      	b.n	800646a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800645c:	4a06      	ldr	r2, [pc, #24]	; (8006478 <reg_wizchip_cs_cbfunc+0x40>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8006462:	4a05      	ldr	r2, [pc, #20]	; (8006478 <reg_wizchip_cs_cbfunc+0x40>)
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6193      	str	r3, [r2, #24]
   }
}
 8006468:	bf00      	nop
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	2000012c 	.word	0x2000012c
 800647c:	080063bd 	.word	0x080063bd
 8006480:	080063cb 	.word	0x080063cb

08006484 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800648e:	bf00      	nop
 8006490:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <reg_wizchip_spi_cbfunc+0x4c>)
 8006492:	881b      	ldrh	r3, [r3, #0]
 8006494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0f9      	beq.n	8006490 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <reg_wizchip_spi_cbfunc+0x24>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80064a8:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80064aa:	4a0a      	ldr	r2, [pc, #40]	; (80064d4 <reg_wizchip_spi_cbfunc+0x50>)
 80064ac:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 80064ae:	4b08      	ldr	r3, [pc, #32]	; (80064d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80064b0:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <reg_wizchip_spi_cbfunc+0x54>)
 80064b2:	621a      	str	r2, [r3, #32]
 80064b4:	e006      	b.n	80064c4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80064b6:	4a06      	ldr	r2, [pc, #24]	; (80064d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80064bc:	4a04      	ldr	r2, [pc, #16]	; (80064d0 <reg_wizchip_spi_cbfunc+0x4c>)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6213      	str	r3, [r2, #32]
   }
}
 80064c2:	bf00      	nop
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	2000012c 	.word	0x2000012c
 80064d4:	08006411 	.word	0x08006411
 80064d8:	08006421 	.word	0x08006421

080064dc <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80064e2:	1d3b      	adds	r3, r7, #4
 80064e4:	2206      	movs	r2, #6
 80064e6:	4619      	mov	r1, r3
 80064e8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80064ec:	f7fd fb2e 	bl	8003b4c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80064f0:	f107 0314 	add.w	r3, r7, #20
 80064f4:	2204      	movs	r2, #4
 80064f6:	4619      	mov	r1, r3
 80064f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80064fc:	f7fd fb26 	bl	8003b4c <WIZCHIP_READ_BUF>
 8006500:	f107 0310 	add.w	r3, r7, #16
 8006504:	2204      	movs	r2, #4
 8006506:	4619      	mov	r1, r3
 8006508:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800650c:	f7fd fb1e 	bl	8003b4c <WIZCHIP_READ_BUF>
 8006510:	f107 030c 	add.w	r3, r7, #12
 8006514:	2204      	movs	r2, #4
 8006516:	4619      	mov	r1, r3
 8006518:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800651c:	f7fd fb16 	bl	8003b4c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8006520:	2180      	movs	r1, #128	; 0x80
 8006522:	2000      	movs	r0, #0
 8006524:	f7fd fac4 	bl	8003ab0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8006528:	2000      	movs	r0, #0
 800652a:	f7fd fa75 	bl	8003a18 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	2206      	movs	r2, #6
 8006532:	4619      	mov	r1, r3
 8006534:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8006538:	f7fd fb68 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 800653c:	f107 0314 	add.w	r3, r7, #20
 8006540:	2204      	movs	r2, #4
 8006542:	4619      	mov	r1, r3
 8006544:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006548:	f7fd fb60 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800654c:	f107 0310 	add.w	r3, r7, #16
 8006550:	2204      	movs	r2, #4
 8006552:	4619      	mov	r1, r3
 8006554:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8006558:	f7fd fb58 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800655c:	f107 030c 	add.w	r3, r7, #12
 8006560:	2204      	movs	r2, #4
 8006562:	4619      	mov	r1, r3
 8006564:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8006568:	f7fd fb50 	bl	8003c0c <WIZCHIP_WRITE_BUF>
}
 800656c:	bf00      	nop
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8006582:	f7ff ffab 	bl	80064dc <wizchip_sw_reset>
   if(txsize)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d03b      	beq.n	8006604 <wizchip_init+0x90>
   {
      tmp = 0;
 800658c:	2300      	movs	r3, #0
 800658e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
 8006594:	e015      	b.n	80065c2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8006596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	4413      	add	r3, r2
 800659e:	781a      	ldrb	r2, [r3, #0]
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	4413      	add	r3, r2
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80065a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065ac:	2b10      	cmp	r3, #16
 80065ae:	dd02      	ble.n	80065b6 <wizchip_init+0x42>
 80065b0:	f04f 33ff 	mov.w	r3, #4294967295
 80065b4:	e066      	b.n	8006684 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80065b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	3301      	adds	r3, #1
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	73fb      	strb	r3, [r7, #15]
 80065c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065c6:	2b07      	cmp	r3, #7
 80065c8:	dde5      	ble.n	8006596 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]
 80065ce:	e015      	b.n	80065fc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 80065d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	3301      	adds	r3, #1
 80065d8:	00db      	lsls	r3, r3, #3
 80065da:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80065de:	4618      	mov	r0, r3
 80065e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	4619      	mov	r1, r3
 80065ec:	f7fd fa60 	bl	8003ab0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80065f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	3301      	adds	r3, #1
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	73fb      	strb	r3, [r7, #15]
 80065fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006600:	2b07      	cmp	r3, #7
 8006602:	dde5      	ble.n	80065d0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d03b      	beq.n	8006682 <wizchip_init+0x10e>
   {
      tmp = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
 8006612:	e015      	b.n	8006640 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8006614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	4413      	add	r3, r2
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	4413      	add	r3, r2
 8006622:	b2db      	uxtb	r3, r3
 8006624:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8006626:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800662a:	2b10      	cmp	r3, #16
 800662c:	dd02      	ble.n	8006634 <wizchip_init+0xc0>
 800662e:	f04f 33ff 	mov.w	r3, #4294967295
 8006632:	e027      	b.n	8006684 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	3301      	adds	r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	73fb      	strb	r3, [r7, #15]
 8006640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006644:	2b07      	cmp	r3, #7
 8006646:	dde5      	ble.n	8006614 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8006648:	2300      	movs	r3, #0
 800664a:	73fb      	strb	r3, [r7, #15]
 800664c:	e015      	b.n	800667a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800664e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	3301      	adds	r3, #1
 8006656:	00db      	lsls	r3, r3, #3
 8006658:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800665c:	4618      	mov	r0, r3
 800665e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	4413      	add	r3, r2
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	4619      	mov	r1, r3
 800666a:	f7fd fa21 	bl	8003ab0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800666e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	3301      	adds	r3, #1
 8006676:	b2db      	uxtb	r3, r3
 8006678:	73fb      	strb	r3, [r7, #15]
 800667a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800667e:	2b07      	cmp	r3, #7
 8006680:	dde5      	ble.n	800664e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2206      	movs	r2, #6
 8006698:	4619      	mov	r1, r3
 800669a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800669e:	f7fd fab5 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	330e      	adds	r3, #14
 80066a6:	2204      	movs	r2, #4
 80066a8:	4619      	mov	r1, r3
 80066aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80066ae:	f7fd faad 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	330a      	adds	r3, #10
 80066b6:	2204      	movs	r2, #4
 80066b8:	4619      	mov	r1, r3
 80066ba:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80066be:	f7fd faa5 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3306      	adds	r3, #6
 80066c6:	2204      	movs	r2, #4
 80066c8:	4619      	mov	r1, r3
 80066ca:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80066ce:	f7fd fa9d 	bl	8003c0c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7c9a      	ldrb	r2, [r3, #18]
 80066d6:	4b0b      	ldr	r3, [pc, #44]	; (8006704 <wizchip_setnetinfo+0x78>)
 80066d8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	7cda      	ldrb	r2, [r3, #19]
 80066de:	4b09      	ldr	r3, [pc, #36]	; (8006704 <wizchip_setnetinfo+0x78>)
 80066e0:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	7d1a      	ldrb	r2, [r3, #20]
 80066e6:	4b07      	ldr	r3, [pc, #28]	; (8006704 <wizchip_setnetinfo+0x78>)
 80066e8:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7d5a      	ldrb	r2, [r3, #21]
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <wizchip_setnetinfo+0x78>)
 80066f0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	7d9a      	ldrb	r2, [r3, #22]
 80066f6:	4b04      	ldr	r3, [pc, #16]	; (8006708 <wizchip_setnetinfo+0x7c>)
 80066f8:	701a      	strb	r2, [r3, #0]
}
 80066fa:	bf00      	nop
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	20000694 	.word	0x20000694
 8006708:	20000698 	.word	0x20000698

0800670c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2206      	movs	r2, #6
 8006718:	4619      	mov	r1, r3
 800671a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800671e:	f7fd fa15 	bl	8003b4c <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	330e      	adds	r3, #14
 8006726:	2204      	movs	r2, #4
 8006728:	4619      	mov	r1, r3
 800672a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800672e:	f7fd fa0d 	bl	8003b4c <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	330a      	adds	r3, #10
 8006736:	2204      	movs	r2, #4
 8006738:	4619      	mov	r1, r3
 800673a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800673e:	f7fd fa05 	bl	8003b4c <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	3306      	adds	r3, #6
 8006746:	2204      	movs	r2, #4
 8006748:	4619      	mov	r1, r3
 800674a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800674e:	f7fd f9fd 	bl	8003b4c <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8006752:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <wizchip_getnetinfo+0x78>)
 8006754:	781a      	ldrb	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <wizchip_getnetinfo+0x78>)
 800675c:	785a      	ldrb	r2, [r3, #1]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8006762:	4b08      	ldr	r3, [pc, #32]	; (8006784 <wizchip_getnetinfo+0x78>)
 8006764:	789a      	ldrb	r2, [r3, #2]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <wizchip_getnetinfo+0x78>)
 800676c:	78da      	ldrb	r2, [r3, #3]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8006772:	4b05      	ldr	r3, [pc, #20]	; (8006788 <wizchip_getnetinfo+0x7c>)
 8006774:	781a      	ldrb	r2, [r3, #0]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	759a      	strb	r2, [r3, #22]
}
 800677a:	bf00      	nop
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000694 	.word	0x20000694
 8006788:	20000698 	.word	0x20000698

0800678c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006796:	4b0c      	ldr	r3, [pc, #48]	; (80067c8 <HAL_Init+0x3c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a0b      	ldr	r2, [pc, #44]	; (80067c8 <HAL_Init+0x3c>)
 800679c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067a2:	2003      	movs	r0, #3
 80067a4:	f000 f97e 	bl	8006aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80067a8:	2000      	movs	r0, #0
 80067aa:	f000 f80f 	bl	80067cc <HAL_InitTick>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	71fb      	strb	r3, [r7, #7]
 80067b8:	e001      	b.n	80067be <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80067ba:	f7fa f8dd 	bl	8000978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80067be:	79fb      	ldrb	r3, [r7, #7]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40022000 	.word	0x40022000

080067cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80067d8:	4b17      	ldr	r3, [pc, #92]	; (8006838 <HAL_InitTick+0x6c>)
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d023      	beq.n	8006828 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <HAL_InitTick+0x70>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4b14      	ldr	r3, [pc, #80]	; (8006838 <HAL_InitTick+0x6c>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	4619      	mov	r1, r3
 80067ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80067f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f989 	bl	8006b0e <HAL_SYSTICK_Config>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10f      	bne.n	8006822 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d809      	bhi.n	800681c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006808:	2200      	movs	r2, #0
 800680a:	6879      	ldr	r1, [r7, #4]
 800680c:	f04f 30ff 	mov.w	r0, #4294967295
 8006810:	f000 f953 	bl	8006aba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006814:	4a0a      	ldr	r2, [pc, #40]	; (8006840 <HAL_InitTick+0x74>)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6013      	str	r3, [r2, #0]
 800681a:	e007      	b.n	800682c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	73fb      	strb	r3, [r7, #15]
 8006820:	e004      	b.n	800682c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	73fb      	strb	r3, [r7, #15]
 8006826:	e001      	b.n	800682c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	2000015c 	.word	0x2000015c
 800683c:	20000000 	.word	0x20000000
 8006840:	20000158 	.word	0x20000158

08006844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_IncTick+0x20>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <HAL_IncTick+0x24>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4413      	add	r3, r2
 8006854:	4a04      	ldr	r2, [pc, #16]	; (8006868 <HAL_IncTick+0x24>)
 8006856:	6013      	str	r3, [r2, #0]
}
 8006858:	bf00      	nop
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	2000015c 	.word	0x2000015c
 8006868:	2000069c 	.word	0x2000069c

0800686c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  return uwTick;
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <HAL_GetTick+0x14>)
 8006872:	681b      	ldr	r3, [r3, #0]
}
 8006874:	4618      	mov	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	2000069c 	.word	0x2000069c

08006884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800688c:	f7ff ffee 	bl	800686c <HAL_GetTick>
 8006890:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d005      	beq.n	80068aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <HAL_Delay+0x44>)
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80068aa:	bf00      	nop
 80068ac:	f7ff ffde 	bl	800686c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d8f7      	bhi.n	80068ac <HAL_Delay+0x28>
  {
  }
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	2000015c 	.word	0x2000015c

080068cc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <HAL_SuspendTick+0x1c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a04      	ldr	r2, [pc, #16]	; (80068e8 <HAL_SuspendTick+0x1c>)
 80068d6:	f023 0302 	bic.w	r3, r3, #2
 80068da:	6013      	str	r3, [r2, #0]
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	e000e010 	.word	0xe000e010

080068ec <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80068f0:	4b03      	ldr	r3, [pc, #12]	; (8006900 <HAL_GetUIDw0+0x14>)
 80068f2:	681b      	ldr	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	1fff7590 	.word	0x1fff7590

08006904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f003 0307 	and.w	r3, r3, #7
 8006912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006914:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <__NVIC_SetPriorityGrouping+0x44>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006920:	4013      	ands	r3, r2
 8006922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800692c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006936:	4a04      	ldr	r2, [pc, #16]	; (8006948 <__NVIC_SetPriorityGrouping+0x44>)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	60d3      	str	r3, [r2, #12]
}
 800693c:	bf00      	nop
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	e000ed00 	.word	0xe000ed00

0800694c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006950:	4b04      	ldr	r3, [pc, #16]	; (8006964 <__NVIC_GetPriorityGrouping+0x18>)
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	0a1b      	lsrs	r3, r3, #8
 8006956:	f003 0307 	and.w	r3, r3, #7
}
 800695a:	4618      	mov	r0, r3
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	e000ed00 	.word	0xe000ed00

08006968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006976:	2b00      	cmp	r3, #0
 8006978:	db0b      	blt.n	8006992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	f003 021f 	and.w	r2, r3, #31
 8006980:	4907      	ldr	r1, [pc, #28]	; (80069a0 <__NVIC_EnableIRQ+0x38>)
 8006982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2001      	movs	r0, #1
 800698a:	fa00 f202 	lsl.w	r2, r0, r2
 800698e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e100 	.word	0xe000e100

080069a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	4603      	mov	r3, r0
 80069ac:	6039      	str	r1, [r7, #0]
 80069ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	db0a      	blt.n	80069ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	490c      	ldr	r1, [pc, #48]	; (80069f0 <__NVIC_SetPriority+0x4c>)
 80069be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c2:	0112      	lsls	r2, r2, #4
 80069c4:	b2d2      	uxtb	r2, r2
 80069c6:	440b      	add	r3, r1
 80069c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069cc:	e00a      	b.n	80069e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	4908      	ldr	r1, [pc, #32]	; (80069f4 <__NVIC_SetPriority+0x50>)
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	3b04      	subs	r3, #4
 80069dc:	0112      	lsls	r2, r2, #4
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	440b      	add	r3, r1
 80069e2:	761a      	strb	r2, [r3, #24]
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr
 80069f0:	e000e100 	.word	0xe000e100
 80069f4:	e000ed00 	.word	0xe000ed00

080069f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	; 0x24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f1c3 0307 	rsb	r3, r3, #7
 8006a12:	2b04      	cmp	r3, #4
 8006a14:	bf28      	it	cs
 8006a16:	2304      	movcs	r3, #4
 8006a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	3304      	adds	r3, #4
 8006a1e:	2b06      	cmp	r3, #6
 8006a20:	d902      	bls.n	8006a28 <NVIC_EncodePriority+0x30>
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	3b03      	subs	r3, #3
 8006a26:	e000      	b.n	8006a2a <NVIC_EncodePriority+0x32>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43da      	mvns	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	401a      	ands	r2, r3
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a40:	f04f 31ff 	mov.w	r1, #4294967295
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4a:	43d9      	mvns	r1, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a50:	4313      	orrs	r3, r2
         );
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3724      	adds	r7, #36	; 0x24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
	...

08006a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a70:	d301      	bcc.n	8006a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a72:	2301      	movs	r3, #1
 8006a74:	e00f      	b.n	8006a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a76:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <SysTick_Config+0x40>)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a7e:	210f      	movs	r1, #15
 8006a80:	f04f 30ff 	mov.w	r0, #4294967295
 8006a84:	f7ff ff8e 	bl	80069a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a88:	4b05      	ldr	r3, [pc, #20]	; (8006aa0 <SysTick_Config+0x40>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a8e:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <SysTick_Config+0x40>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010

08006aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff ff29 	bl	8006904 <__NVIC_SetPriorityGrouping>
}
 8006ab2:	bf00      	nop
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006acc:	f7ff ff3e 	bl	800694c <__NVIC_GetPriorityGrouping>
 8006ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	6978      	ldr	r0, [r7, #20]
 8006ad8:	f7ff ff8e 	bl	80069f8 <NVIC_EncodePriority>
 8006adc:	4602      	mov	r2, r0
 8006ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff ff5d 	bl	80069a4 <__NVIC_SetPriority>
}
 8006aea:	bf00      	nop
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	4603      	mov	r3, r0
 8006afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7ff ff31 	bl	8006968 <__NVIC_EnableIRQ>
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b082      	sub	sp, #8
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff ffa2 	bl	8006a60 <SysTick_Config>
 8006b1c:	4603      	mov	r3, r0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d005      	beq.n	8006b4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2204      	movs	r2, #4
 8006b42:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e029      	b.n	8006b9e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f022 020e 	bic.w	r2, r2, #14
 8006b58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f022 0201 	bic.w	r2, r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	f003 021c 	and.w	r2, r3, #28
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	2101      	movs	r1, #1
 8006b78:	fa01 f202 	lsl.w	r2, r1, r2
 8006b7c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	4798      	blx	r3
    }
  }
  return status;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006bb6:	e17f      	b.n	8006eb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8171 	beq.w	8006eb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d005      	beq.n	8006be8 <HAL_GPIO_Init+0x40>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d130      	bne.n	8006c4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	005b      	lsls	r3, r3, #1
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf8:	43db      	mvns	r3, r3
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	68da      	ldr	r2, [r3, #12]
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c1e:	2201      	movs	r2, #1
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	fa02 f303 	lsl.w	r3, r2, r3
 8006c26:	43db      	mvns	r3, r3
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	091b      	lsrs	r3, r3, #4
 8006c34:	f003 0201 	and.w	r2, r3, #1
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d118      	bne.n	8006c88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	43db      	mvns	r3, r3
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	08db      	lsrs	r3, r3, #3
 8006c72:	f003 0201 	and.w	r2, r3, #1
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f003 0303 	and.w	r3, r3, #3
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d017      	beq.n	8006cc4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	2203      	movs	r2, #3
 8006ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4013      	ands	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	f003 0303 	and.w	r3, r3, #3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d123      	bne.n	8006d18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	08da      	lsrs	r2, r3, #3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3208      	adds	r2, #8
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	220f      	movs	r2, #15
 8006ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cec:	43db      	mvns	r3, r3
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	691a      	ldr	r2, [r3, #16]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	08da      	lsrs	r2, r3, #3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3208      	adds	r2, #8
 8006d12:	6939      	ldr	r1, [r7, #16]
 8006d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	005b      	lsls	r3, r3, #1
 8006d22:	2203      	movs	r2, #3
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	43db      	mvns	r3, r3
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 0203 	and.w	r2, r3, #3
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	005b      	lsls	r3, r3, #1
 8006d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 80ac 	beq.w	8006eb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d5a:	4b5f      	ldr	r3, [pc, #380]	; (8006ed8 <HAL_GPIO_Init+0x330>)
 8006d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d5e:	4a5e      	ldr	r2, [pc, #376]	; (8006ed8 <HAL_GPIO_Init+0x330>)
 8006d60:	f043 0301 	orr.w	r3, r3, #1
 8006d64:	6613      	str	r3, [r2, #96]	; 0x60
 8006d66:	4b5c      	ldr	r3, [pc, #368]	; (8006ed8 <HAL_GPIO_Init+0x330>)
 8006d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d6a:	f003 0301 	and.w	r3, r3, #1
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006d72:	4a5a      	ldr	r2, [pc, #360]	; (8006edc <HAL_GPIO_Init+0x334>)
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	089b      	lsrs	r3, r3, #2
 8006d78:	3302      	adds	r3, #2
 8006d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	220f      	movs	r2, #15
 8006d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4013      	ands	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006d9c:	d025      	beq.n	8006dea <HAL_GPIO_Init+0x242>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a4f      	ldr	r2, [pc, #316]	; (8006ee0 <HAL_GPIO_Init+0x338>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01f      	beq.n	8006de6 <HAL_GPIO_Init+0x23e>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a4e      	ldr	r2, [pc, #312]	; (8006ee4 <HAL_GPIO_Init+0x33c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d019      	beq.n	8006de2 <HAL_GPIO_Init+0x23a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a4d      	ldr	r2, [pc, #308]	; (8006ee8 <HAL_GPIO_Init+0x340>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <HAL_GPIO_Init+0x236>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a4c      	ldr	r2, [pc, #304]	; (8006eec <HAL_GPIO_Init+0x344>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00d      	beq.n	8006dda <HAL_GPIO_Init+0x232>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a4b      	ldr	r2, [pc, #300]	; (8006ef0 <HAL_GPIO_Init+0x348>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d007      	beq.n	8006dd6 <HAL_GPIO_Init+0x22e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a4a      	ldr	r2, [pc, #296]	; (8006ef4 <HAL_GPIO_Init+0x34c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d101      	bne.n	8006dd2 <HAL_GPIO_Init+0x22a>
 8006dce:	2306      	movs	r3, #6
 8006dd0:	e00c      	b.n	8006dec <HAL_GPIO_Init+0x244>
 8006dd2:	2307      	movs	r3, #7
 8006dd4:	e00a      	b.n	8006dec <HAL_GPIO_Init+0x244>
 8006dd6:	2305      	movs	r3, #5
 8006dd8:	e008      	b.n	8006dec <HAL_GPIO_Init+0x244>
 8006dda:	2304      	movs	r3, #4
 8006ddc:	e006      	b.n	8006dec <HAL_GPIO_Init+0x244>
 8006dde:	2303      	movs	r3, #3
 8006de0:	e004      	b.n	8006dec <HAL_GPIO_Init+0x244>
 8006de2:	2302      	movs	r3, #2
 8006de4:	e002      	b.n	8006dec <HAL_GPIO_Init+0x244>
 8006de6:	2301      	movs	r3, #1
 8006de8:	e000      	b.n	8006dec <HAL_GPIO_Init+0x244>
 8006dea:	2300      	movs	r3, #0
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	f002 0203 	and.w	r2, r2, #3
 8006df2:	0092      	lsls	r2, r2, #2
 8006df4:	4093      	lsls	r3, r2
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006dfc:	4937      	ldr	r1, [pc, #220]	; (8006edc <HAL_GPIO_Init+0x334>)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	089b      	lsrs	r3, r3, #2
 8006e02:	3302      	adds	r3, #2
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e0a:	4b3b      	ldr	r3, [pc, #236]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	43db      	mvns	r3, r3
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4013      	ands	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006e2e:	4a32      	ldr	r2, [pc, #200]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006e34:	4b30      	ldr	r3, [pc, #192]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4013      	ands	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006e58:	4a27      	ldr	r2, [pc, #156]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006e5e:	4b26      	ldr	r3, [pc, #152]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	43db      	mvns	r3, r3
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006e82:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	43db      	mvns	r3, r3
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4013      	ands	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006eac:	4a12      	ldr	r2, [pc, #72]	; (8006ef8 <HAL_GPIO_Init+0x350>)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f47f ae78 	bne.w	8006bb8 <HAL_GPIO_Init+0x10>
  }
}
 8006ec8:	bf00      	nop
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	40021000 	.word	0x40021000
 8006edc:	40010000 	.word	0x40010000
 8006ee0:	48000400 	.word	0x48000400
 8006ee4:	48000800 	.word	0x48000800
 8006ee8:	48000c00 	.word	0x48000c00
 8006eec:	48001000 	.word	0x48001000
 8006ef0:	48001400 	.word	0x48001400
 8006ef4:	48001800 	.word	0x48001800
 8006ef8:	40010400 	.word	0x40010400

08006efc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	887b      	ldrh	r3, [r7, #2]
 8006f0e:	4013      	ands	r3, r2
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d002      	beq.n	8006f1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
 8006f18:	e001      	b.n	8006f1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	807b      	strh	r3, [r7, #2]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f3c:	787b      	ldrb	r3, [r7, #1]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006f42:	887a      	ldrh	r2, [r7, #2]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006f48:	e002      	b.n	8006f50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006f4a:	887a      	ldrh	r2, [r7, #2]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	88fb      	ldrh	r3, [r7, #6]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d006      	beq.n	8006f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f72:	4a05      	ldr	r2, [pc, #20]	; (8006f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 f806 	bl	8006f8c <HAL_GPIO_EXTI_Callback>
  }
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40010400 	.word	0x40010400

08006f8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
	...

08006fa4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fa8:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a04      	ldr	r2, [pc, #16]	; (8006fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fb2:	6013      	str	r3, [r2, #0]
}
 8006fb4:	bf00      	nop
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	40007000 	.word	0x40007000

08006fc4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg @ref PWR_WAKEUP_PIN5_HIGH or PWR_WAKEUP_PIN5_LOW
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR3_EWUP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8006fcc:	4b0c      	ldr	r3, [pc, #48]	; (8007000 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006fce:	68da      	ldr	r2, [r3, #12]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	43db      	mvns	r3, r3
 8006fd8:	401a      	ands	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	4908      	ldr	r1, [pc, #32]	; (8007000 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	60cb      	str	r3, [r1, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	4904      	ldr	r1, [pc, #16]	; (8007000 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	608b      	str	r3, [r1, #8]


}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	40007000 	.word	0x40007000

08007004 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f023 0307 	bic.w	r3, r3, #7
 8007010:	4a07      	ldr	r2, [pc, #28]	; (8007030 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8007012:	f043 0303 	orr.w	r3, r3, #3
 8007016:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007018:	4b06      	ldr	r3, [pc, #24]	; (8007034 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	4a05      	ldr	r2, [pc, #20]	; (8007034 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800701e:	f043 0304 	orr.w	r3, r3, #4
 8007022:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8007024:	bf30      	wfi
}
 8007026:	bf00      	nop
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	40007000 	.word	0x40007000
 8007034:	e000ed00 	.word	0xe000ed00

08007038 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800703c:	4b04      	ldr	r3, [pc, #16]	; (8007050 <HAL_PWREx_GetVoltageRange+0x18>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8007044:	4618      	mov	r0, r3
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40007000 	.word	0x40007000

08007054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007062:	d130      	bne.n	80070c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007064:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800706c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007070:	d038      	beq.n	80070e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007072:	4b20      	ldr	r3, [pc, #128]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800707a:	4a1e      	ldr	r2, [pc, #120]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800707c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007080:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2232      	movs	r2, #50	; 0x32
 8007088:	fb02 f303 	mul.w	r3, r2, r3
 800708c:	4a1b      	ldr	r2, [pc, #108]	; (80070fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	0c9b      	lsrs	r3, r3, #18
 8007094:	3301      	adds	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007098:	e002      	b.n	80070a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	3b01      	subs	r3, #1
 800709e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80070a0:	4b14      	ldr	r3, [pc, #80]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ac:	d102      	bne.n	80070b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1f2      	bne.n	800709a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80070b4:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c0:	d110      	bne.n	80070e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e00f      	b.n	80070e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80070c6:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80070ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d2:	d007      	beq.n	80070e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80070d4:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070dc:	4a05      	ldr	r2, [pc, #20]	; (80070f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80070de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40007000 	.word	0x40007000
 80070f8:	20000000 	.word	0x20000000
 80070fc:	431bde83 	.word	0x431bde83

08007100 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e3ca      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007112:	4b97      	ldr	r3, [pc, #604]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 030c 	and.w	r3, r3, #12
 800711a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800711c:	4b94      	ldr	r3, [pc, #592]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0310 	and.w	r3, r3, #16
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80e4 	beq.w	80072fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <HAL_RCC_OscConfig+0x4a>
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b0c      	cmp	r3, #12
 800713e:	f040 808b 	bne.w	8007258 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2b01      	cmp	r3, #1
 8007146:	f040 8087 	bne.w	8007258 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800714a:	4b89      	ldr	r3, [pc, #548]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0302 	and.w	r3, r3, #2
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_RCC_OscConfig+0x62>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e3a2      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	4b82      	ldr	r3, [pc, #520]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <HAL_RCC_OscConfig+0x7c>
 8007172:	4b7f      	ldr	r3, [pc, #508]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800717a:	e005      	b.n	8007188 <HAL_RCC_OscConfig+0x88>
 800717c:	4b7c      	ldr	r3, [pc, #496]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 800717e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007182:	091b      	lsrs	r3, r3, #4
 8007184:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007188:	4293      	cmp	r3, r2
 800718a:	d223      	bcs.n	80071d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	4618      	mov	r0, r3
 8007192:	f000 fd1d 	bl	8007bd0 <RCC_SetFlashLatencyFromMSIRange>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e383      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071a0:	4b73      	ldr	r3, [pc, #460]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a72      	ldr	r2, [pc, #456]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071a6:	f043 0308 	orr.w	r3, r3, #8
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	4b70      	ldr	r3, [pc, #448]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	496d      	ldr	r1, [pc, #436]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071be:	4b6c      	ldr	r3, [pc, #432]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	021b      	lsls	r3, r3, #8
 80071cc:	4968      	ldr	r1, [pc, #416]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	604b      	str	r3, [r1, #4]
 80071d2:	e025      	b.n	8007220 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80071d4:	4b66      	ldr	r3, [pc, #408]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a65      	ldr	r2, [pc, #404]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071da:	f043 0308 	orr.w	r3, r3, #8
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	4b63      	ldr	r3, [pc, #396]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	4960      	ldr	r1, [pc, #384]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80071f2:	4b5f      	ldr	r3, [pc, #380]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69db      	ldr	r3, [r3, #28]
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	495b      	ldr	r1, [pc, #364]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007202:	4313      	orrs	r3, r2
 8007204:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d109      	bne.n	8007220 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	4618      	mov	r0, r3
 8007212:	f000 fcdd 	bl	8007bd0 <RCC_SetFlashLatencyFromMSIRange>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d001      	beq.n	8007220 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e343      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007220:	f000 fc4a 	bl	8007ab8 <HAL_RCC_GetSysClockFreq>
 8007224:	4602      	mov	r2, r0
 8007226:	4b52      	ldr	r3, [pc, #328]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	091b      	lsrs	r3, r3, #4
 800722c:	f003 030f 	and.w	r3, r3, #15
 8007230:	4950      	ldr	r1, [pc, #320]	; (8007374 <HAL_RCC_OscConfig+0x274>)
 8007232:	5ccb      	ldrb	r3, [r1, r3]
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	fa22 f303 	lsr.w	r3, r2, r3
 800723c:	4a4e      	ldr	r2, [pc, #312]	; (8007378 <HAL_RCC_OscConfig+0x278>)
 800723e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007240:	4b4e      	ldr	r3, [pc, #312]	; (800737c <HAL_RCC_OscConfig+0x27c>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f7ff fac1 	bl	80067cc <HAL_InitTick>
 800724a:	4603      	mov	r3, r0
 800724c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d052      	beq.n	80072fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	e327      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d032      	beq.n	80072c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007260:	4b43      	ldr	r3, [pc, #268]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a42      	ldr	r2, [pc, #264]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800726c:	f7ff fafe 	bl	800686c <HAL_GetTick>
 8007270:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007274:	f7ff fafa 	bl	800686c <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e310      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007286:	4b3a      	ldr	r3, [pc, #232]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0302 	and.w	r3, r3, #2
 800728e:	2b00      	cmp	r3, #0
 8007290:	d0f0      	beq.n	8007274 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007292:	4b37      	ldr	r3, [pc, #220]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a36      	ldr	r2, [pc, #216]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007298:	f043 0308 	orr.w	r3, r3, #8
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	4b34      	ldr	r3, [pc, #208]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	4931      	ldr	r1, [pc, #196]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80072b0:	4b2f      	ldr	r3, [pc, #188]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	492c      	ldr	r1, [pc, #176]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80072c0:	4313      	orrs	r3, r2
 80072c2:	604b      	str	r3, [r1, #4]
 80072c4:	e01a      	b.n	80072fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80072c6:	4b2a      	ldr	r3, [pc, #168]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a29      	ldr	r2, [pc, #164]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80072d2:	f7ff facb 	bl	800686c <HAL_GetTick>
 80072d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80072d8:	e008      	b.n	80072ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072da:	f7ff fac7 	bl	800686c <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d901      	bls.n	80072ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e2dd      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80072ec:	4b20      	ldr	r3, [pc, #128]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1f0      	bne.n	80072da <HAL_RCC_OscConfig+0x1da>
 80072f8:	e000      	b.n	80072fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80072fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d074      	beq.n	80073f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	2b08      	cmp	r3, #8
 800730c:	d005      	beq.n	800731a <HAL_RCC_OscConfig+0x21a>
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b0c      	cmp	r3, #12
 8007312:	d10e      	bne.n	8007332 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	2b03      	cmp	r3, #3
 8007318:	d10b      	bne.n	8007332 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800731a:	4b15      	ldr	r3, [pc, #84]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d064      	beq.n	80073f0 <HAL_RCC_OscConfig+0x2f0>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d160      	bne.n	80073f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e2ba      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800733a:	d106      	bne.n	800734a <HAL_RCC_OscConfig+0x24a>
 800733c:	4b0c      	ldr	r3, [pc, #48]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007346:	6013      	str	r3, [r2, #0]
 8007348:	e026      	b.n	8007398 <HAL_RCC_OscConfig+0x298>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007352:	d115      	bne.n	8007380 <HAL_RCC_OscConfig+0x280>
 8007354:	4b06      	ldr	r3, [pc, #24]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a05      	ldr	r2, [pc, #20]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 800735a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	4b03      	ldr	r3, [pc, #12]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a02      	ldr	r2, [pc, #8]	; (8007370 <HAL_RCC_OscConfig+0x270>)
 8007366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800736a:	6013      	str	r3, [r2, #0]
 800736c:	e014      	b.n	8007398 <HAL_RCC_OscConfig+0x298>
 800736e:	bf00      	nop
 8007370:	40021000 	.word	0x40021000
 8007374:	0800d01c 	.word	0x0800d01c
 8007378:	20000000 	.word	0x20000000
 800737c:	20000158 	.word	0x20000158
 8007380:	4ba0      	ldr	r3, [pc, #640]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a9f      	ldr	r2, [pc, #636]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	4b9d      	ldr	r3, [pc, #628]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a9c      	ldr	r2, [pc, #624]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d013      	beq.n	80073c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073a0:	f7ff fa64 	bl	800686c <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073a8:	f7ff fa60 	bl	800686c <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b64      	cmp	r3, #100	; 0x64
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e276      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073ba:	4b92      	ldr	r3, [pc, #584]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0x2a8>
 80073c6:	e014      	b.n	80073f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073c8:	f7ff fa50 	bl	800686c <HAL_GetTick>
 80073cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80073ce:	e008      	b.n	80073e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073d0:	f7ff fa4c 	bl	800686c <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	2b64      	cmp	r3, #100	; 0x64
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e262      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80073e2:	4b88      	ldr	r3, [pc, #544]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f0      	bne.n	80073d0 <HAL_RCC_OscConfig+0x2d0>
 80073ee:	e000      	b.n	80073f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d060      	beq.n	80074c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b04      	cmp	r3, #4
 8007402:	d005      	beq.n	8007410 <HAL_RCC_OscConfig+0x310>
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b0c      	cmp	r3, #12
 8007408:	d119      	bne.n	800743e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b02      	cmp	r3, #2
 800740e:	d116      	bne.n	800743e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007410:	4b7c      	ldr	r3, [pc, #496]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <HAL_RCC_OscConfig+0x328>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e23f      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007428:	4b76      	ldr	r3, [pc, #472]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	061b      	lsls	r3, r3, #24
 8007436:	4973      	ldr	r1, [pc, #460]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007438:	4313      	orrs	r3, r2
 800743a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800743c:	e040      	b.n	80074c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d023      	beq.n	800748e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007446:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a6e      	ldr	r2, [pc, #440]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800744c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007452:	f7ff fa0b 	bl	800686c <HAL_GetTick>
 8007456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007458:	e008      	b.n	800746c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800745a:	f7ff fa07 	bl	800686c <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e21d      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800746c:	4b65      	ldr	r3, [pc, #404]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0f0      	beq.n	800745a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007478:	4b62      	ldr	r3, [pc, #392]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	061b      	lsls	r3, r3, #24
 8007486:	495f      	ldr	r1, [pc, #380]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007488:	4313      	orrs	r3, r2
 800748a:	604b      	str	r3, [r1, #4]
 800748c:	e018      	b.n	80074c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800748e:	4b5d      	ldr	r3, [pc, #372]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a5c      	ldr	r2, [pc, #368]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007498:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800749a:	f7ff f9e7 	bl	800686c <HAL_GetTick>
 800749e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074a0:	e008      	b.n	80074b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a2:	f7ff f9e3 	bl	800686c <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d901      	bls.n	80074b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e1f9      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80074b4:	4b53      	ldr	r3, [pc, #332]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d1f0      	bne.n	80074a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d03c      	beq.n	8007546 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d01c      	beq.n	800750e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074d4:	4b4b      	ldr	r3, [pc, #300]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80074d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074da:	4a4a      	ldr	r2, [pc, #296]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e4:	f7ff f9c2 	bl	800686c <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ec:	f7ff f9be 	bl	800686c <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e1d4      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80074fe:	4b41      	ldr	r3, [pc, #260]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0ef      	beq.n	80074ec <HAL_RCC_OscConfig+0x3ec>
 800750c:	e01b      	b.n	8007546 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800750e:	4b3d      	ldr	r3, [pc, #244]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007510:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007514:	4a3b      	ldr	r2, [pc, #236]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751e:	f7ff f9a5 	bl	800686c <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007524:	e008      	b.n	8007538 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007526:	f7ff f9a1 	bl	800686c <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	2b02      	cmp	r3, #2
 8007532:	d901      	bls.n	8007538 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	e1b7      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007538:	4b32      	ldr	r3, [pc, #200]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800753a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800753e:	f003 0302 	and.w	r3, r3, #2
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1ef      	bne.n	8007526 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 80a6 	beq.w	80076a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007554:	2300      	movs	r3, #0
 8007556:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007558:	4b2a      	ldr	r3, [pc, #168]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800755a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800755c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10d      	bne.n	8007580 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007564:	4b27      	ldr	r3, [pc, #156]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	4a26      	ldr	r2, [pc, #152]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 800756a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800756e:	6593      	str	r3, [r2, #88]	; 0x58
 8007570:	4b24      	ldr	r3, [pc, #144]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 8007572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007578:	60bb      	str	r3, [r7, #8]
 800757a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800757c:	2301      	movs	r3, #1
 800757e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007580:	4b21      	ldr	r3, [pc, #132]	; (8007608 <HAL_RCC_OscConfig+0x508>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007588:	2b00      	cmp	r3, #0
 800758a:	d118      	bne.n	80075be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800758c:	4b1e      	ldr	r3, [pc, #120]	; (8007608 <HAL_RCC_OscConfig+0x508>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a1d      	ldr	r2, [pc, #116]	; (8007608 <HAL_RCC_OscConfig+0x508>)
 8007592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007596:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007598:	f7ff f968 	bl	800686c <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075a0:	f7ff f964 	bl	800686c <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e17a      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075b2:	4b15      	ldr	r3, [pc, #84]	; (8007608 <HAL_RCC_OscConfig+0x508>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d0f0      	beq.n	80075a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d108      	bne.n	80075d8 <HAL_RCC_OscConfig+0x4d8>
 80075c6:	4b0f      	ldr	r3, [pc, #60]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80075c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075cc:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075d6:	e029      	b.n	800762c <HAL_RCC_OscConfig+0x52c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	2b05      	cmp	r3, #5
 80075de:	d115      	bne.n	800760c <HAL_RCC_OscConfig+0x50c>
 80075e0:	4b08      	ldr	r3, [pc, #32]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	4a07      	ldr	r2, [pc, #28]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80075e8:	f043 0304 	orr.w	r3, r3, #4
 80075ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80075f0:	4b04      	ldr	r3, [pc, #16]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80075f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f6:	4a03      	ldr	r2, [pc, #12]	; (8007604 <HAL_RCC_OscConfig+0x504>)
 80075f8:	f043 0301 	orr.w	r3, r3, #1
 80075fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007600:	e014      	b.n	800762c <HAL_RCC_OscConfig+0x52c>
 8007602:	bf00      	nop
 8007604:	40021000 	.word	0x40021000
 8007608:	40007000 	.word	0x40007000
 800760c:	4b9c      	ldr	r3, [pc, #624]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	4a9b      	ldr	r2, [pc, #620]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007614:	f023 0301 	bic.w	r3, r3, #1
 8007618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800761c:	4b98      	ldr	r3, [pc, #608]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800761e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007622:	4a97      	ldr	r2, [pc, #604]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007624:	f023 0304 	bic.w	r3, r3, #4
 8007628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d016      	beq.n	8007662 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007634:	f7ff f91a 	bl	800686c <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800763a:	e00a      	b.n	8007652 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800763c:	f7ff f916 	bl	800686c <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	f241 3288 	movw	r2, #5000	; 0x1388
 800764a:	4293      	cmp	r3, r2
 800764c:	d901      	bls.n	8007652 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800764e:	2303      	movs	r3, #3
 8007650:	e12a      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007652:	4b8b      	ldr	r3, [pc, #556]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d0ed      	beq.n	800763c <HAL_RCC_OscConfig+0x53c>
 8007660:	e015      	b.n	800768e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007662:	f7ff f903 	bl	800686c <HAL_GetTick>
 8007666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007668:	e00a      	b.n	8007680 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800766a:	f7ff f8ff 	bl	800686c <HAL_GetTick>
 800766e:	4602      	mov	r2, r0
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f241 3288 	movw	r2, #5000	; 0x1388
 8007678:	4293      	cmp	r3, r2
 800767a:	d901      	bls.n	8007680 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800767c:	2303      	movs	r3, #3
 800767e:	e113      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007680:	4b7f      	ldr	r3, [pc, #508]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1ed      	bne.n	800766a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800768e:	7ffb      	ldrb	r3, [r7, #31]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d105      	bne.n	80076a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007694:	4b7a      	ldr	r3, [pc, #488]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007698:	4a79      	ldr	r2, [pc, #484]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800769a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800769e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 80fe 	beq.w	80078a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	f040 80d0 	bne.w	8007854 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80076b4:	4b72      	ldr	r3, [pc, #456]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f003 0203 	and.w	r2, r3, #3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d130      	bne.n	800772a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	3b01      	subs	r3, #1
 80076d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d127      	bne.n	800772a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d11f      	bne.n	800772a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076f4:	2a07      	cmp	r2, #7
 80076f6:	bf14      	ite	ne
 80076f8:	2201      	movne	r2, #1
 80076fa:	2200      	moveq	r2, #0
 80076fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80076fe:	4293      	cmp	r3, r2
 8007700:	d113      	bne.n	800772a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770c:	085b      	lsrs	r3, r3, #1
 800770e:	3b01      	subs	r3, #1
 8007710:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8007712:	429a      	cmp	r2, r3
 8007714:	d109      	bne.n	800772a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	085b      	lsrs	r3, r3, #1
 8007722:	3b01      	subs	r3, #1
 8007724:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007726:	429a      	cmp	r2, r3
 8007728:	d06e      	beq.n	8007808 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	2b0c      	cmp	r3, #12
 800772e:	d069      	beq.n	8007804 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007730:	4b53      	ldr	r3, [pc, #332]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d105      	bne.n	8007748 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800773c:	4b50      	ldr	r3, [pc, #320]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e0ad      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800774c:	4b4c      	ldr	r3, [pc, #304]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a4b      	ldr	r2, [pc, #300]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007756:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007758:	f7ff f888 	bl	800686c <HAL_GetTick>
 800775c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800775e:	e008      	b.n	8007772 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007760:	f7ff f884 	bl	800686c <HAL_GetTick>
 8007764:	4602      	mov	r2, r0
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d901      	bls.n	8007772 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800776e:	2303      	movs	r3, #3
 8007770:	e09a      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007772:	4b43      	ldr	r3, [pc, #268]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1f0      	bne.n	8007760 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800777e:	4b40      	ldr	r3, [pc, #256]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	4b40      	ldr	r3, [pc, #256]	; (8007884 <HAL_RCC_OscConfig+0x784>)
 8007784:	4013      	ands	r3, r2
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800778e:	3a01      	subs	r2, #1
 8007790:	0112      	lsls	r2, r2, #4
 8007792:	4311      	orrs	r1, r2
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007798:	0212      	lsls	r2, r2, #8
 800779a:	4311      	orrs	r1, r2
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077a0:	0852      	lsrs	r2, r2, #1
 80077a2:	3a01      	subs	r2, #1
 80077a4:	0552      	lsls	r2, r2, #21
 80077a6:	4311      	orrs	r1, r2
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80077ac:	0852      	lsrs	r2, r2, #1
 80077ae:	3a01      	subs	r2, #1
 80077b0:	0652      	lsls	r2, r2, #25
 80077b2:	4311      	orrs	r1, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077b8:	0912      	lsrs	r2, r2, #4
 80077ba:	0452      	lsls	r2, r2, #17
 80077bc:	430a      	orrs	r2, r1
 80077be:	4930      	ldr	r1, [pc, #192]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80077c4:	4b2e      	ldr	r3, [pc, #184]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a2d      	ldr	r2, [pc, #180]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 80077ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80077d0:	4b2b      	ldr	r3, [pc, #172]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	4a2a      	ldr	r2, [pc, #168]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 80077d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80077dc:	f7ff f846 	bl	800686c <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077e4:	f7ff f842 	bl	800686c <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e058      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80077f6:	4b22      	ldr	r3, [pc, #136]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007802:	e050      	b.n	80078a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e04f      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007808:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007810:	2b00      	cmp	r3, #0
 8007812:	d148      	bne.n	80078a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007814:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a19      	ldr	r2, [pc, #100]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800781a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800781e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007820:	4b17      	ldr	r3, [pc, #92]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4a16      	ldr	r2, [pc, #88]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007826:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800782a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800782c:	f7ff f81e 	bl	800686c <HAL_GetTick>
 8007830:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007832:	e008      	b.n	8007846 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007834:	f7ff f81a 	bl	800686c <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e030      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007846:	4b0e      	ldr	r3, [pc, #56]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f0      	beq.n	8007834 <HAL_RCC_OscConfig+0x734>
 8007852:	e028      	b.n	80078a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2b0c      	cmp	r3, #12
 8007858:	d023      	beq.n	80078a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800785a:	4b09      	ldr	r3, [pc, #36]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a08      	ldr	r2, [pc, #32]	; (8007880 <HAL_RCC_OscConfig+0x780>)
 8007860:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007866:	f7ff f801 	bl	800686c <HAL_GetTick>
 800786a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800786c:	e00c      	b.n	8007888 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800786e:	f7fe fffd 	bl	800686c <HAL_GetTick>
 8007872:	4602      	mov	r2, r0
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	2b02      	cmp	r3, #2
 800787a:	d905      	bls.n	8007888 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e013      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
 8007880:	40021000 	.word	0x40021000
 8007884:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007888:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <HAL_RCC_OscConfig+0x7b0>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1ec      	bne.n	800786e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007894:	4b06      	ldr	r3, [pc, #24]	; (80078b0 <HAL_RCC_OscConfig+0x7b0>)
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	4905      	ldr	r1, [pc, #20]	; (80078b0 <HAL_RCC_OscConfig+0x7b0>)
 800789a:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <HAL_RCC_OscConfig+0x7b4>)
 800789c:	4013      	ands	r3, r2
 800789e:	60cb      	str	r3, [r1, #12]
 80078a0:	e001      	b.n	80078a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e000      	b.n	80078a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3720      	adds	r7, #32
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40021000 	.word	0x40021000
 80078b4:	feeefffc 	.word	0xfeeefffc

080078b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	e0e7      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078cc:	4b75      	ldr	r3, [pc, #468]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0307 	and.w	r3, r3, #7
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d910      	bls.n	80078fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078da:	4b72      	ldr	r3, [pc, #456]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f023 0207 	bic.w	r2, r3, #7
 80078e2:	4970      	ldr	r1, [pc, #448]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ea:	4b6e      	ldr	r3, [pc, #440]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0307 	and.w	r3, r3, #7
 80078f2:	683a      	ldr	r2, [r7, #0]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d001      	beq.n	80078fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	e0cf      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d010      	beq.n	800792a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689a      	ldr	r2, [r3, #8]
 800790c:	4b66      	ldr	r3, [pc, #408]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007914:	429a      	cmp	r2, r3
 8007916:	d908      	bls.n	800792a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007918:	4b63      	ldr	r3, [pc, #396]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	4960      	ldr	r1, [pc, #384]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007926:	4313      	orrs	r3, r2
 8007928:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d04c      	beq.n	80079d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b03      	cmp	r3, #3
 800793c:	d107      	bne.n	800794e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800793e:	4b5a      	ldr	r3, [pc, #360]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d121      	bne.n	800798e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e0a6      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d107      	bne.n	8007966 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007956:	4b54      	ldr	r3, [pc, #336]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d115      	bne.n	800798e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e09a      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d107      	bne.n	800797e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800796e:	4b4e      	ldr	r3, [pc, #312]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e08e      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800797e:	4b4a      	ldr	r3, [pc, #296]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e086      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800798e:	4b46      	ldr	r3, [pc, #280]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f023 0203 	bic.w	r2, r3, #3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	4943      	ldr	r1, [pc, #268]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 800799c:	4313      	orrs	r3, r2
 800799e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079a0:	f7fe ff64 	bl	800686c <HAL_GetTick>
 80079a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079a6:	e00a      	b.n	80079be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a8:	f7fe ff60 	bl	800686c <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e06e      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079be:	4b3a      	ldr	r3, [pc, #232]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 020c 	and.w	r2, r3, #12
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d1eb      	bne.n	80079a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d010      	beq.n	80079fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	4b31      	ldr	r3, [pc, #196]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d208      	bcs.n	80079fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079ec:	4b2e      	ldr	r3, [pc, #184]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	492b      	ldr	r1, [pc, #172]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079fe:	4b29      	ldr	r3, [pc, #164]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0307 	and.w	r3, r3, #7
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d210      	bcs.n	8007a2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a0c:	4b25      	ldr	r3, [pc, #148]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f023 0207 	bic.w	r2, r3, #7
 8007a14:	4923      	ldr	r1, [pc, #140]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a1c:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <HAL_RCC_ClockConfig+0x1ec>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d001      	beq.n	8007a2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e036      	b.n	8007a9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d008      	beq.n	8007a4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a3a:	4b1b      	ldr	r3, [pc, #108]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	4918      	ldr	r1, [pc, #96]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d009      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a58:	4b13      	ldr	r3, [pc, #76]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	4910      	ldr	r1, [pc, #64]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007a6c:	f000 f824 	bl	8007ab8 <HAL_RCC_GetSysClockFreq>
 8007a70:	4602      	mov	r2, r0
 8007a72:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <HAL_RCC_ClockConfig+0x1f0>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	091b      	lsrs	r3, r3, #4
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	490b      	ldr	r1, [pc, #44]	; (8007aac <HAL_RCC_ClockConfig+0x1f4>)
 8007a7e:	5ccb      	ldrb	r3, [r1, r3]
 8007a80:	f003 031f 	and.w	r3, r3, #31
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
 8007a88:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <HAL_RCC_ClockConfig+0x1f8>)
 8007a8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007a8c:	4b09      	ldr	r3, [pc, #36]	; (8007ab4 <HAL_RCC_ClockConfig+0x1fc>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe fe9b 	bl	80067cc <HAL_InitTick>
 8007a96:	4603      	mov	r3, r0
 8007a98:	72fb      	strb	r3, [r7, #11]

  return status;
 8007a9a:	7afb      	ldrb	r3, [r7, #11]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40022000 	.word	0x40022000
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	0800d01c 	.word	0x0800d01c
 8007ab0:	20000000 	.word	0x20000000
 8007ab4:	20000158 	.word	0x20000158

08007ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b089      	sub	sp, #36	; 0x24
 8007abc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ac6:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 030c 	and.w	r3, r3, #12
 8007ace:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ad0:	4b3b      	ldr	r3, [pc, #236]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0303 	and.w	r3, r3, #3
 8007ad8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_RCC_GetSysClockFreq+0x34>
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2b0c      	cmp	r3, #12
 8007ae4:	d121      	bne.n	8007b2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d11e      	bne.n	8007b2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007aec:	4b34      	ldr	r3, [pc, #208]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0308 	and.w	r3, r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d107      	bne.n	8007b08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007af8:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007afe:	0a1b      	lsrs	r3, r3, #8
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	61fb      	str	r3, [r7, #28]
 8007b06:	e005      	b.n	8007b14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007b08:	4b2d      	ldr	r3, [pc, #180]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	091b      	lsrs	r3, r3, #4
 8007b0e:	f003 030f 	and.w	r3, r3, #15
 8007b12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007b14:	4a2b      	ldr	r2, [pc, #172]	; (8007bc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10d      	bne.n	8007b40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007b28:	e00a      	b.n	8007b40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d102      	bne.n	8007b36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007b30:	4b25      	ldr	r3, [pc, #148]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	e004      	b.n	8007b40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	2b08      	cmp	r3, #8
 8007b3a:	d101      	bne.n	8007b40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007b3c:	4b23      	ldr	r3, [pc, #140]	; (8007bcc <HAL_RCC_GetSysClockFreq+0x114>)
 8007b3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b0c      	cmp	r3, #12
 8007b44:	d134      	bne.n	8007bb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007b46:	4b1e      	ldr	r3, [pc, #120]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f003 0303 	and.w	r3, r3, #3
 8007b4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d003      	beq.n	8007b5e <HAL_RCC_GetSysClockFreq+0xa6>
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	2b03      	cmp	r3, #3
 8007b5a:	d003      	beq.n	8007b64 <HAL_RCC_GetSysClockFreq+0xac>
 8007b5c:	e005      	b.n	8007b6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007b5e:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007b60:	617b      	str	r3, [r7, #20]
      break;
 8007b62:	e005      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007b64:	4b19      	ldr	r3, [pc, #100]	; (8007bcc <HAL_RCC_GetSysClockFreq+0x114>)
 8007b66:	617b      	str	r3, [r7, #20]
      break;
 8007b68:	e002      	b.n	8007b70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	617b      	str	r3, [r7, #20]
      break;
 8007b6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	091b      	lsrs	r3, r3, #4
 8007b76:	f003 0307 	and.w	r3, r3, #7
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007b7e:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	0a1b      	lsrs	r3, r3, #8
 8007b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	fb03 f202 	mul.w	r2, r3, r2
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b96:	4b0a      	ldr	r3, [pc, #40]	; (8007bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	0e5b      	lsrs	r3, r3, #25
 8007b9c:	f003 0303 	and.w	r3, r3, #3
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3724      	adds	r7, #36	; 0x24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	40021000 	.word	0x40021000
 8007bc4:	0800d02c 	.word	0x0800d02c
 8007bc8:	00f42400 	.word	0x00f42400
 8007bcc:	007a1200 	.word	0x007a1200

08007bd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007bdc:	4b2a      	ldr	r3, [pc, #168]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007be8:	f7ff fa26 	bl	8007038 <HAL_PWREx_GetVoltageRange>
 8007bec:	6178      	str	r0, [r7, #20]
 8007bee:	e014      	b.n	8007c1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007bf0:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf4:	4a24      	ldr	r2, [pc, #144]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8007bfc:	4b22      	ldr	r3, [pc, #136]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007c08:	f7ff fa16 	bl	8007038 <HAL_PWREx_GetVoltageRange>
 8007c0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007c0e:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c12:	4a1d      	ldr	r2, [pc, #116]	; (8007c88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c18:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c20:	d10b      	bne.n	8007c3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b80      	cmp	r3, #128	; 0x80
 8007c26:	d919      	bls.n	8007c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2ba0      	cmp	r3, #160	; 0xa0
 8007c2c:	d902      	bls.n	8007c34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c2e:	2302      	movs	r3, #2
 8007c30:	613b      	str	r3, [r7, #16]
 8007c32:	e013      	b.n	8007c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c34:	2301      	movs	r3, #1
 8007c36:	613b      	str	r3, [r7, #16]
 8007c38:	e010      	b.n	8007c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2b80      	cmp	r3, #128	; 0x80
 8007c3e:	d902      	bls.n	8007c46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007c40:	2303      	movs	r3, #3
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	e00a      	b.n	8007c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d102      	bne.n	8007c52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	e004      	b.n	8007c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b70      	cmp	r3, #112	; 0x70
 8007c56:	d101      	bne.n	8007c5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007c58:	2301      	movs	r3, #1
 8007c5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f023 0207 	bic.w	r2, r3, #7
 8007c64:	4909      	ldr	r1, [pc, #36]	; (8007c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007c6c:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d001      	beq.n	8007c7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3718      	adds	r7, #24
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	40022000 	.word	0x40022000

08007c90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b086      	sub	sp, #24
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c98:	2300      	movs	r3, #0
 8007c9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d041      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007cb4:	d02a      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007cb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007cba:	d824      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cc0:	d008      	beq.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007cc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007cc6:	d81e      	bhi.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00a      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007ccc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd0:	d010      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007cd2:	e018      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007cd4:	4b86      	ldr	r3, [pc, #536]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	4a85      	ldr	r2, [pc, #532]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007cda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007ce0:	e015      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fabb 	bl	8008264 <RCCEx_PLLSAI1_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007cf2:	e00c      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3320      	adds	r3, #32
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fba6 	bl	800844c <RCCEx_PLLSAI2_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007d04:	e003      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	74fb      	strb	r3, [r7, #19]
      break;
 8007d0a:	e000      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007d0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d0e:	7cfb      	ldrb	r3, [r7, #19]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10b      	bne.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d14:	4b76      	ldr	r3, [pc, #472]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d22:	4973      	ldr	r1, [pc, #460]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007d2a:	e001      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2c:	7cfb      	ldrb	r3, [r7, #19]
 8007d2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d041      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d40:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d44:	d02a      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007d46:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d4a:	d824      	bhi.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007d4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d50:	d008      	beq.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007d52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d56:	d81e      	bhi.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00a      	beq.n	8007d72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d60:	d010      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007d62:	e018      	b.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007d64:	4b62      	ldr	r3, [pc, #392]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	4a61      	ldr	r2, [pc, #388]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d70:	e015      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3304      	adds	r3, #4
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fa73 	bl	8008264 <RCCEx_PLLSAI1_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d82:	e00c      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3320      	adds	r3, #32
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fb5e 	bl	800844c <RCCEx_PLLSAI2_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007d94:	e003      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	74fb      	strb	r3, [r7, #19]
      break;
 8007d9a:	e000      	b.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d9e:	7cfb      	ldrb	r3, [r7, #19]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10b      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007da4:	4b52      	ldr	r3, [pc, #328]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007db2:	494f      	ldr	r1, [pc, #316]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007dba:	e001      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dbc:	7cfb      	ldrb	r3, [r7, #19]
 8007dbe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80a0 	beq.w	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007dd2:	4b47      	ldr	r3, [pc, #284]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d101      	bne.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e000      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007de2:	2300      	movs	r3, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00d      	beq.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007de8:	4b41      	ldr	r3, [pc, #260]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dec:	4a40      	ldr	r2, [pc, #256]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df2:	6593      	str	r3, [r2, #88]	; 0x58
 8007df4:	4b3e      	ldr	r3, [pc, #248]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dfc:	60bb      	str	r3, [r7, #8]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e00:	2301      	movs	r3, #1
 8007e02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e04:	4b3b      	ldr	r3, [pc, #236]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a3a      	ldr	r2, [pc, #232]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e10:	f7fe fd2c 	bl	800686c <HAL_GetTick>
 8007e14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e16:	e009      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e18:	f7fe fd28 	bl	800686c <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d902      	bls.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	74fb      	strb	r3, [r7, #19]
        break;
 8007e2a:	e005      	b.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007e2c:	4b31      	ldr	r3, [pc, #196]	; (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0ef      	beq.n	8007e18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007e38:	7cfb      	ldrb	r3, [r7, #19]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d15c      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007e3e:	4b2c      	ldr	r3, [pc, #176]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d01f      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d019      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e5c:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007e68:	4b21      	ldr	r3, [pc, #132]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6e:	4a20      	ldr	r2, [pc, #128]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e78:	4b1d      	ldr	r3, [pc, #116]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e7e:	4a1c      	ldr	r2, [pc, #112]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007e88:	4a19      	ldr	r2, [pc, #100]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d016      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e9a:	f7fe fce7 	bl	800686c <HAL_GetTick>
 8007e9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ea0:	e00b      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ea2:	f7fe fce3 	bl	800686c <HAL_GetTick>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d902      	bls.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	74fb      	strb	r3, [r7, #19]
            break;
 8007eb8:	e006      	b.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007eba:	4b0d      	ldr	r3, [pc, #52]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0ec      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007ec8:	7cfb      	ldrb	r3, [r7, #19]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10c      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ece:	4b08      	ldr	r3, [pc, #32]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ede:	4904      	ldr	r1, [pc, #16]	; (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007ee6:	e009      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007ee8:	7cfb      	ldrb	r3, [r7, #19]
 8007eea:	74bb      	strb	r3, [r7, #18]
 8007eec:	e006      	b.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007eee:	bf00      	nop
 8007ef0:	40021000 	.word	0x40021000
 8007ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef8:	7cfb      	ldrb	r3, [r7, #19]
 8007efa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007efc:	7c7b      	ldrb	r3, [r7, #17]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d105      	bne.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f02:	4b9e      	ldr	r3, [pc, #632]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f06:	4a9d      	ldr	r2, [pc, #628]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f1a:	4b98      	ldr	r3, [pc, #608]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	f023 0203 	bic.w	r2, r3, #3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f28:	4994      	ldr	r1, [pc, #592]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f3c:	4b8f      	ldr	r3, [pc, #572]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f42:	f023 020c 	bic.w	r2, r3, #12
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4a:	498c      	ldr	r1, [pc, #560]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0304 	and.w	r3, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f5e:	4b87      	ldr	r3, [pc, #540]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	4983      	ldr	r1, [pc, #524]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f80:	4b7e      	ldr	r3, [pc, #504]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8e:	497b      	ldr	r1, [pc, #492]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007f90:	4313      	orrs	r3, r2
 8007f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0310 	and.w	r3, r3, #16
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007fa2:	4b76      	ldr	r3, [pc, #472]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fb0:	4972      	ldr	r1, [pc, #456]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0320 	and.w	r3, r3, #32
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fc4:	4b6d      	ldr	r3, [pc, #436]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fd2:	496a      	ldr	r1, [pc, #424]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fe6:	4b65      	ldr	r3, [pc, #404]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ff4:	4961      	ldr	r1, [pc, #388]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00a      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008008:	4b5c      	ldr	r3, [pc, #368]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800800a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008016:	4959      	ldr	r1, [pc, #356]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008018:	4313      	orrs	r3, r2
 800801a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800802a:	4b54      	ldr	r3, [pc, #336]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800802c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008030:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008038:	4950      	ldr	r1, [pc, #320]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800803a:	4313      	orrs	r3, r2
 800803c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00a      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800804c:	4b4b      	ldr	r3, [pc, #300]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800804e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008052:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805a:	4948      	ldr	r1, [pc, #288]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800805c:	4313      	orrs	r3, r2
 800805e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800806e:	4b43      	ldr	r3, [pc, #268]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008074:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807c:	493f      	ldr	r1, [pc, #252]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d028      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008090:	4b3a      	ldr	r3, [pc, #232]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800809e:	4937      	ldr	r1, [pc, #220]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ae:	d106      	bne.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80080b0:	4b32      	ldr	r3, [pc, #200]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4a31      	ldr	r2, [pc, #196]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080ba:	60d3      	str	r3, [r2, #12]
 80080bc:	e011      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080c6:	d10c      	bne.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3304      	adds	r3, #4
 80080cc:	2101      	movs	r1, #1
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f8c8 	bl	8008264 <RCCEx_PLLSAI1_Config>
 80080d4:	4603      	mov	r3, r0
 80080d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80080d8:	7cfb      	ldrb	r3, [r7, #19]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80080de:	7cfb      	ldrb	r3, [r7, #19]
 80080e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d028      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80080ee:	4b23      	ldr	r3, [pc, #140]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fc:	491f      	ldr	r1, [pc, #124]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800810c:	d106      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800810e:	4b1b      	ldr	r3, [pc, #108]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	4a1a      	ldr	r2, [pc, #104]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008118:	60d3      	str	r3, [r2, #12]
 800811a:	e011      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008120:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008124:	d10c      	bne.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	2101      	movs	r1, #1
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f899 	bl	8008264 <RCCEx_PLLSAI1_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008136:	7cfb      	ldrb	r3, [r7, #19]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800813c:	7cfb      	ldrb	r3, [r7, #19]
 800813e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d02b      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800814c:	4b0b      	ldr	r3, [pc, #44]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800814e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800815a:	4908      	ldr	r1, [pc, #32]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800815c:	4313      	orrs	r3, r2
 800815e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800816a:	d109      	bne.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800816c:	4b03      	ldr	r3, [pc, #12]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4a02      	ldr	r2, [pc, #8]	; (800817c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8008172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008176:	60d3      	str	r3, [r2, #12]
 8008178:	e014      	b.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800817a:	bf00      	nop
 800817c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008184:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008188:	d10c      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3304      	adds	r3, #4
 800818e:	2101      	movs	r1, #1
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f867 	bl	8008264 <RCCEx_PLLSAI1_Config>
 8008196:	4603      	mov	r3, r0
 8008198:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800819a:	7cfb      	ldrb	r3, [r7, #19]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d001      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80081a0:	7cfb      	ldrb	r3, [r7, #19]
 80081a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d02f      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80081b0:	4b2b      	ldr	r3, [pc, #172]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80081b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081be:	4928      	ldr	r1, [pc, #160]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80081c0:	4313      	orrs	r3, r2
 80081c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ce:	d10d      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3304      	adds	r3, #4
 80081d4:	2102      	movs	r1, #2
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f844 	bl	8008264 <RCCEx_PLLSAI1_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80081e0:	7cfb      	ldrb	r3, [r7, #19]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d014      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80081e6:	7cfb      	ldrb	r3, [r7, #19]
 80081e8:	74bb      	strb	r3, [r7, #18]
 80081ea:	e011      	b.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081f4:	d10c      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3320      	adds	r3, #32
 80081fa:	2102      	movs	r1, #2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 f925 	bl	800844c <RCCEx_PLLSAI2_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008206:	7cfb      	ldrb	r3, [r7, #19]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800820c:	7cfb      	ldrb	r3, [r7, #19]
 800820e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800821c:	4b10      	ldr	r3, [pc, #64]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800821e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008222:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800822a:	490d      	ldr	r1, [pc, #52]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800822c:	4313      	orrs	r3, r2
 800822e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00b      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800823e:	4b08      	ldr	r3, [pc, #32]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008244:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800824e:	4904      	ldr	r1, [pc, #16]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8008250:	4313      	orrs	r3, r2
 8008252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8008256:	7cbb      	ldrb	r3, [r7, #18]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3718      	adds	r7, #24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40021000 	.word	0x40021000

08008264 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008272:	4b75      	ldr	r3, [pc, #468]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	f003 0303 	and.w	r3, r3, #3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d018      	beq.n	80082b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800827e:	4b72      	ldr	r3, [pc, #456]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f003 0203 	and.w	r2, r3, #3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	429a      	cmp	r2, r3
 800828c:	d10d      	bne.n	80082aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
       ||
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008296:	4b6c      	ldr	r3, [pc, #432]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	091b      	lsrs	r3, r3, #4
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
       ||
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d047      	beq.n	800833a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	73fb      	strb	r3, [r7, #15]
 80082ae:	e044      	b.n	800833a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b03      	cmp	r3, #3
 80082b6:	d018      	beq.n	80082ea <RCCEx_PLLSAI1_Config+0x86>
 80082b8:	2b03      	cmp	r3, #3
 80082ba:	d825      	bhi.n	8008308 <RCCEx_PLLSAI1_Config+0xa4>
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d002      	beq.n	80082c6 <RCCEx_PLLSAI1_Config+0x62>
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d009      	beq.n	80082d8 <RCCEx_PLLSAI1_Config+0x74>
 80082c4:	e020      	b.n	8008308 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80082c6:	4b60      	ldr	r3, [pc, #384]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d11d      	bne.n	800830e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082d6:	e01a      	b.n	800830e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80082d8:	4b5b      	ldr	r3, [pc, #364]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d116      	bne.n	8008312 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082e8:	e013      	b.n	8008312 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80082ea:	4b57      	ldr	r3, [pc, #348]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10f      	bne.n	8008316 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80082f6:	4b54      	ldr	r3, [pc, #336]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d109      	bne.n	8008316 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008306:	e006      	b.n	8008316 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
      break;
 800830c:	e004      	b.n	8008318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800830e:	bf00      	nop
 8008310:	e002      	b.n	8008318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008316:	bf00      	nop
    }

    if(status == HAL_OK)
 8008318:	7bfb      	ldrb	r3, [r7, #15]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d10d      	bne.n	800833a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800831e:	4b4a      	ldr	r3, [pc, #296]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6819      	ldr	r1, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	3b01      	subs	r3, #1
 8008330:	011b      	lsls	r3, r3, #4
 8008332:	430b      	orrs	r3, r1
 8008334:	4944      	ldr	r1, [pc, #272]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008336:	4313      	orrs	r3, r2
 8008338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d17d      	bne.n	800843c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008340:	4b41      	ldr	r3, [pc, #260]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a40      	ldr	r2, [pc, #256]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008346:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800834a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800834c:	f7fe fa8e 	bl	800686c <HAL_GetTick>
 8008350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008352:	e009      	b.n	8008368 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008354:	f7fe fa8a 	bl	800686c <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d902      	bls.n	8008368 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	73fb      	strb	r3, [r7, #15]
        break;
 8008366:	e005      	b.n	8008374 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008368:	4b37      	ldr	r3, [pc, #220]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1ef      	bne.n	8008354 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008374:	7bfb      	ldrb	r3, [r7, #15]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d160      	bne.n	800843c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d111      	bne.n	80083a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008380:	4b31      	ldr	r3, [pc, #196]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6892      	ldr	r2, [r2, #8]
 8008390:	0211      	lsls	r1, r2, #8
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	68d2      	ldr	r2, [r2, #12]
 8008396:	0912      	lsrs	r2, r2, #4
 8008398:	0452      	lsls	r2, r2, #17
 800839a:	430a      	orrs	r2, r1
 800839c:	492a      	ldr	r1, [pc, #168]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800839e:	4313      	orrs	r3, r2
 80083a0:	610b      	str	r3, [r1, #16]
 80083a2:	e027      	b.n	80083f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d112      	bne.n	80083d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083aa:	4b27      	ldr	r3, [pc, #156]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80083b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6892      	ldr	r2, [r2, #8]
 80083ba:	0211      	lsls	r1, r2, #8
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	6912      	ldr	r2, [r2, #16]
 80083c0:	0852      	lsrs	r2, r2, #1
 80083c2:	3a01      	subs	r2, #1
 80083c4:	0552      	lsls	r2, r2, #21
 80083c6:	430a      	orrs	r2, r1
 80083c8:	491f      	ldr	r1, [pc, #124]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	610b      	str	r3, [r1, #16]
 80083ce:	e011      	b.n	80083f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80083d0:	4b1d      	ldr	r3, [pc, #116]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80083d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6892      	ldr	r2, [r2, #8]
 80083e0:	0211      	lsls	r1, r2, #8
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6952      	ldr	r2, [r2, #20]
 80083e6:	0852      	lsrs	r2, r2, #1
 80083e8:	3a01      	subs	r2, #1
 80083ea:	0652      	lsls	r2, r2, #25
 80083ec:	430a      	orrs	r2, r1
 80083ee:	4916      	ldr	r1, [pc, #88]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80083f4:	4b14      	ldr	r3, [pc, #80]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a13      	ldr	r2, [pc, #76]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 80083fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008400:	f7fe fa34 	bl	800686c <HAL_GetTick>
 8008404:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008406:	e009      	b.n	800841c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008408:	f7fe fa30 	bl	800686c <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d902      	bls.n	800841c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	73fb      	strb	r3, [r7, #15]
          break;
 800841a:	e005      	b.n	8008428 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d0ef      	beq.n	8008408 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d106      	bne.n	800843c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800842e:	4b06      	ldr	r3, [pc, #24]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	4904      	ldr	r1, [pc, #16]	; (8008448 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008438:	4313      	orrs	r3, r2
 800843a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	40021000 	.word	0x40021000

0800844c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008456:	2300      	movs	r3, #0
 8008458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800845a:	4b6a      	ldr	r3, [pc, #424]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	f003 0303 	and.w	r3, r3, #3
 8008462:	2b00      	cmp	r3, #0
 8008464:	d018      	beq.n	8008498 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008466:	4b67      	ldr	r3, [pc, #412]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	f003 0203 	and.w	r2, r3, #3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	429a      	cmp	r2, r3
 8008474:	d10d      	bne.n	8008492 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
       ||
 800847a:	2b00      	cmp	r3, #0
 800847c:	d009      	beq.n	8008492 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800847e:	4b61      	ldr	r3, [pc, #388]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	091b      	lsrs	r3, r3, #4
 8008484:	f003 0307 	and.w	r3, r3, #7
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
       ||
 800848e:	429a      	cmp	r2, r3
 8008490:	d047      	beq.n	8008522 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	73fb      	strb	r3, [r7, #15]
 8008496:	e044      	b.n	8008522 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d018      	beq.n	80084d2 <RCCEx_PLLSAI2_Config+0x86>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d825      	bhi.n	80084f0 <RCCEx_PLLSAI2_Config+0xa4>
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d002      	beq.n	80084ae <RCCEx_PLLSAI2_Config+0x62>
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d009      	beq.n	80084c0 <RCCEx_PLLSAI2_Config+0x74>
 80084ac:	e020      	b.n	80084f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80084ae:	4b55      	ldr	r3, [pc, #340]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d11d      	bne.n	80084f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084be:	e01a      	b.n	80084f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80084c0:	4b50      	ldr	r3, [pc, #320]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d116      	bne.n	80084fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084d0:	e013      	b.n	80084fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80084d2:	4b4c      	ldr	r3, [pc, #304]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10f      	bne.n	80084fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80084de:	4b49      	ldr	r3, [pc, #292]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084ee:	e006      	b.n	80084fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
      break;
 80084f4:	e004      	b.n	8008500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80084f6:	bf00      	nop
 80084f8:	e002      	b.n	8008500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80084fa:	bf00      	nop
 80084fc:	e000      	b.n	8008500 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80084fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8008500:	7bfb      	ldrb	r3, [r7, #15]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10d      	bne.n	8008522 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008506:	4b3f      	ldr	r3, [pc, #252]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6819      	ldr	r1, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	3b01      	subs	r3, #1
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	430b      	orrs	r3, r1
 800851c:	4939      	ldr	r1, [pc, #228]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800851e:	4313      	orrs	r3, r2
 8008520:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008522:	7bfb      	ldrb	r3, [r7, #15]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d167      	bne.n	80085f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008528:	4b36      	ldr	r3, [pc, #216]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a35      	ldr	r2, [pc, #212]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800852e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008532:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008534:	f7fe f99a 	bl	800686c <HAL_GetTick>
 8008538:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800853a:	e009      	b.n	8008550 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800853c:	f7fe f996 	bl	800686c <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	2b02      	cmp	r3, #2
 8008548:	d902      	bls.n	8008550 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	73fb      	strb	r3, [r7, #15]
        break;
 800854e:	e005      	b.n	800855c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008550:	4b2c      	ldr	r3, [pc, #176]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1ef      	bne.n	800853c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d14a      	bne.n	80085f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d111      	bne.n	800858c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008568:	4b26      	ldr	r3, [pc, #152]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	6892      	ldr	r2, [r2, #8]
 8008578:	0211      	lsls	r1, r2, #8
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	68d2      	ldr	r2, [r2, #12]
 800857e:	0912      	lsrs	r2, r2, #4
 8008580:	0452      	lsls	r2, r2, #17
 8008582:	430a      	orrs	r2, r1
 8008584:	491f      	ldr	r1, [pc, #124]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 8008586:	4313      	orrs	r3, r2
 8008588:	614b      	str	r3, [r1, #20]
 800858a:	e011      	b.n	80085b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800858c:	4b1d      	ldr	r3, [pc, #116]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008594:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6892      	ldr	r2, [r2, #8]
 800859c:	0211      	lsls	r1, r2, #8
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	6912      	ldr	r2, [r2, #16]
 80085a2:	0852      	lsrs	r2, r2, #1
 80085a4:	3a01      	subs	r2, #1
 80085a6:	0652      	lsls	r2, r2, #25
 80085a8:	430a      	orrs	r2, r1
 80085aa:	4916      	ldr	r1, [pc, #88]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80085b0:	4b14      	ldr	r3, [pc, #80]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a13      	ldr	r2, [pc, #76]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085bc:	f7fe f956 	bl	800686c <HAL_GetTick>
 80085c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085c2:	e009      	b.n	80085d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80085c4:	f7fe f952 	bl	800686c <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	d902      	bls.n	80085d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80085d2:	2303      	movs	r3, #3
 80085d4:	73fb      	strb	r3, [r7, #15]
          break;
 80085d6:	e005      	b.n	80085e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80085d8:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d0ef      	beq.n	80085c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80085e4:	7bfb      	ldrb	r3, [r7, #15]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80085ea:	4b06      	ldr	r3, [pc, #24]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085ec:	695a      	ldr	r2, [r3, #20]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	4904      	ldr	r1, [pc, #16]	; (8008604 <RCCEx_PLLSAI2_Config+0x1b8>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	40021000 	.word	0x40021000

08008608 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d079      	beq.n	800870e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008620:	b2db      	uxtb	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d106      	bne.n	8008634 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7f8 f9c6 	bl	80009c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	f003 0310 	and.w	r3, r3, #16
 8008646:	2b10      	cmp	r3, #16
 8008648:	d058      	beq.n	80086fc <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	22ca      	movs	r2, #202	; 0xca
 8008650:	625a      	str	r2, [r3, #36]	; 0x24
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2253      	movs	r2, #83	; 0x53
 8008658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f880 	bl	8008760 <RTC_EnterInitMode>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d127      	bne.n	80086ba <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	6812      	ldr	r2, [r2, #0]
 8008674:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800867c:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6899      	ldr	r1, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	431a      	orrs	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	699b      	ldr	r3, [r3, #24]
 8008692:	431a      	orrs	r2, r3
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	430a      	orrs	r2, r1
 800869a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	68d2      	ldr	r2, [r2, #12]
 80086a4:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6919      	ldr	r1, [r3, #16]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	041a      	lsls	r2, r3, #16
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 f884 	bl	80087c8 <RTC_ExitInitMode>
 80086c0:	4603      	mov	r3, r0
 80086c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d113      	bne.n	80086f2 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0203 	bic.w	r2, r2, #3
 80086d8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69da      	ldr	r2, [r3, #28]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	431a      	orrs	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	22ff      	movs	r2, #255	; 0xff
 80086f8:	625a      	str	r2, [r3, #36]	; 0x24
 80086fa:	e001      	b.n	8008700 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80086fc:	2300      	movs	r3, #0
 80086fe:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d103      	bne.n	800870e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 800870e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a0d      	ldr	r2, [pc, #52]	; (800875c <HAL_RTC_WaitForSynchro+0x44>)
 8008726:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008728:	f7fe f8a0 	bl	800686c <HAL_GetTick>
 800872c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800872e:	e009      	b.n	8008744 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008730:	f7fe f89c 	bl	800686c <HAL_GetTick>
 8008734:	4602      	mov	r2, r0
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800873e:	d901      	bls.n	8008744 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e007      	b.n	8008754 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	f003 0320 	and.w	r3, r3, #32
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0ee      	beq.n	8008730 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	0003ff5f 	.word	0x0003ff5f

08008760 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008768:	2300      	movs	r3, #0
 800876a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008776:	2b00      	cmp	r3, #0
 8008778:	d120      	bne.n	80087bc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f04f 32ff 	mov.w	r2, #4294967295
 8008782:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008784:	f7fe f872 	bl	800686c <HAL_GetTick>
 8008788:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800878a:	e00d      	b.n	80087a8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800878c:	f7fe f86e 	bl	800686c <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800879a:	d905      	bls.n	80087a8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2203      	movs	r2, #3
 80087a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d102      	bne.n	80087bc <RTC_EnterInitMode+0x5c>
 80087b6:	7bfb      	ldrb	r3, [r7, #15]
 80087b8:	2b03      	cmp	r3, #3
 80087ba:	d1e7      	bne.n	800878c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80087d4:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <RTC_ExitInitMode+0x78>)
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	4a19      	ldr	r2, [pc, #100]	; (8008840 <RTC_ExitInitMode+0x78>)
 80087da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087de:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80087e0:	4b17      	ldr	r3, [pc, #92]	; (8008840 <RTC_ExitInitMode+0x78>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10c      	bne.n	8008806 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff ff93 	bl	8008718 <HAL_RTC_WaitForSynchro>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d01e      	beq.n	8008836 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2203      	movs	r2, #3
 80087fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	73fb      	strb	r3, [r7, #15]
 8008804:	e017      	b.n	8008836 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008806:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <RTC_ExitInitMode+0x78>)
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <RTC_ExitInitMode+0x78>)
 800880c:	f023 0320 	bic.w	r3, r3, #32
 8008810:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f7ff ff80 	bl	8008718 <HAL_RTC_WaitForSynchro>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d005      	beq.n	800882a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2203      	movs	r2, #3
 8008822:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800882a:	4b05      	ldr	r3, [pc, #20]	; (8008840 <RTC_ExitInitMode+0x78>)
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	4a04      	ldr	r2, [pc, #16]	; (8008840 <RTC_ExitInitMode+0x78>)
 8008830:	f043 0320 	orr.w	r3, r3, #32
 8008834:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	40002800 	.word	0x40002800

08008844 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b086      	sub	sp, #24
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800885a:	2302      	movs	r3, #2
 800885c:	e07f      	b.n	800895e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2202      	movs	r2, #2
 800886a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	22ca      	movs	r2, #202	; 0xca
 8008874:	625a      	str	r2, [r3, #36]	; 0x24
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2253      	movs	r2, #83	; 0x53
 800887c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800888c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	b2da      	uxtb	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800889e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d120      	bne.n	80088f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80088ae:	f7fd ffdd 	bl	800686c <HAL_GetTick>
 80088b2:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80088b4:	e015      	b.n	80088e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088b6:	f7fd ffd9 	bl	800686c <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088c4:	d90d      	bls.n	80088e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	22ff      	movs	r2, #255	; 0xff
 80088cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2203      	movs	r2, #3
 80088d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e03d      	b.n	800895e <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d0e2      	beq.n	80088b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	f023 0107 	bic.w	r1, r3, #7
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	430a      	orrs	r2, r1
 800890a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800890c:	4b16      	ldr	r3, [pc, #88]	; (8008968 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a15      	ldr	r2, [pc, #84]	; (8008968 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8008912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008916:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008918:	4b13      	ldr	r3, [pc, #76]	; (8008968 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	4a12      	ldr	r2, [pc, #72]	; (8008968 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800891e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008922:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689a      	ldr	r2, [r3, #8]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008932:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	689a      	ldr	r2, [r3, #8]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008942:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	22ff      	movs	r2, #255	; 0xff
 800894a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	40010400 	.word	0x40010400

0800896c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	3350      	adds	r3, #80	; 0x50
 800897e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	009a      	lsls	r2, r3, #2
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4413      	add	r3, r2
 8008988:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	461a      	mov	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6013      	str	r3, [r2, #0]
}
 8008992:	bf00      	nop
 8008994:	371c      	adds	r7, #28
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800899e:	b480      	push	{r7}
 80089a0:	b085      	sub	sp, #20
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
 80089a6:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3350      	adds	r3, #80	; 0x50
 80089ae:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr

080089ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b084      	sub	sp, #16
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e095      	b.n	8008b08 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d108      	bne.n	80089f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089ec:	d009      	beq.n	8008a02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	61da      	str	r2, [r3, #28]
 80089f4:	e005      	b.n	8008a02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d106      	bne.n	8008a22 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7f8 f801 	bl	8000a24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2202      	movs	r2, #2
 8008a26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a38:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a42:	d902      	bls.n	8008a4a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]
 8008a48:	e002      	b.n	8008a50 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a4e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a58:	d007      	beq.n	8008a6a <HAL_SPI_Init+0xa0>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a62:	d002      	beq.n	8008a6a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	f003 0302 	and.w	r3, r3, #2
 8008a84:	431a      	orrs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	f003 0301 	and.w	r3, r3, #1
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aa2:	431a      	orrs	r2, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aac:	ea42 0103 	orr.w	r1, r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	0c1b      	lsrs	r3, r3, #16
 8008ac6:	f003 0204 	and.w	r2, r3, #4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	f003 0310 	and.w	r3, r3, #16
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad8:	f003 0308 	and.w	r3, r3, #8
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	68db      	ldr	r3, [r3, #12]
 8008ae2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ae6:	ea42 0103 	orr.w	r1, r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b088      	sub	sp, #32
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	603b      	str	r3, [r7, #0]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d101      	bne.n	8008b32 <HAL_SPI_Transmit+0x22>
 8008b2e:	2302      	movs	r3, #2
 8008b30:	e15f      	b.n	8008df2 <HAL_SPI_Transmit+0x2e2>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b3a:	f7fd fe97 	bl	800686c <HAL_GetTick>
 8008b3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008b40:	88fb      	ldrh	r3, [r7, #6]
 8008b42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d002      	beq.n	8008b56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008b50:	2302      	movs	r3, #2
 8008b52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b54:	e148      	b.n	8008de8 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d002      	beq.n	8008b62 <HAL_SPI_Transmit+0x52>
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008b66:	e13f      	b.n	8008de8 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2203      	movs	r2, #3
 8008b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	88fa      	ldrh	r2, [r7, #6]
 8008b80:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	88fa      	ldrh	r2, [r7, #6]
 8008b86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bb2:	d10f      	bne.n	8008bd4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bde:	2b40      	cmp	r3, #64	; 0x40
 8008be0:	d007      	beq.n	8008bf2 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bfa:	d94f      	bls.n	8008c9c <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <HAL_SPI_Transmit+0xfa>
 8008c04:	8afb      	ldrh	r3, [r7, #22]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d142      	bne.n	8008c90 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	881a      	ldrh	r2, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	1c9a      	adds	r2, r3, #2
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	3b01      	subs	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008c2e:	e02f      	b.n	8008c90 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	f003 0302 	and.w	r3, r3, #2
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d112      	bne.n	8008c64 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c42:	881a      	ldrh	r2, [r3, #0]
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4e:	1c9a      	adds	r2, r3, #2
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c62:	e015      	b.n	8008c90 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c64:	f7fd fe02 	bl	800686c <HAL_GetTick>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	1ad3      	subs	r3, r2, r3
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d803      	bhi.n	8008c7c <HAL_SPI_Transmit+0x16c>
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d102      	bne.n	8008c82 <HAL_SPI_Transmit+0x172>
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d106      	bne.n	8008c90 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008c8e:	e0ab      	b.n	8008de8 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1ca      	bne.n	8008c30 <HAL_SPI_Transmit+0x120>
 8008c9a:	e080      	b.n	8008d9e <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d002      	beq.n	8008caa <HAL_SPI_Transmit+0x19a>
 8008ca4:	8afb      	ldrh	r3, [r7, #22]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d174      	bne.n	8008d94 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d912      	bls.n	8008cda <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	881a      	ldrh	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	1c9a      	adds	r2, r3, #2
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	3b02      	subs	r3, #2
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cd8:	e05c      	b.n	8008d94 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	330c      	adds	r3, #12
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cec:	1c5a      	adds	r2, r3, #1
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008d00:	e048      	b.n	8008d94 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d12b      	bne.n	8008d68 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d912      	bls.n	8008d40 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d1e:	881a      	ldrh	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2a:	1c9a      	adds	r2, r3, #2
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	3b02      	subs	r3, #2
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d3e:	e029      	b.n	8008d94 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008d66:	e015      	b.n	8008d94 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d68:	f7fd fd80 	bl	800686c <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	683a      	ldr	r2, [r7, #0]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d803      	bhi.n	8008d80 <HAL_SPI_Transmit+0x270>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7e:	d102      	bne.n	8008d86 <HAL_SPI_Transmit+0x276>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d106      	bne.n	8008d94 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008d92:	e029      	b.n	8008de8 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1b1      	bne.n	8008d02 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	6839      	ldr	r1, [r7, #0]
 8008da2:	68f8      	ldr	r0, [r7, #12]
 8008da4:	f000 fe0c 	bl	80099c0 <SPI_EndRxTxTransaction>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d002      	beq.n	8008db4 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2220      	movs	r2, #32
 8008db2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10a      	bne.n	8008dd2 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	613b      	str	r3, [r7, #16]
 8008dd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	77fb      	strb	r3, [r7, #31]
 8008dde:	e003      	b.n	8008de8 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3720      	adds	r7, #32
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b088      	sub	sp, #32
 8008dfe:	af02      	add	r7, sp, #8
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	603b      	str	r3, [r7, #0]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d002      	beq.n	8008e20 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e1e:	e11a      	b.n	8009056 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008e28:	d112      	bne.n	8008e50 <HAL_SPI_Receive+0x56>
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10e      	bne.n	8008e50 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2204      	movs	r2, #4
 8008e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008e3a:	88fa      	ldrh	r2, [r7, #6]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4613      	mov	r3, r2
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	68b9      	ldr	r1, [r7, #8]
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 f90e 	bl	8009068 <HAL_SPI_TransmitReceive>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	e107      	b.n	8009060 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d101      	bne.n	8008e5e <HAL_SPI_Receive+0x64>
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	e100      	b.n	8009060 <HAL_SPI_Receive+0x266>
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e66:	f7fd fd01 	bl	800686c <HAL_GetTick>
 8008e6a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <HAL_SPI_Receive+0x7e>
 8008e72:	88fb      	ldrh	r3, [r7, #6]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008e7c:	e0eb      	b.n	8009056 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2204      	movs	r2, #4
 8008e82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	88fa      	ldrh	r2, [r7, #6]
 8008e96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	88fa      	ldrh	r2, [r7, #6]
 8008e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ec8:	d908      	bls.n	8008edc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	e007      	b.n	8008eec <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008eea:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ef4:	d10f      	bne.n	8008f16 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008f14:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f20:	2b40      	cmp	r3, #64	; 0x40
 8008f22:	d007      	beq.n	8008f34 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f32:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f3c:	d86f      	bhi.n	800901e <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008f3e:	e034      	b.n	8008faa <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d117      	bne.n	8008f7e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f103 020c 	add.w	r2, r3, #12
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	7812      	ldrb	r2, [r2, #0]
 8008f5c:	b2d2      	uxtb	r2, r2
 8008f5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	1c5a      	adds	r2, r3, #1
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	3b01      	subs	r3, #1
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008f7c:	e015      	b.n	8008faa <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f7e:	f7fd fc75 	bl	800686c <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d803      	bhi.n	8008f96 <HAL_SPI_Receive+0x19c>
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f94:	d102      	bne.n	8008f9c <HAL_SPI_Receive+0x1a2>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8008f9c:	2303      	movs	r3, #3
 8008f9e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8008fa8:	e055      	b.n	8009056 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1c4      	bne.n	8008f40 <HAL_SPI_Receive+0x146>
 8008fb6:	e038      	b.n	800902a <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d115      	bne.n	8008ff2 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68da      	ldr	r2, [r3, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd0:	b292      	uxth	r2, r2
 8008fd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	1c9a      	adds	r2, r3, #2
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008ff0:	e015      	b.n	800901e <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ff2:	f7fd fc3b 	bl	800686c <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d803      	bhi.n	800900a <HAL_SPI_Receive+0x210>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009008:	d102      	bne.n	8009010 <HAL_SPI_Receive+0x216>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d106      	bne.n	800901e <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800901c:	e01b      	b.n	8009056 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009024:	b29b      	uxth	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1c6      	bne.n	8008fb8 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 fc6e 	bl	8009910 <SPI_EndRxTransaction>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d002      	beq.n	8009040 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2220      	movs	r2, #32
 800903e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009044:	2b00      	cmp	r3, #0
 8009046:	d002      	beq.n	800904e <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	75fb      	strb	r3, [r7, #23]
 800904c:	e003      	b.n	8009056 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800905e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009060:	4618      	mov	r0, r3
 8009062:	3718      	adds	r7, #24
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b08a      	sub	sp, #40	; 0x28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]
 8009074:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009076:	2301      	movs	r3, #1
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_SPI_TransmitReceive+0x26>
 800908a:	2302      	movs	r3, #2
 800908c:	e20a      	b.n	80094a4 <HAL_SPI_TransmitReceive+0x43c>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009096:	f7fd fbe9 	bl	800686c <HAL_GetTick>
 800909a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090a2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80090aa:	887b      	ldrh	r3, [r7, #2]
 80090ac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80090ae:	887b      	ldrh	r3, [r7, #2]
 80090b0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80090b2:	7efb      	ldrb	r3, [r7, #27]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d00e      	beq.n	80090d6 <HAL_SPI_TransmitReceive+0x6e>
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090be:	d106      	bne.n	80090ce <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <HAL_SPI_TransmitReceive+0x66>
 80090c8:	7efb      	ldrb	r3, [r7, #27]
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d003      	beq.n	80090d6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80090ce:	2302      	movs	r3, #2
 80090d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80090d4:	e1e0      	b.n	8009498 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <HAL_SPI_TransmitReceive+0x80>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d002      	beq.n	80090e8 <HAL_SPI_TransmitReceive+0x80>
 80090e2:	887b      	ldrh	r3, [r7, #2]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80090ee:	e1d3      	b.n	8009498 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d003      	beq.n	8009104 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2205      	movs	r2, #5
 8009100:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	887a      	ldrh	r2, [r7, #2]
 8009114:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	887a      	ldrh	r2, [r7, #2]
 800911c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	887a      	ldrh	r2, [r7, #2]
 800912a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	887a      	ldrh	r2, [r7, #2]
 8009130:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2200      	movs	r2, #0
 8009136:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	68db      	ldr	r3, [r3, #12]
 8009142:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009146:	d802      	bhi.n	800914e <HAL_SPI_TransmitReceive+0xe6>
 8009148:	8a3b      	ldrh	r3, [r7, #16]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d908      	bls.n	8009160 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	e007      	b.n	8009170 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	685a      	ldr	r2, [r3, #4]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800916e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800917a:	2b40      	cmp	r3, #64	; 0x40
 800917c:	d007      	beq.n	800918e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800918c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009196:	f240 8081 	bls.w	800929c <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <HAL_SPI_TransmitReceive+0x140>
 80091a2:	8a7b      	ldrh	r3, [r7, #18]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d16d      	bne.n	8009284 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	881a      	ldrh	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b8:	1c9a      	adds	r2, r3, #2
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	3b01      	subs	r3, #1
 80091c6:	b29a      	uxth	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091cc:	e05a      	b.n	8009284 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d11b      	bne.n	8009214 <HAL_SPI_TransmitReceive+0x1ac>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d016      	beq.n	8009214 <HAL_SPI_TransmitReceive+0x1ac>
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d113      	bne.n	8009214 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f0:	881a      	ldrh	r2, [r3, #0]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	1c9a      	adds	r2, r3, #2
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b01      	cmp	r3, #1
 8009220:	d11c      	bne.n	800925c <HAL_SPI_TransmitReceive+0x1f4>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	d016      	beq.n	800925c <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	68da      	ldr	r2, [r3, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009238:	b292      	uxth	r2, r2
 800923a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009240:	1c9a      	adds	r2, r3, #2
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009258:	2301      	movs	r3, #1
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800925c:	f7fd fb06 	bl	800686c <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009268:	429a      	cmp	r2, r3
 800926a:	d80b      	bhi.n	8009284 <HAL_SPI_TransmitReceive+0x21c>
 800926c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009272:	d007      	beq.n	8009284 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8009282:	e109      	b.n	8009498 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009288:	b29b      	uxth	r3, r3
 800928a:	2b00      	cmp	r3, #0
 800928c:	d19f      	bne.n	80091ce <HAL_SPI_TransmitReceive+0x166>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009294:	b29b      	uxth	r3, r3
 8009296:	2b00      	cmp	r3, #0
 8009298:	d199      	bne.n	80091ce <HAL_SPI_TransmitReceive+0x166>
 800929a:	e0e3      	b.n	8009464 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_SPI_TransmitReceive+0x244>
 80092a4:	8a7b      	ldrh	r3, [r7, #18]
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	f040 80cf 	bne.w	800944a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d912      	bls.n	80092dc <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ba:	881a      	ldrh	r2, [r3, #0]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c6:	1c9a      	adds	r2, r3, #2
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	3b02      	subs	r3, #2
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80092da:	e0b6      	b.n	800944a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	330c      	adds	r3, #12
 80092e6:	7812      	ldrb	r2, [r2, #0]
 80092e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092f8:	b29b      	uxth	r3, r3
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29a      	uxth	r2, r3
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009302:	e0a2      	b.n	800944a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b02      	cmp	r3, #2
 8009310:	d134      	bne.n	800937c <HAL_SPI_TransmitReceive+0x314>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009316:	b29b      	uxth	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d02f      	beq.n	800937c <HAL_SPI_TransmitReceive+0x314>
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	2b01      	cmp	r3, #1
 8009320:	d12c      	bne.n	800937c <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009326:	b29b      	uxth	r3, r3
 8009328:	2b01      	cmp	r3, #1
 800932a:	d912      	bls.n	8009352 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009330:	881a      	ldrh	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933c:	1c9a      	adds	r2, r3, #2
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009346:	b29b      	uxth	r3, r3
 8009348:	3b02      	subs	r3, #2
 800934a:	b29a      	uxth	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009350:	e012      	b.n	8009378 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	330c      	adds	r3, #12
 800935c:	7812      	ldrb	r2, [r2, #0]
 800935e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009364:	1c5a      	adds	r2, r3, #1
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800936e:	b29b      	uxth	r3, r3
 8009370:	3b01      	subs	r3, #1
 8009372:	b29a      	uxth	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b01      	cmp	r3, #1
 8009388:	d148      	bne.n	800941c <HAL_SPI_TransmitReceive+0x3b4>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009390:	b29b      	uxth	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	d042      	beq.n	800941c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800939c:	b29b      	uxth	r3, r3
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d923      	bls.n	80093ea <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	68da      	ldr	r2, [r3, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ac:	b292      	uxth	r2, r2
 80093ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	1c9a      	adds	r2, r3, #2
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	3b02      	subs	r3, #2
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d81f      	bhi.n	8009418 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80093e6:	605a      	str	r2, [r3, #4]
 80093e8:	e016      	b.n	8009418 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f103 020c 	add.w	r2, r3, #12
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f6:	7812      	ldrb	r2, [r2, #0]
 80093f8:	b2d2      	uxtb	r2, r2
 80093fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009400:	1c5a      	adds	r2, r3, #1
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800940c:	b29b      	uxth	r3, r3
 800940e:	3b01      	subs	r3, #1
 8009410:	b29a      	uxth	r2, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009418:	2301      	movs	r3, #1
 800941a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800941c:	f7fd fa26 	bl	800686c <HAL_GetTick>
 8009420:	4602      	mov	r2, r0
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009428:	429a      	cmp	r2, r3
 800942a:	d803      	bhi.n	8009434 <HAL_SPI_TransmitReceive+0x3cc>
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009432:	d102      	bne.n	800943a <HAL_SPI_TransmitReceive+0x3d2>
 8009434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009436:	2b00      	cmp	r3, #0
 8009438:	d107      	bne.n	800944a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8009448:	e026      	b.n	8009498 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800944e:	b29b      	uxth	r3, r3
 8009450:	2b00      	cmp	r3, #0
 8009452:	f47f af57 	bne.w	8009304 <HAL_SPI_TransmitReceive+0x29c>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800945c:	b29b      	uxth	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	f47f af50 	bne.w	8009304 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009464:	69fa      	ldr	r2, [r7, #28]
 8009466:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f000 faa9 	bl	80099c0 <SPI_EndRxTxTransaction>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d005      	beq.n	8009480 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2220      	movs	r2, #32
 800947e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009484:	2b00      	cmp	r3, #0
 8009486:	d003      	beq.n	8009490 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800948e:	e003      	b.n	8009498 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3728      	adds	r7, #40	; 0x28
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094c4:	69bb      	ldr	r3, [r7, #24]
 80094c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10e      	bne.n	80094ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d009      	beq.n	80094ec <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	4798      	blx	r3
    return;
 80094ea:	e0ce      	b.n	800968a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d009      	beq.n	800950a <HAL_SPI_IRQHandler+0x5e>
 80094f6:	69fb      	ldr	r3, [r7, #28]
 80094f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d004      	beq.n	800950a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	4798      	blx	r3
    return;
 8009508:	e0bf      	b.n	800968a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	f003 0320 	and.w	r3, r3, #32
 8009510:	2b00      	cmp	r3, #0
 8009512:	d10a      	bne.n	800952a <HAL_SPI_IRQHandler+0x7e>
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009524:	2b00      	cmp	r3, #0
 8009526:	f000 80b0 	beq.w	800968a <HAL_SPI_IRQHandler+0x1de>
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80aa 	beq.w	800968a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953c:	2b00      	cmp	r3, #0
 800953e:	d023      	beq.n	8009588 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b03      	cmp	r3, #3
 800954a:	d011      	beq.n	8009570 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009550:	f043 0204 	orr.w	r2, r3, #4
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009558:	2300      	movs	r3, #0
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	617b      	str	r3, [r7, #20]
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	e00b      	b.n	8009588 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009570:	2300      	movs	r3, #0
 8009572:	613b      	str	r3, [r7, #16]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	613b      	str	r3, [r7, #16]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	613b      	str	r3, [r7, #16]
 8009584:	693b      	ldr	r3, [r7, #16]
        return;
 8009586:	e080      	b.n	800968a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f003 0320 	and.w	r3, r3, #32
 800958e:	2b00      	cmp	r3, #0
 8009590:	d014      	beq.n	80095bc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009596:	f043 0201 	orr.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00c      	beq.n	80095e0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ca:	f043 0208 	orr.w	r2, r3, #8
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80095d2:	2300      	movs	r3, #0
 80095d4:	60bb      	str	r3, [r7, #8]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	60bb      	str	r3, [r7, #8]
 80095de:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d04f      	beq.n	8009688 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80095f6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	2b00      	cmp	r3, #0
 8009608:	d104      	bne.n	8009614 <HAL_SPI_IRQHandler+0x168>
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	2b00      	cmp	r3, #0
 8009612:	d034      	beq.n	800967e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f022 0203 	bic.w	r2, r2, #3
 8009622:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009628:	2b00      	cmp	r3, #0
 800962a:	d011      	beq.n	8009650 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009630:	4a17      	ldr	r2, [pc, #92]	; (8009690 <HAL_SPI_IRQHandler+0x1e4>)
 8009632:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009638:	4618      	mov	r0, r3
 800963a:	f7fd fa74 	bl	8006b26 <HAL_DMA_Abort_IT>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009648:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009654:	2b00      	cmp	r3, #0
 8009656:	d016      	beq.n	8009686 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800965c:	4a0c      	ldr	r2, [pc, #48]	; (8009690 <HAL_SPI_IRQHandler+0x1e4>)
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009664:	4618      	mov	r0, r3
 8009666:	f7fd fa5e 	bl	8006b26 <HAL_DMA_Abort_IT>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009674:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800967c:	e003      	b.n	8009686 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f808 	bl	8009694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009684:	e000      	b.n	8009688 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8009686:	bf00      	nop
    return;
 8009688:	bf00      	nop
  }
}
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	080096a9 	.word	0x080096a9

08009694 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff ffe5 	bl	8009694 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
	...

080096d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b088      	sub	sp, #32
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	603b      	str	r3, [r7, #0]
 80096e0:	4613      	mov	r3, r2
 80096e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80096e4:	f7fd f8c2 	bl	800686c <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	1a9b      	subs	r3, r3, r2
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	4413      	add	r3, r2
 80096f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80096f4:	f7fd f8ba 	bl	800686c <HAL_GetTick>
 80096f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80096fa:	4b39      	ldr	r3, [pc, #228]	; (80097e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	015b      	lsls	r3, r3, #5
 8009700:	0d1b      	lsrs	r3, r3, #20
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	fb02 f303 	mul.w	r3, r2, r3
 8009708:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800970a:	e054      	b.n	80097b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009712:	d050      	beq.n	80097b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009714:	f7fd f8aa 	bl	800686c <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	69fa      	ldr	r2, [r7, #28]
 8009720:	429a      	cmp	r2, r3
 8009722:	d902      	bls.n	800972a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d13d      	bne.n	80097a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685a      	ldr	r2, [r3, #4]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009738:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009742:	d111      	bne.n	8009768 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800974c:	d004      	beq.n	8009758 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009756:	d107      	bne.n	8009768 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009766:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009770:	d10f      	bne.n	8009792 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009790:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e017      	b.n	80097d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d101      	bne.n	80097b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	3b01      	subs	r3, #1
 80097b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	689a      	ldr	r2, [r3, #8]
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4013      	ands	r3, r2
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	bf0c      	ite	eq
 80097c6:	2301      	moveq	r3, #1
 80097c8:	2300      	movne	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d19b      	bne.n	800970c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3720      	adds	r7, #32
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000000 	.word	0x20000000

080097e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b08a      	sub	sp, #40	; 0x28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80097f6:	f7fd f839 	bl	800686c <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	4413      	add	r3, r2
 8009804:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009806:	f7fd f831 	bl	800686c <HAL_GetTick>
 800980a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	330c      	adds	r3, #12
 8009812:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009814:	4b3d      	ldr	r3, [pc, #244]	; (800990c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	4613      	mov	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	4413      	add	r3, r2
 800981e:	00da      	lsls	r2, r3, #3
 8009820:	1ad3      	subs	r3, r2, r3
 8009822:	0d1b      	lsrs	r3, r3, #20
 8009824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009826:	fb02 f303 	mul.w	r3, r2, r3
 800982a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800982c:	e060      	b.n	80098f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009834:	d107      	bne.n	8009846 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d104      	bne.n	8009846 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	b2db      	uxtb	r3, r3
 8009842:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009844:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800984c:	d050      	beq.n	80098f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800984e:	f7fd f80d 	bl	800686c <HAL_GetTick>
 8009852:	4602      	mov	r2, r0
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800985a:	429a      	cmp	r2, r3
 800985c:	d902      	bls.n	8009864 <SPI_WaitFifoStateUntilTimeout+0x80>
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	2b00      	cmp	r3, #0
 8009862:	d13d      	bne.n	80098e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009872:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800987c:	d111      	bne.n	80098a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009886:	d004      	beq.n	8009892 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009890:	d107      	bne.n	80098a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098aa:	d10f      	bne.n	80098cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098dc:	2303      	movs	r3, #3
 80098de:	e010      	b.n	8009902 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d101      	bne.n	80098ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80098e6:	2300      	movs	r3, #0
 80098e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	3b01      	subs	r3, #1
 80098ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	689a      	ldr	r2, [r3, #8]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	4013      	ands	r3, r2
 80098fa:	687a      	ldr	r2, [r7, #4]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d196      	bne.n	800982e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	3728      	adds	r7, #40	; 0x28
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20000000 	.word	0x20000000

08009910 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af02      	add	r7, sp, #8
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009924:	d111      	bne.n	800994a <SPI_EndRxTransaction+0x3a>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800992e:	d004      	beq.n	800993a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009938:	d107      	bne.n	800994a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009948:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	2200      	movs	r2, #0
 8009952:	2180      	movs	r1, #128	; 0x80
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7ff febd 	bl	80096d4 <SPI_WaitFlagStateUntilTimeout>
 800995a:	4603      	mov	r3, r0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d007      	beq.n	8009970 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009964:	f043 0220 	orr.w	r2, r3, #32
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e023      	b.n	80099b8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009978:	d11d      	bne.n	80099b6 <SPI_EndRxTransaction+0xa6>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009982:	d004      	beq.n	800998e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800998c:	d113      	bne.n	80099b6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	2200      	movs	r2, #0
 8009996:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff ff22 	bl	80097e4 <SPI_WaitFifoStateUntilTimeout>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d007      	beq.n	80099b6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099aa:	f043 0220 	orr.w	r2, r3, #32
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80099b2:	2303      	movs	r3, #3
 80099b4:	e000      	b.n	80099b8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	60f8      	str	r0, [r7, #12]
 80099c8:	60b9      	str	r1, [r7, #8]
 80099ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f7ff ff03 	bl	80097e4 <SPI_WaitFifoStateUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d007      	beq.n	80099f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e8:	f043 0220 	orr.w	r2, r3, #32
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e027      	b.n	8009a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2200      	movs	r2, #0
 80099fc:	2180      	movs	r1, #128	; 0x80
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff fe68 	bl	80096d4 <SPI_WaitFlagStateUntilTimeout>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d007      	beq.n	8009a1a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a0e:	f043 0220 	orr.w	r2, r3, #32
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e014      	b.n	8009a44 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff fedc 	bl	80097e4 <SPI_WaitFifoStateUntilTimeout>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a36:	f043 0220 	orr.w	r2, r3, #32
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e000      	b.n	8009a44 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e049      	b.n	8009af2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d106      	bne.n	8009a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7f7 f87a 	bl	8000b6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2202      	movs	r2, #2
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f000 fe80 	bl	800a790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3708      	adds	r7, #8
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d001      	beq.n	8009b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	e04f      	b.n	8009bb4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f042 0201 	orr.w	r2, r2, #1
 8009b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a23      	ldr	r2, [pc, #140]	; (8009bc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d01d      	beq.n	8009b72 <HAL_TIM_Base_Start_IT+0x76>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b3e:	d018      	beq.n	8009b72 <HAL_TIM_Base_Start_IT+0x76>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a1f      	ldr	r2, [pc, #124]	; (8009bc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d013      	beq.n	8009b72 <HAL_TIM_Base_Start_IT+0x76>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a1e      	ldr	r2, [pc, #120]	; (8009bc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d00e      	beq.n	8009b72 <HAL_TIM_Base_Start_IT+0x76>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a1c      	ldr	r2, [pc, #112]	; (8009bcc <HAL_TIM_Base_Start_IT+0xd0>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d009      	beq.n	8009b72 <HAL_TIM_Base_Start_IT+0x76>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a1b      	ldr	r2, [pc, #108]	; (8009bd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d004      	beq.n	8009b72 <HAL_TIM_Base_Start_IT+0x76>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a19      	ldr	r2, [pc, #100]	; (8009bd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d115      	bne.n	8009b9e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	689a      	ldr	r2, [r3, #8]
 8009b78:	4b17      	ldr	r3, [pc, #92]	; (8009bd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b06      	cmp	r3, #6
 8009b82:	d015      	beq.n	8009bb0 <HAL_TIM_Base_Start_IT+0xb4>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b8a:	d011      	beq.n	8009bb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f042 0201 	orr.w	r2, r2, #1
 8009b9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9c:	e008      	b.n	8009bb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f042 0201 	orr.w	r2, r2, #1
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	e000      	b.n	8009bb2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3714      	adds	r7, #20
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	40012c00 	.word	0x40012c00
 8009bc4:	40000400 	.word	0x40000400
 8009bc8:	40000800 	.word	0x40000800
 8009bcc:	40000c00 	.word	0x40000c00
 8009bd0:	40013400 	.word	0x40013400
 8009bd4:	40014000 	.word	0x40014000
 8009bd8:	00010007 	.word	0x00010007

08009bdc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f022 0201 	bic.w	r2, r2, #1
 8009bf2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	6a1a      	ldr	r2, [r3, #32]
 8009bfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8009bfe:	4013      	ands	r3, r2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10f      	bne.n	8009c24 <HAL_TIM_Base_Stop_IT+0x48>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6a1a      	ldr	r2, [r3, #32]
 8009c0a:	f240 4344 	movw	r3, #1092	; 0x444
 8009c0e:	4013      	ands	r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d107      	bne.n	8009c24 <HAL_TIM_Base_Stop_IT+0x48>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f022 0201 	bic.w	r2, r2, #1
 8009c22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	370c      	adds	r7, #12
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b082      	sub	sp, #8
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e049      	b.n	8009ce0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d106      	bne.n	8009c66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f841 	bl	8009ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2202      	movs	r2, #2
 8009c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3304      	adds	r3, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	4610      	mov	r0, r2
 8009c7a:	f000 fd89 	bl	800a790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <HAL_TIM_PWM_Start_IT+0x28>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	bf14      	ite	ne
 8009d1c:	2301      	movne	r3, #1
 8009d1e:	2300      	moveq	r3, #0
 8009d20:	b2db      	uxtb	r3, r3
 8009d22:	e03c      	b.n	8009d9e <HAL_TIM_PWM_Start_IT+0xa2>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d109      	bne.n	8009d3e <HAL_TIM_PWM_Start_IT+0x42>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	bf14      	ite	ne
 8009d36:	2301      	movne	r3, #1
 8009d38:	2300      	moveq	r3, #0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	e02f      	b.n	8009d9e <HAL_TIM_PWM_Start_IT+0xa2>
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	2b08      	cmp	r3, #8
 8009d42:	d109      	bne.n	8009d58 <HAL_TIM_PWM_Start_IT+0x5c>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	bf14      	ite	ne
 8009d50:	2301      	movne	r3, #1
 8009d52:	2300      	moveq	r3, #0
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	e022      	b.n	8009d9e <HAL_TIM_PWM_Start_IT+0xa2>
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	2b0c      	cmp	r3, #12
 8009d5c:	d109      	bne.n	8009d72 <HAL_TIM_PWM_Start_IT+0x76>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b01      	cmp	r3, #1
 8009d68:	bf14      	ite	ne
 8009d6a:	2301      	movne	r3, #1
 8009d6c:	2300      	moveq	r3, #0
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	e015      	b.n	8009d9e <HAL_TIM_PWM_Start_IT+0xa2>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b10      	cmp	r3, #16
 8009d76:	d109      	bne.n	8009d8c <HAL_TIM_PWM_Start_IT+0x90>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	bf14      	ite	ne
 8009d84:	2301      	movne	r3, #1
 8009d86:	2300      	moveq	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	e008      	b.n	8009d9e <HAL_TIM_PWM_Start_IT+0xa2>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	bf14      	ite	ne
 8009d98:	2301      	movne	r3, #1
 8009d9a:	2300      	moveq	r3, #0
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d001      	beq.n	8009da6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e0e7      	b.n	8009f76 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <HAL_TIM_PWM_Start_IT+0xba>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2202      	movs	r2, #2
 8009db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009db4:	e023      	b.n	8009dfe <HAL_TIM_PWM_Start_IT+0x102>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b04      	cmp	r3, #4
 8009dba:	d104      	bne.n	8009dc6 <HAL_TIM_PWM_Start_IT+0xca>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dc4:	e01b      	b.n	8009dfe <HAL_TIM_PWM_Start_IT+0x102>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d104      	bne.n	8009dd6 <HAL_TIM_PWM_Start_IT+0xda>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dd4:	e013      	b.n	8009dfe <HAL_TIM_PWM_Start_IT+0x102>
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	2b0c      	cmp	r3, #12
 8009dda:	d104      	bne.n	8009de6 <HAL_TIM_PWM_Start_IT+0xea>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009de4:	e00b      	b.n	8009dfe <HAL_TIM_PWM_Start_IT+0x102>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b10      	cmp	r3, #16
 8009dea:	d104      	bne.n	8009df6 <HAL_TIM_PWM_Start_IT+0xfa>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2202      	movs	r2, #2
 8009df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009df4:	e003      	b.n	8009dfe <HAL_TIM_PWM_Start_IT+0x102>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2202      	movs	r2, #2
 8009dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b0c      	cmp	r3, #12
 8009e02:	d841      	bhi.n	8009e88 <HAL_TIM_PWM_Start_IT+0x18c>
 8009e04:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <HAL_TIM_PWM_Start_IT+0x110>)
 8009e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0a:	bf00      	nop
 8009e0c:	08009e41 	.word	0x08009e41
 8009e10:	08009e89 	.word	0x08009e89
 8009e14:	08009e89 	.word	0x08009e89
 8009e18:	08009e89 	.word	0x08009e89
 8009e1c:	08009e53 	.word	0x08009e53
 8009e20:	08009e89 	.word	0x08009e89
 8009e24:	08009e89 	.word	0x08009e89
 8009e28:	08009e89 	.word	0x08009e89
 8009e2c:	08009e65 	.word	0x08009e65
 8009e30:	08009e89 	.word	0x08009e89
 8009e34:	08009e89 	.word	0x08009e89
 8009e38:	08009e89 	.word	0x08009e89
 8009e3c:	08009e77 	.word	0x08009e77
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68da      	ldr	r2, [r3, #12]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0202 	orr.w	r2, r2, #2
 8009e4e:	60da      	str	r2, [r3, #12]
      break;
 8009e50:	e01d      	b.n	8009e8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68da      	ldr	r2, [r3, #12]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f042 0204 	orr.w	r2, r2, #4
 8009e60:	60da      	str	r2, [r3, #12]
      break;
 8009e62:	e014      	b.n	8009e8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f042 0208 	orr.w	r2, r2, #8
 8009e72:	60da      	str	r2, [r3, #12]
      break;
 8009e74:	e00b      	b.n	8009e8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68da      	ldr	r2, [r3, #12]
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f042 0210 	orr.w	r2, r2, #16
 8009e84:	60da      	str	r2, [r3, #12]
      break;
 8009e86:	e002      	b.n	8009e8e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8009e8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d16f      	bne.n	8009f74 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	6839      	ldr	r1, [r7, #0]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f881 	bl	800afa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a36      	ldr	r2, [pc, #216]	; (8009f80 <HAL_TIM_PWM_Start_IT+0x284>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d013      	beq.n	8009ed4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a34      	ldr	r2, [pc, #208]	; (8009f84 <HAL_TIM_PWM_Start_IT+0x288>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00e      	beq.n	8009ed4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a33      	ldr	r2, [pc, #204]	; (8009f88 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d009      	beq.n	8009ed4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a31      	ldr	r2, [pc, #196]	; (8009f8c <HAL_TIM_PWM_Start_IT+0x290>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d004      	beq.n	8009ed4 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a30      	ldr	r2, [pc, #192]	; (8009f90 <HAL_TIM_PWM_Start_IT+0x294>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d101      	bne.n	8009ed8 <HAL_TIM_PWM_Start_IT+0x1dc>
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e000      	b.n	8009eda <HAL_TIM_PWM_Start_IT+0x1de>
 8009ed8:	2300      	movs	r3, #0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009eec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a23      	ldr	r2, [pc, #140]	; (8009f80 <HAL_TIM_PWM_Start_IT+0x284>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d01d      	beq.n	8009f34 <HAL_TIM_PWM_Start_IT+0x238>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f00:	d018      	beq.n	8009f34 <HAL_TIM_PWM_Start_IT+0x238>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a23      	ldr	r2, [pc, #140]	; (8009f94 <HAL_TIM_PWM_Start_IT+0x298>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d013      	beq.n	8009f34 <HAL_TIM_PWM_Start_IT+0x238>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a21      	ldr	r2, [pc, #132]	; (8009f98 <HAL_TIM_PWM_Start_IT+0x29c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d00e      	beq.n	8009f34 <HAL_TIM_PWM_Start_IT+0x238>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a20      	ldr	r2, [pc, #128]	; (8009f9c <HAL_TIM_PWM_Start_IT+0x2a0>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d009      	beq.n	8009f34 <HAL_TIM_PWM_Start_IT+0x238>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a17      	ldr	r2, [pc, #92]	; (8009f84 <HAL_TIM_PWM_Start_IT+0x288>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d004      	beq.n	8009f34 <HAL_TIM_PWM_Start_IT+0x238>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a16      	ldr	r2, [pc, #88]	; (8009f88 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d115      	bne.n	8009f60 <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	689a      	ldr	r2, [r3, #8]
 8009f3a:	4b19      	ldr	r3, [pc, #100]	; (8009fa0 <HAL_TIM_PWM_Start_IT+0x2a4>)
 8009f3c:	4013      	ands	r3, r2
 8009f3e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b06      	cmp	r3, #6
 8009f44:	d015      	beq.n	8009f72 <HAL_TIM_PWM_Start_IT+0x276>
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f4c:	d011      	beq.n	8009f72 <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f042 0201 	orr.w	r2, r2, #1
 8009f5c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f5e:	e008      	b.n	8009f72 <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f042 0201 	orr.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	e000      	b.n	8009f74 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f72:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	40012c00 	.word	0x40012c00
 8009f84:	40013400 	.word	0x40013400
 8009f88:	40014000 	.word	0x40014000
 8009f8c:	40014400 	.word	0x40014400
 8009f90:	40014800 	.word	0x40014800
 8009f94:	40000400 	.word	0x40000400
 8009f98:	40000800 	.word	0x40000800
 8009f9c:	40000c00 	.word	0x40000c00
 8009fa0:	00010007 	.word	0x00010007

08009fa4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	2b0c      	cmp	r3, #12
 8009fb6:	d841      	bhi.n	800a03c <HAL_TIM_PWM_Stop_IT+0x98>
 8009fb8:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8009fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbe:	bf00      	nop
 8009fc0:	08009ff5 	.word	0x08009ff5
 8009fc4:	0800a03d 	.word	0x0800a03d
 8009fc8:	0800a03d 	.word	0x0800a03d
 8009fcc:	0800a03d 	.word	0x0800a03d
 8009fd0:	0800a007 	.word	0x0800a007
 8009fd4:	0800a03d 	.word	0x0800a03d
 8009fd8:	0800a03d 	.word	0x0800a03d
 8009fdc:	0800a03d 	.word	0x0800a03d
 8009fe0:	0800a019 	.word	0x0800a019
 8009fe4:	0800a03d 	.word	0x0800a03d
 8009fe8:	0800a03d 	.word	0x0800a03d
 8009fec:	0800a03d 	.word	0x0800a03d
 8009ff0:	0800a02b 	.word	0x0800a02b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	68da      	ldr	r2, [r3, #12]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	f022 0202 	bic.w	r2, r2, #2
 800a002:	60da      	str	r2, [r3, #12]
      break;
 800a004:	e01d      	b.n	800a042 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68da      	ldr	r2, [r3, #12]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0204 	bic.w	r2, r2, #4
 800a014:	60da      	str	r2, [r3, #12]
      break;
 800a016:	e014      	b.n	800a042 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0208 	bic.w	r2, r2, #8
 800a026:	60da      	str	r2, [r3, #12]
      break;
 800a028:	e00b      	b.n	800a042 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68da      	ldr	r2, [r3, #12]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f022 0210 	bic.w	r2, r2, #16
 800a038:	60da      	str	r2, [r3, #12]
      break;
 800a03a:	e002      	b.n	800a042 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]
      break;
 800a040:	bf00      	nop
  }

  if (status == HAL_OK)
 800a042:	7bfb      	ldrb	r3, [r7, #15]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f040 8081 	bne.w	800a14c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2200      	movs	r2, #0
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 ffa6 	bl	800afa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a3e      	ldr	r2, [pc, #248]	; (800a158 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d013      	beq.n	800a08a <HAL_TIM_PWM_Stop_IT+0xe6>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a3d      	ldr	r2, [pc, #244]	; (800a15c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d00e      	beq.n	800a08a <HAL_TIM_PWM_Stop_IT+0xe6>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a3b      	ldr	r2, [pc, #236]	; (800a160 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d009      	beq.n	800a08a <HAL_TIM_PWM_Stop_IT+0xe6>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a3a      	ldr	r2, [pc, #232]	; (800a164 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d004      	beq.n	800a08a <HAL_TIM_PWM_Stop_IT+0xe6>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a38      	ldr	r2, [pc, #224]	; (800a168 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d101      	bne.n	800a08e <HAL_TIM_PWM_Stop_IT+0xea>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e000      	b.n	800a090 <HAL_TIM_PWM_Stop_IT+0xec>
 800a08e:	2300      	movs	r3, #0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d017      	beq.n	800a0c4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6a1a      	ldr	r2, [r3, #32]
 800a09a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10f      	bne.n	800a0c4 <HAL_TIM_PWM_Stop_IT+0x120>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	6a1a      	ldr	r2, [r3, #32]
 800a0aa:	f240 4344 	movw	r3, #1092	; 0x444
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d107      	bne.n	800a0c4 <HAL_TIM_PWM_Stop_IT+0x120>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a0c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6a1a      	ldr	r2, [r3, #32]
 800a0ca:	f241 1311 	movw	r3, #4369	; 0x1111
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10f      	bne.n	800a0f4 <HAL_TIM_PWM_Stop_IT+0x150>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6a1a      	ldr	r2, [r3, #32]
 800a0da:	f240 4344 	movw	r3, #1092	; 0x444
 800a0de:	4013      	ands	r3, r2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d107      	bne.n	800a0f4 <HAL_TIM_PWM_Stop_IT+0x150>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d104      	bne.n	800a104 <HAL_TIM_PWM_Stop_IT+0x160>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a102:	e023      	b.n	800a14c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b04      	cmp	r3, #4
 800a108:	d104      	bne.n	800a114 <HAL_TIM_PWM_Stop_IT+0x170>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a112:	e01b      	b.n	800a14c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b08      	cmp	r3, #8
 800a118:	d104      	bne.n	800a124 <HAL_TIM_PWM_Stop_IT+0x180>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a122:	e013      	b.n	800a14c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2b0c      	cmp	r3, #12
 800a128:	d104      	bne.n	800a134 <HAL_TIM_PWM_Stop_IT+0x190>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a132:	e00b      	b.n	800a14c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	2b10      	cmp	r3, #16
 800a138:	d104      	bne.n	800a144 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a142:	e003      	b.n	800a14c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3710      	adds	r7, #16
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	40012c00 	.word	0x40012c00
 800a15c:	40013400 	.word	0x40013400
 800a160:	40014000 	.word	0x40014000
 800a164:	40014400 	.word	0x40014400
 800a168:	40014800 	.word	0x40014800

0800a16c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f003 0302 	and.w	r3, r3, #2
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d020      	beq.n	800a1d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f003 0302 	and.w	r3, r3, #2
 800a194:	2b00      	cmp	r3, #0
 800a196:	d01b      	beq.n	800a1d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0202 	mvn.w	r2, #2
 800a1a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	f003 0303 	and.w	r3, r3, #3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 facb 	bl	800a752 <HAL_TIM_IC_CaptureCallback>
 800a1bc:	e005      	b.n	800a1ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fabd 	bl	800a73e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 face 	bl	800a766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	f003 0304 	and.w	r3, r3, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d020      	beq.n	800a21c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d01b      	beq.n	800a21c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f06f 0204 	mvn.w	r2, #4
 800a1ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	699b      	ldr	r3, [r3, #24]
 800a1fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d003      	beq.n	800a20a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 faa5 	bl	800a752 <HAL_TIM_IC_CaptureCallback>
 800a208:	e005      	b.n	800a216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 fa97 	bl	800a73e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 faa8 	bl	800a766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f003 0308 	and.w	r3, r3, #8
 800a222:	2b00      	cmp	r3, #0
 800a224:	d020      	beq.n	800a268 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d01b      	beq.n	800a268 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f06f 0208 	mvn.w	r2, #8
 800a238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2204      	movs	r2, #4
 800a23e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	69db      	ldr	r3, [r3, #28]
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fa7f 	bl	800a752 <HAL_TIM_IC_CaptureCallback>
 800a254:	e005      	b.n	800a262 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 fa71 	bl	800a73e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fa82 	bl	800a766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f003 0310 	and.w	r3, r3, #16
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d020      	beq.n	800a2b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f003 0310 	and.w	r3, r3, #16
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d01b      	beq.n	800a2b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f06f 0210 	mvn.w	r2, #16
 800a284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2208      	movs	r2, #8
 800a28a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a296:	2b00      	cmp	r3, #0
 800a298:	d003      	beq.n	800a2a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa59 	bl	800a752 <HAL_TIM_IC_CaptureCallback>
 800a2a0:	e005      	b.n	800a2ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fa4b 	bl	800a73e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2a8:	6878      	ldr	r0, [r7, #4]
 800a2aa:	f000 fa5c 	bl	800a766 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	f003 0301 	and.w	r3, r3, #1
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00c      	beq.n	800a2d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f003 0301 	and.w	r3, r3, #1
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d007      	beq.n	800a2d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f06f 0201 	mvn.w	r2, #1
 800a2d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fa29 	bl	800a72a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00c      	beq.n	800a2fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d007      	beq.n	800a2fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 ff0c 	bl	800b114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00c      	beq.n	800a320 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d007      	beq.n	800a320 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 ff04 	bl	800b128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a326:	2b00      	cmp	r3, #0
 800a328:	d00c      	beq.n	800a344 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a33c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa1b 	bl	800a77a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f003 0320 	and.w	r3, r3, #32
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d00c      	beq.n	800a368 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b00      	cmp	r3, #0
 800a356:	d007      	beq.n	800a368 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f06f 0220 	mvn.w	r2, #32
 800a360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fecc 	bl	800b100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a368:	bf00      	nop
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a386:	2b01      	cmp	r3, #1
 800a388:	d101      	bne.n	800a38e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a38a:	2302      	movs	r3, #2
 800a38c:	e0ff      	b.n	800a58e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2201      	movs	r2, #1
 800a392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b14      	cmp	r3, #20
 800a39a:	f200 80f0 	bhi.w	800a57e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a39e:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a4:	0800a3f9 	.word	0x0800a3f9
 800a3a8:	0800a57f 	.word	0x0800a57f
 800a3ac:	0800a57f 	.word	0x0800a57f
 800a3b0:	0800a57f 	.word	0x0800a57f
 800a3b4:	0800a439 	.word	0x0800a439
 800a3b8:	0800a57f 	.word	0x0800a57f
 800a3bc:	0800a57f 	.word	0x0800a57f
 800a3c0:	0800a57f 	.word	0x0800a57f
 800a3c4:	0800a47b 	.word	0x0800a47b
 800a3c8:	0800a57f 	.word	0x0800a57f
 800a3cc:	0800a57f 	.word	0x0800a57f
 800a3d0:	0800a57f 	.word	0x0800a57f
 800a3d4:	0800a4bb 	.word	0x0800a4bb
 800a3d8:	0800a57f 	.word	0x0800a57f
 800a3dc:	0800a57f 	.word	0x0800a57f
 800a3e0:	0800a57f 	.word	0x0800a57f
 800a3e4:	0800a4fd 	.word	0x0800a4fd
 800a3e8:	0800a57f 	.word	0x0800a57f
 800a3ec:	0800a57f 	.word	0x0800a57f
 800a3f0:	0800a57f 	.word	0x0800a57f
 800a3f4:	0800a53d 	.word	0x0800a53d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68b9      	ldr	r1, [r7, #8]
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fa60 	bl	800a8c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	699a      	ldr	r2, [r3, #24]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f042 0208 	orr.w	r2, r2, #8
 800a412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	699a      	ldr	r2, [r3, #24]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0204 	bic.w	r2, r2, #4
 800a422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6999      	ldr	r1, [r3, #24]
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	691a      	ldr	r2, [r3, #16]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	430a      	orrs	r2, r1
 800a434:	619a      	str	r2, [r3, #24]
      break;
 800a436:	e0a5      	b.n	800a584 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	68b9      	ldr	r1, [r7, #8]
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 fad0 	bl	800a9e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	699a      	ldr	r2, [r3, #24]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	699a      	ldr	r2, [r3, #24]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6999      	ldr	r1, [r3, #24]
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	021a      	lsls	r2, r3, #8
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	430a      	orrs	r2, r1
 800a476:	619a      	str	r2, [r3, #24]
      break;
 800a478:	e084      	b.n	800a584 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	4618      	mov	r0, r3
 800a482:	f000 fb39 	bl	800aaf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69da      	ldr	r2, [r3, #28]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f042 0208 	orr.w	r2, r2, #8
 800a494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	69da      	ldr	r2, [r3, #28]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0204 	bic.w	r2, r2, #4
 800a4a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	69d9      	ldr	r1, [r3, #28]
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	691a      	ldr	r2, [r3, #16]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	430a      	orrs	r2, r1
 800a4b6:	61da      	str	r2, [r3, #28]
      break;
 800a4b8:	e064      	b.n	800a584 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 fba1 	bl	800ac08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	69da      	ldr	r2, [r3, #28]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	69da      	ldr	r2, [r3, #28]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69d9      	ldr	r1, [r3, #28]
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	021a      	lsls	r2, r3, #8
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	61da      	str	r2, [r3, #28]
      break;
 800a4fa:	e043      	b.n	800a584 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	68b9      	ldr	r1, [r7, #8]
 800a502:	4618      	mov	r0, r3
 800a504:	f000 fbea 	bl	800acdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0208 	orr.w	r2, r2, #8
 800a516:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f022 0204 	bic.w	r2, r2, #4
 800a526:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	691a      	ldr	r2, [r3, #16]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a53a:	e023      	b.n	800a584 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68b9      	ldr	r1, [r7, #8]
 800a542:	4618      	mov	r0, r3
 800a544:	f000 fc2e 	bl	800ada4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	021a      	lsls	r2, r3, #8
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	430a      	orrs	r2, r1
 800a57a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a57c:	e002      	b.n	800a584 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	75fb      	strb	r3, [r7, #23]
      break;
 800a582:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3718      	adds	r7, #24
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop

0800a598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d101      	bne.n	800a5b4 <HAL_TIM_ConfigClockSource+0x1c>
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e0b6      	b.n	800a722 <HAL_TIM_ConfigClockSource+0x18a>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f0:	d03e      	beq.n	800a670 <HAL_TIM_ConfigClockSource+0xd8>
 800a5f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f6:	f200 8087 	bhi.w	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a5fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5fe:	f000 8086 	beq.w	800a70e <HAL_TIM_ConfigClockSource+0x176>
 800a602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a606:	d87f      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a608:	2b70      	cmp	r3, #112	; 0x70
 800a60a:	d01a      	beq.n	800a642 <HAL_TIM_ConfigClockSource+0xaa>
 800a60c:	2b70      	cmp	r3, #112	; 0x70
 800a60e:	d87b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a610:	2b60      	cmp	r3, #96	; 0x60
 800a612:	d050      	beq.n	800a6b6 <HAL_TIM_ConfigClockSource+0x11e>
 800a614:	2b60      	cmp	r3, #96	; 0x60
 800a616:	d877      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a618:	2b50      	cmp	r3, #80	; 0x50
 800a61a:	d03c      	beq.n	800a696 <HAL_TIM_ConfigClockSource+0xfe>
 800a61c:	2b50      	cmp	r3, #80	; 0x50
 800a61e:	d873      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	d058      	beq.n	800a6d6 <HAL_TIM_ConfigClockSource+0x13e>
 800a624:	2b40      	cmp	r3, #64	; 0x40
 800a626:	d86f      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a628:	2b30      	cmp	r3, #48	; 0x30
 800a62a:	d064      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15e>
 800a62c:	2b30      	cmp	r3, #48	; 0x30
 800a62e:	d86b      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a630:	2b20      	cmp	r3, #32
 800a632:	d060      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15e>
 800a634:	2b20      	cmp	r3, #32
 800a636:	d867      	bhi.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d05c      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15e>
 800a63c:	2b10      	cmp	r3, #16
 800a63e:	d05a      	beq.n	800a6f6 <HAL_TIM_ConfigClockSource+0x15e>
 800a640:	e062      	b.n	800a708 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a652:	f000 fc87 	bl	800af64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68ba      	ldr	r2, [r7, #8]
 800a66c:	609a      	str	r2, [r3, #8]
      break;
 800a66e:	e04f      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a680:	f000 fc70 	bl	800af64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a692:	609a      	str	r2, [r3, #8]
      break;
 800a694:	e03c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	f000 fbe4 	bl	800ae70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2150      	movs	r1, #80	; 0x50
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 fc3d 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a6b4:	e02c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f000 fc03 	bl	800aece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2160      	movs	r1, #96	; 0x60
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 fc2d 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a6d4:	e01c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	f000 fbc4 	bl	800ae70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2140      	movs	r1, #64	; 0x40
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 fc1d 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a6f4:	e00c      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4619      	mov	r1, r3
 800a700:	4610      	mov	r0, r2
 800a702:	f000 fc14 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a706:	e003      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a708:	2301      	movs	r3, #1
 800a70a:	73fb      	strb	r3, [r7, #15]
      break;
 800a70c:	e000      	b.n	800a710 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a70e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a720:	7bfb      	ldrb	r3, [r7, #15]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr

0800a77a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a77a:	b480      	push	{r7}
 800a77c:	b083      	sub	sp, #12
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
	...

0800a790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a40      	ldr	r2, [pc, #256]	; (800a8a4 <TIM_Base_SetConfig+0x114>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d013      	beq.n	800a7d0 <TIM_Base_SetConfig+0x40>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ae:	d00f      	beq.n	800a7d0 <TIM_Base_SetConfig+0x40>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a3d      	ldr	r2, [pc, #244]	; (800a8a8 <TIM_Base_SetConfig+0x118>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d00b      	beq.n	800a7d0 <TIM_Base_SetConfig+0x40>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a3c      	ldr	r2, [pc, #240]	; (800a8ac <TIM_Base_SetConfig+0x11c>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d007      	beq.n	800a7d0 <TIM_Base_SetConfig+0x40>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a3b      	ldr	r2, [pc, #236]	; (800a8b0 <TIM_Base_SetConfig+0x120>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d003      	beq.n	800a7d0 <TIM_Base_SetConfig+0x40>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a3a      	ldr	r2, [pc, #232]	; (800a8b4 <TIM_Base_SetConfig+0x124>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d108      	bne.n	800a7e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a2f      	ldr	r2, [pc, #188]	; (800a8a4 <TIM_Base_SetConfig+0x114>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d01f      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f0:	d01b      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a2c      	ldr	r2, [pc, #176]	; (800a8a8 <TIM_Base_SetConfig+0x118>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d017      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a2b      	ldr	r2, [pc, #172]	; (800a8ac <TIM_Base_SetConfig+0x11c>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d013      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a2a      	ldr	r2, [pc, #168]	; (800a8b0 <TIM_Base_SetConfig+0x120>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00f      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a29      	ldr	r2, [pc, #164]	; (800a8b4 <TIM_Base_SetConfig+0x124>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d00b      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a28      	ldr	r2, [pc, #160]	; (800a8b8 <TIM_Base_SetConfig+0x128>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d007      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a27      	ldr	r2, [pc, #156]	; (800a8bc <TIM_Base_SetConfig+0x12c>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d003      	beq.n	800a82a <TIM_Base_SetConfig+0x9a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a26      	ldr	r2, [pc, #152]	; (800a8c0 <TIM_Base_SetConfig+0x130>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d108      	bne.n	800a83c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4313      	orrs	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a10      	ldr	r2, [pc, #64]	; (800a8a4 <TIM_Base_SetConfig+0x114>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00f      	beq.n	800a888 <TIM_Base_SetConfig+0xf8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a12      	ldr	r2, [pc, #72]	; (800a8b4 <TIM_Base_SetConfig+0x124>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00b      	beq.n	800a888 <TIM_Base_SetConfig+0xf8>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a11      	ldr	r2, [pc, #68]	; (800a8b8 <TIM_Base_SetConfig+0x128>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d007      	beq.n	800a888 <TIM_Base_SetConfig+0xf8>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a10      	ldr	r2, [pc, #64]	; (800a8bc <TIM_Base_SetConfig+0x12c>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d003      	beq.n	800a888 <TIM_Base_SetConfig+0xf8>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a0f      	ldr	r2, [pc, #60]	; (800a8c0 <TIM_Base_SetConfig+0x130>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d103      	bne.n	800a890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	691a      	ldr	r2, [r3, #16]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	615a      	str	r2, [r3, #20]
}
 800a896:	bf00      	nop
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	40012c00 	.word	0x40012c00
 800a8a8:	40000400 	.word	0x40000400
 800a8ac:	40000800 	.word	0x40000800
 800a8b0:	40000c00 	.word	0x40000c00
 800a8b4:	40013400 	.word	0x40013400
 800a8b8:	40014000 	.word	0x40014000
 800a8bc:	40014400 	.word	0x40014400
 800a8c0:	40014800 	.word	0x40014800

0800a8c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b087      	sub	sp, #28
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	f023 0201 	bic.w	r2, r3, #1
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f023 0303 	bic.w	r3, r3, #3
 800a8fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4313      	orrs	r3, r2
 800a908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f023 0302 	bic.w	r3, r3, #2
 800a910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	4313      	orrs	r3, r2
 800a91a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a2c      	ldr	r2, [pc, #176]	; (800a9d0 <TIM_OC1_SetConfig+0x10c>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d00f      	beq.n	800a944 <TIM_OC1_SetConfig+0x80>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a2b      	ldr	r2, [pc, #172]	; (800a9d4 <TIM_OC1_SetConfig+0x110>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00b      	beq.n	800a944 <TIM_OC1_SetConfig+0x80>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a2a      	ldr	r2, [pc, #168]	; (800a9d8 <TIM_OC1_SetConfig+0x114>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d007      	beq.n	800a944 <TIM_OC1_SetConfig+0x80>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a29      	ldr	r2, [pc, #164]	; (800a9dc <TIM_OC1_SetConfig+0x118>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_OC1_SetConfig+0x80>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a28      	ldr	r2, [pc, #160]	; (800a9e0 <TIM_OC1_SetConfig+0x11c>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d10c      	bne.n	800a95e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f023 0308 	bic.w	r3, r3, #8
 800a94a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	4313      	orrs	r3, r2
 800a954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f023 0304 	bic.w	r3, r3, #4
 800a95c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a1b      	ldr	r2, [pc, #108]	; (800a9d0 <TIM_OC1_SetConfig+0x10c>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d00f      	beq.n	800a986 <TIM_OC1_SetConfig+0xc2>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a1a      	ldr	r2, [pc, #104]	; (800a9d4 <TIM_OC1_SetConfig+0x110>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d00b      	beq.n	800a986 <TIM_OC1_SetConfig+0xc2>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a19      	ldr	r2, [pc, #100]	; (800a9d8 <TIM_OC1_SetConfig+0x114>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <TIM_OC1_SetConfig+0xc2>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a18      	ldr	r2, [pc, #96]	; (800a9dc <TIM_OC1_SetConfig+0x118>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d003      	beq.n	800a986 <TIM_OC1_SetConfig+0xc2>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a17      	ldr	r2, [pc, #92]	; (800a9e0 <TIM_OC1_SetConfig+0x11c>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d111      	bne.n	800a9aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a98c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	693a      	ldr	r2, [r7, #16]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	693a      	ldr	r2, [r7, #16]
 800a9ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	685a      	ldr	r2, [r3, #4]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	697a      	ldr	r2, [r7, #20]
 800a9c2:	621a      	str	r2, [r3, #32]
}
 800a9c4:	bf00      	nop
 800a9c6:	371c      	adds	r7, #28
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	40012c00 	.word	0x40012c00
 800a9d4:	40013400 	.word	0x40013400
 800a9d8:	40014000 	.word	0x40014000
 800a9dc:	40014400 	.word	0x40014400
 800a9e0:	40014800 	.word	0x40014800

0800a9e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b087      	sub	sp, #28
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	f023 0210 	bic.w	r2, r3, #16
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	021b      	lsls	r3, r3, #8
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	f023 0320 	bic.w	r3, r3, #32
 800aa32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	689b      	ldr	r3, [r3, #8]
 800aa38:	011b      	lsls	r3, r3, #4
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	4a28      	ldr	r2, [pc, #160]	; (800aae4 <TIM_OC2_SetConfig+0x100>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d003      	beq.n	800aa50 <TIM_OC2_SetConfig+0x6c>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a27      	ldr	r2, [pc, #156]	; (800aae8 <TIM_OC2_SetConfig+0x104>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d10d      	bne.n	800aa6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a1d      	ldr	r2, [pc, #116]	; (800aae4 <TIM_OC2_SetConfig+0x100>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d00f      	beq.n	800aa94 <TIM_OC2_SetConfig+0xb0>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a1c      	ldr	r2, [pc, #112]	; (800aae8 <TIM_OC2_SetConfig+0x104>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d00b      	beq.n	800aa94 <TIM_OC2_SetConfig+0xb0>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a1b      	ldr	r2, [pc, #108]	; (800aaec <TIM_OC2_SetConfig+0x108>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d007      	beq.n	800aa94 <TIM_OC2_SetConfig+0xb0>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a1a      	ldr	r2, [pc, #104]	; (800aaf0 <TIM_OC2_SetConfig+0x10c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_OC2_SetConfig+0xb0>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a19      	ldr	r2, [pc, #100]	; (800aaf4 <TIM_OC2_SetConfig+0x110>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d113      	bne.n	800aabc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	699b      	ldr	r3, [r3, #24]
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	4313      	orrs	r3, r2
 800aaba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	697a      	ldr	r2, [r7, #20]
 800aad4:	621a      	str	r2, [r3, #32]
}
 800aad6:	bf00      	nop
 800aad8:	371c      	adds	r7, #28
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	40012c00 	.word	0x40012c00
 800aae8:	40013400 	.word	0x40013400
 800aaec:	40014000 	.word	0x40014000
 800aaf0:	40014400 	.word	0x40014400
 800aaf4:	40014800 	.word	0x40014800

0800aaf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b087      	sub	sp, #28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a1b      	ldr	r3, [r3, #32]
 800ab06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a1b      	ldr	r3, [r3, #32]
 800ab0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	f023 0303 	bic.w	r3, r3, #3
 800ab32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68fa      	ldr	r2, [r7, #12]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	021b      	lsls	r3, r3, #8
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a27      	ldr	r2, [pc, #156]	; (800abf4 <TIM_OC3_SetConfig+0xfc>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d003      	beq.n	800ab62 <TIM_OC3_SetConfig+0x6a>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a26      	ldr	r2, [pc, #152]	; (800abf8 <TIM_OC3_SetConfig+0x100>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d10d      	bne.n	800ab7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a1c      	ldr	r2, [pc, #112]	; (800abf4 <TIM_OC3_SetConfig+0xfc>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00f      	beq.n	800aba6 <TIM_OC3_SetConfig+0xae>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	4a1b      	ldr	r2, [pc, #108]	; (800abf8 <TIM_OC3_SetConfig+0x100>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d00b      	beq.n	800aba6 <TIM_OC3_SetConfig+0xae>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a1a      	ldr	r2, [pc, #104]	; (800abfc <TIM_OC3_SetConfig+0x104>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d007      	beq.n	800aba6 <TIM_OC3_SetConfig+0xae>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a19      	ldr	r2, [pc, #100]	; (800ac00 <TIM_OC3_SetConfig+0x108>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d003      	beq.n	800aba6 <TIM_OC3_SetConfig+0xae>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	4a18      	ldr	r2, [pc, #96]	; (800ac04 <TIM_OC3_SetConfig+0x10c>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d113      	bne.n	800abce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	011b      	lsls	r3, r3, #4
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	621a      	str	r2, [r3, #32]
}
 800abe8:	bf00      	nop
 800abea:	371c      	adds	r7, #28
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	40012c00 	.word	0x40012c00
 800abf8:	40013400 	.word	0x40013400
 800abfc:	40014000 	.word	0x40014000
 800ac00:	40014400 	.word	0x40014400
 800ac04:	40014800 	.word	0x40014800

0800ac08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	021b      	lsls	r3, r3, #8
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	031b      	lsls	r3, r3, #12
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <TIM_OC4_SetConfig+0xc0>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d00f      	beq.n	800ac8c <TIM_OC4_SetConfig+0x84>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a17      	ldr	r2, [pc, #92]	; (800accc <TIM_OC4_SetConfig+0xc4>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d00b      	beq.n	800ac8c <TIM_OC4_SetConfig+0x84>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a16      	ldr	r2, [pc, #88]	; (800acd0 <TIM_OC4_SetConfig+0xc8>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d007      	beq.n	800ac8c <TIM_OC4_SetConfig+0x84>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a15      	ldr	r2, [pc, #84]	; (800acd4 <TIM_OC4_SetConfig+0xcc>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d003      	beq.n	800ac8c <TIM_OC4_SetConfig+0x84>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a14      	ldr	r2, [pc, #80]	; (800acd8 <TIM_OC4_SetConfig+0xd0>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d109      	bne.n	800aca0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	019b      	lsls	r3, r3, #6
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	697a      	ldr	r2, [r7, #20]
 800aca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	685a      	ldr	r2, [r3, #4]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	621a      	str	r2, [r3, #32]
}
 800acba:	bf00      	nop
 800acbc:	371c      	adds	r7, #28
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	40012c00 	.word	0x40012c00
 800accc:	40013400 	.word	0x40013400
 800acd0:	40014000 	.word	0x40014000
 800acd4:	40014400 	.word	0x40014400
 800acd8:	40014800 	.word	0x40014800

0800acdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a1b      	ldr	r3, [r3, #32]
 800acf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68fa      	ldr	r2, [r7, #12]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	689b      	ldr	r3, [r3, #8]
 800ad26:	041b      	lsls	r3, r3, #16
 800ad28:	693a      	ldr	r2, [r7, #16]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	4a17      	ldr	r2, [pc, #92]	; (800ad90 <TIM_OC5_SetConfig+0xb4>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d00f      	beq.n	800ad56 <TIM_OC5_SetConfig+0x7a>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a16      	ldr	r2, [pc, #88]	; (800ad94 <TIM_OC5_SetConfig+0xb8>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d00b      	beq.n	800ad56 <TIM_OC5_SetConfig+0x7a>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a15      	ldr	r2, [pc, #84]	; (800ad98 <TIM_OC5_SetConfig+0xbc>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d007      	beq.n	800ad56 <TIM_OC5_SetConfig+0x7a>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a14      	ldr	r2, [pc, #80]	; (800ad9c <TIM_OC5_SetConfig+0xc0>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d003      	beq.n	800ad56 <TIM_OC5_SetConfig+0x7a>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a13      	ldr	r2, [pc, #76]	; (800ada0 <TIM_OC5_SetConfig+0xc4>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d109      	bne.n	800ad6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	021b      	lsls	r3, r3, #8
 800ad64:	697a      	ldr	r2, [r7, #20]
 800ad66:	4313      	orrs	r3, r2
 800ad68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	697a      	ldr	r2, [r7, #20]
 800ad6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	621a      	str	r2, [r3, #32]
}
 800ad84:	bf00      	nop
 800ad86:	371c      	adds	r7, #28
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	40012c00 	.word	0x40012c00
 800ad94:	40013400 	.word	0x40013400
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	40014400 	.word	0x40014400
 800ada0:	40014800 	.word	0x40014800

0800ada4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b087      	sub	sp, #28
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a1b      	ldr	r3, [r3, #32]
 800adb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800add2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800add6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	021b      	lsls	r3, r3, #8
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800adea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	051b      	lsls	r3, r3, #20
 800adf2:	693a      	ldr	r2, [r7, #16]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	4a18      	ldr	r2, [pc, #96]	; (800ae5c <TIM_OC6_SetConfig+0xb8>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d00f      	beq.n	800ae20 <TIM_OC6_SetConfig+0x7c>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4a17      	ldr	r2, [pc, #92]	; (800ae60 <TIM_OC6_SetConfig+0xbc>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d00b      	beq.n	800ae20 <TIM_OC6_SetConfig+0x7c>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4a16      	ldr	r2, [pc, #88]	; (800ae64 <TIM_OC6_SetConfig+0xc0>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d007      	beq.n	800ae20 <TIM_OC6_SetConfig+0x7c>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a15      	ldr	r2, [pc, #84]	; (800ae68 <TIM_OC6_SetConfig+0xc4>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d003      	beq.n	800ae20 <TIM_OC6_SetConfig+0x7c>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	4a14      	ldr	r2, [pc, #80]	; (800ae6c <TIM_OC6_SetConfig+0xc8>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d109      	bne.n	800ae34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	029b      	lsls	r3, r3, #10
 800ae2e:	697a      	ldr	r2, [r7, #20]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	40012c00 	.word	0x40012c00
 800ae60:	40013400 	.word	0x40013400
 800ae64:	40014000 	.word	0x40014000
 800ae68:	40014400 	.word	0x40014400
 800ae6c:	40014800 	.word	0x40014800

0800ae70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	f023 0201 	bic.w	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f023 030a 	bic.w	r3, r3, #10
 800aeac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	bf00      	nop
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aece:	b480      	push	{r7}
 800aed0:	b087      	sub	sp, #28
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	f023 0210 	bic.w	r2, r3, #16
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	031b      	lsls	r3, r3, #12
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4313      	orrs	r3, r2
 800af02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4313      	orrs	r3, r2
 800af14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	621a      	str	r2, [r3, #32]
}
 800af22:	bf00      	nop
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af2e:	b480      	push	{r7}
 800af30:	b085      	sub	sp, #20
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	f043 0307 	orr.w	r3, r3, #7
 800af50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	609a      	str	r2, [r3, #8]
}
 800af58:	bf00      	nop
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	021a      	lsls	r2, r3, #8
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	431a      	orrs	r2, r3
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	4313      	orrs	r3, r2
 800af90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	609a      	str	r2, [r3, #8]
}
 800af98:	bf00      	nop
 800af9a:	371c      	adds	r7, #28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f003 031f 	and.w	r3, r3, #31
 800afb6:	2201      	movs	r2, #1
 800afb8:	fa02 f303 	lsl.w	r3, r2, r3
 800afbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a1a      	ldr	r2, [r3, #32]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	43db      	mvns	r3, r3
 800afc6:	401a      	ands	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a1a      	ldr	r2, [r3, #32]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f003 031f 	and.w	r3, r3, #31
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	fa01 f303 	lsl.w	r3, r1, r3
 800afdc:	431a      	orrs	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	621a      	str	r2, [r3, #32]
}
 800afe2:	bf00      	nop
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
	...

0800aff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b000:	2b01      	cmp	r3, #1
 800b002:	d101      	bne.n	800b008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b004:	2302      	movs	r3, #2
 800b006:	e068      	b.n	800b0da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2202      	movs	r2, #2
 800b014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a2e      	ldr	r2, [pc, #184]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d004      	beq.n	800b03c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a2d      	ldr	r2, [pc, #180]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d108      	bne.n	800b04e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	68fa      	ldr	r2, [r7, #12]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	68fa      	ldr	r2, [r7, #12]
 800b066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a1e      	ldr	r2, [pc, #120]	; (800b0e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d01d      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b07a:	d018      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a1b      	ldr	r2, [pc, #108]	; (800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d013      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	4a1a      	ldr	r2, [pc, #104]	; (800b0f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d00e      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d009      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a13      	ldr	r2, [pc, #76]	; (800b0ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d004      	beq.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a14      	ldr	r2, [pc, #80]	; (800b0fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d10c      	bne.n	800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	689b      	ldr	r3, [r3, #8]
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	40012c00 	.word	0x40012c00
 800b0ec:	40013400 	.word	0x40013400
 800b0f0:	40000400 	.word	0x40000400
 800b0f4:	40000800 	.word	0x40000800
 800b0f8:	40000c00 	.word	0x40000c00
 800b0fc:	40014000 	.word	0x40014000

0800b100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b108:	bf00      	nop
 800b10a:	370c      	adds	r7, #12
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <atoi>:
 800b13c:	220a      	movs	r2, #10
 800b13e:	2100      	movs	r1, #0
 800b140:	f000 b940 	b.w	800b3c4 <strtol>

0800b144 <malloc>:
 800b144:	4b02      	ldr	r3, [pc, #8]	; (800b150 <malloc+0xc>)
 800b146:	4601      	mov	r1, r0
 800b148:	6818      	ldr	r0, [r3, #0]
 800b14a:	f000 b82b 	b.w	800b1a4 <_malloc_r>
 800b14e:	bf00      	nop
 800b150:	200001e0 	.word	0x200001e0

0800b154 <free>:
 800b154:	4b02      	ldr	r3, [pc, #8]	; (800b160 <free+0xc>)
 800b156:	4601      	mov	r1, r0
 800b158:	6818      	ldr	r0, [r3, #0]
 800b15a:	f000 bc39 	b.w	800b9d0 <_free_r>
 800b15e:	bf00      	nop
 800b160:	200001e0 	.word	0x200001e0

0800b164 <sbrk_aligned>:
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	4e0e      	ldr	r6, [pc, #56]	; (800b1a0 <sbrk_aligned+0x3c>)
 800b168:	460c      	mov	r4, r1
 800b16a:	6831      	ldr	r1, [r6, #0]
 800b16c:	4605      	mov	r5, r0
 800b16e:	b911      	cbnz	r1, 800b176 <sbrk_aligned+0x12>
 800b170:	f000 fbd6 	bl	800b920 <_sbrk_r>
 800b174:	6030      	str	r0, [r6, #0]
 800b176:	4621      	mov	r1, r4
 800b178:	4628      	mov	r0, r5
 800b17a:	f000 fbd1 	bl	800b920 <_sbrk_r>
 800b17e:	1c43      	adds	r3, r0, #1
 800b180:	d00a      	beq.n	800b198 <sbrk_aligned+0x34>
 800b182:	1cc4      	adds	r4, r0, #3
 800b184:	f024 0403 	bic.w	r4, r4, #3
 800b188:	42a0      	cmp	r0, r4
 800b18a:	d007      	beq.n	800b19c <sbrk_aligned+0x38>
 800b18c:	1a21      	subs	r1, r4, r0
 800b18e:	4628      	mov	r0, r5
 800b190:	f000 fbc6 	bl	800b920 <_sbrk_r>
 800b194:	3001      	adds	r0, #1
 800b196:	d101      	bne.n	800b19c <sbrk_aligned+0x38>
 800b198:	f04f 34ff 	mov.w	r4, #4294967295
 800b19c:	4620      	mov	r0, r4
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
 800b1a0:	200006a4 	.word	0x200006a4

0800b1a4 <_malloc_r>:
 800b1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1a8:	1ccd      	adds	r5, r1, #3
 800b1aa:	f025 0503 	bic.w	r5, r5, #3
 800b1ae:	3508      	adds	r5, #8
 800b1b0:	2d0c      	cmp	r5, #12
 800b1b2:	bf38      	it	cc
 800b1b4:	250c      	movcc	r5, #12
 800b1b6:	2d00      	cmp	r5, #0
 800b1b8:	4607      	mov	r7, r0
 800b1ba:	db01      	blt.n	800b1c0 <_malloc_r+0x1c>
 800b1bc:	42a9      	cmp	r1, r5
 800b1be:	d905      	bls.n	800b1cc <_malloc_r+0x28>
 800b1c0:	230c      	movs	r3, #12
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	2600      	movs	r6, #0
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b2a0 <_malloc_r+0xfc>
 800b1d0:	f000 f868 	bl	800b2a4 <__malloc_lock>
 800b1d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1d8:	461c      	mov	r4, r3
 800b1da:	bb5c      	cbnz	r4, 800b234 <_malloc_r+0x90>
 800b1dc:	4629      	mov	r1, r5
 800b1de:	4638      	mov	r0, r7
 800b1e0:	f7ff ffc0 	bl	800b164 <sbrk_aligned>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	d155      	bne.n	800b296 <_malloc_r+0xf2>
 800b1ea:	f8d8 4000 	ldr.w	r4, [r8]
 800b1ee:	4626      	mov	r6, r4
 800b1f0:	2e00      	cmp	r6, #0
 800b1f2:	d145      	bne.n	800b280 <_malloc_r+0xdc>
 800b1f4:	2c00      	cmp	r4, #0
 800b1f6:	d048      	beq.n	800b28a <_malloc_r+0xe6>
 800b1f8:	6823      	ldr	r3, [r4, #0]
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	eb04 0903 	add.w	r9, r4, r3
 800b202:	f000 fb8d 	bl	800b920 <_sbrk_r>
 800b206:	4581      	cmp	r9, r0
 800b208:	d13f      	bne.n	800b28a <_malloc_r+0xe6>
 800b20a:	6821      	ldr	r1, [r4, #0]
 800b20c:	1a6d      	subs	r5, r5, r1
 800b20e:	4629      	mov	r1, r5
 800b210:	4638      	mov	r0, r7
 800b212:	f7ff ffa7 	bl	800b164 <sbrk_aligned>
 800b216:	3001      	adds	r0, #1
 800b218:	d037      	beq.n	800b28a <_malloc_r+0xe6>
 800b21a:	6823      	ldr	r3, [r4, #0]
 800b21c:	442b      	add	r3, r5
 800b21e:	6023      	str	r3, [r4, #0]
 800b220:	f8d8 3000 	ldr.w	r3, [r8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d038      	beq.n	800b29a <_malloc_r+0xf6>
 800b228:	685a      	ldr	r2, [r3, #4]
 800b22a:	42a2      	cmp	r2, r4
 800b22c:	d12b      	bne.n	800b286 <_malloc_r+0xe2>
 800b22e:	2200      	movs	r2, #0
 800b230:	605a      	str	r2, [r3, #4]
 800b232:	e00f      	b.n	800b254 <_malloc_r+0xb0>
 800b234:	6822      	ldr	r2, [r4, #0]
 800b236:	1b52      	subs	r2, r2, r5
 800b238:	d41f      	bmi.n	800b27a <_malloc_r+0xd6>
 800b23a:	2a0b      	cmp	r2, #11
 800b23c:	d917      	bls.n	800b26e <_malloc_r+0xca>
 800b23e:	1961      	adds	r1, r4, r5
 800b240:	42a3      	cmp	r3, r4
 800b242:	6025      	str	r5, [r4, #0]
 800b244:	bf18      	it	ne
 800b246:	6059      	strne	r1, [r3, #4]
 800b248:	6863      	ldr	r3, [r4, #4]
 800b24a:	bf08      	it	eq
 800b24c:	f8c8 1000 	streq.w	r1, [r8]
 800b250:	5162      	str	r2, [r4, r5]
 800b252:	604b      	str	r3, [r1, #4]
 800b254:	4638      	mov	r0, r7
 800b256:	f104 060b 	add.w	r6, r4, #11
 800b25a:	f000 f829 	bl	800b2b0 <__malloc_unlock>
 800b25e:	f026 0607 	bic.w	r6, r6, #7
 800b262:	1d23      	adds	r3, r4, #4
 800b264:	1af2      	subs	r2, r6, r3
 800b266:	d0ae      	beq.n	800b1c6 <_malloc_r+0x22>
 800b268:	1b9b      	subs	r3, r3, r6
 800b26a:	50a3      	str	r3, [r4, r2]
 800b26c:	e7ab      	b.n	800b1c6 <_malloc_r+0x22>
 800b26e:	42a3      	cmp	r3, r4
 800b270:	6862      	ldr	r2, [r4, #4]
 800b272:	d1dd      	bne.n	800b230 <_malloc_r+0x8c>
 800b274:	f8c8 2000 	str.w	r2, [r8]
 800b278:	e7ec      	b.n	800b254 <_malloc_r+0xb0>
 800b27a:	4623      	mov	r3, r4
 800b27c:	6864      	ldr	r4, [r4, #4]
 800b27e:	e7ac      	b.n	800b1da <_malloc_r+0x36>
 800b280:	4634      	mov	r4, r6
 800b282:	6876      	ldr	r6, [r6, #4]
 800b284:	e7b4      	b.n	800b1f0 <_malloc_r+0x4c>
 800b286:	4613      	mov	r3, r2
 800b288:	e7cc      	b.n	800b224 <_malloc_r+0x80>
 800b28a:	230c      	movs	r3, #12
 800b28c:	603b      	str	r3, [r7, #0]
 800b28e:	4638      	mov	r0, r7
 800b290:	f000 f80e 	bl	800b2b0 <__malloc_unlock>
 800b294:	e797      	b.n	800b1c6 <_malloc_r+0x22>
 800b296:	6025      	str	r5, [r4, #0]
 800b298:	e7dc      	b.n	800b254 <_malloc_r+0xb0>
 800b29a:	605b      	str	r3, [r3, #4]
 800b29c:	deff      	udf	#255	; 0xff
 800b29e:	bf00      	nop
 800b2a0:	200006a0 	.word	0x200006a0

0800b2a4 <__malloc_lock>:
 800b2a4:	4801      	ldr	r0, [pc, #4]	; (800b2ac <__malloc_lock+0x8>)
 800b2a6:	f000 bb88 	b.w	800b9ba <__retarget_lock_acquire_recursive>
 800b2aa:	bf00      	nop
 800b2ac:	200007e8 	.word	0x200007e8

0800b2b0 <__malloc_unlock>:
 800b2b0:	4801      	ldr	r0, [pc, #4]	; (800b2b8 <__malloc_unlock+0x8>)
 800b2b2:	f000 bb83 	b.w	800b9bc <__retarget_lock_release_recursive>
 800b2b6:	bf00      	nop
 800b2b8:	200007e8 	.word	0x200007e8

0800b2bc <_strtol_l.constprop.0>:
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c2:	d001      	beq.n	800b2c8 <_strtol_l.constprop.0+0xc>
 800b2c4:	2b24      	cmp	r3, #36	; 0x24
 800b2c6:	d906      	bls.n	800b2d6 <_strtol_l.constprop.0+0x1a>
 800b2c8:	f000 fb4c 	bl	800b964 <__errno>
 800b2cc:	2316      	movs	r3, #22
 800b2ce:	6003      	str	r3, [r0, #0]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b3bc <_strtol_l.constprop.0+0x100>
 800b2da:	460d      	mov	r5, r1
 800b2dc:	462e      	mov	r6, r5
 800b2de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b2e6:	f017 0708 	ands.w	r7, r7, #8
 800b2ea:	d1f7      	bne.n	800b2dc <_strtol_l.constprop.0+0x20>
 800b2ec:	2c2d      	cmp	r4, #45	; 0x2d
 800b2ee:	d132      	bne.n	800b356 <_strtol_l.constprop.0+0x9a>
 800b2f0:	782c      	ldrb	r4, [r5, #0]
 800b2f2:	2701      	movs	r7, #1
 800b2f4:	1cb5      	adds	r5, r6, #2
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d05b      	beq.n	800b3b2 <_strtol_l.constprop.0+0xf6>
 800b2fa:	2b10      	cmp	r3, #16
 800b2fc:	d109      	bne.n	800b312 <_strtol_l.constprop.0+0x56>
 800b2fe:	2c30      	cmp	r4, #48	; 0x30
 800b300:	d107      	bne.n	800b312 <_strtol_l.constprop.0+0x56>
 800b302:	782c      	ldrb	r4, [r5, #0]
 800b304:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b308:	2c58      	cmp	r4, #88	; 0x58
 800b30a:	d14d      	bne.n	800b3a8 <_strtol_l.constprop.0+0xec>
 800b30c:	786c      	ldrb	r4, [r5, #1]
 800b30e:	2310      	movs	r3, #16
 800b310:	3502      	adds	r5, #2
 800b312:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b316:	f108 38ff 	add.w	r8, r8, #4294967295
 800b31a:	f04f 0e00 	mov.w	lr, #0
 800b31e:	fbb8 f9f3 	udiv	r9, r8, r3
 800b322:	4676      	mov	r6, lr
 800b324:	fb03 8a19 	mls	sl, r3, r9, r8
 800b328:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b32c:	f1bc 0f09 	cmp.w	ip, #9
 800b330:	d816      	bhi.n	800b360 <_strtol_l.constprop.0+0xa4>
 800b332:	4664      	mov	r4, ip
 800b334:	42a3      	cmp	r3, r4
 800b336:	dd24      	ble.n	800b382 <_strtol_l.constprop.0+0xc6>
 800b338:	f1be 3fff 	cmp.w	lr, #4294967295
 800b33c:	d008      	beq.n	800b350 <_strtol_l.constprop.0+0x94>
 800b33e:	45b1      	cmp	r9, r6
 800b340:	d31c      	bcc.n	800b37c <_strtol_l.constprop.0+0xc0>
 800b342:	d101      	bne.n	800b348 <_strtol_l.constprop.0+0x8c>
 800b344:	45a2      	cmp	sl, r4
 800b346:	db19      	blt.n	800b37c <_strtol_l.constprop.0+0xc0>
 800b348:	fb06 4603 	mla	r6, r6, r3, r4
 800b34c:	f04f 0e01 	mov.w	lr, #1
 800b350:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b354:	e7e8      	b.n	800b328 <_strtol_l.constprop.0+0x6c>
 800b356:	2c2b      	cmp	r4, #43	; 0x2b
 800b358:	bf04      	itt	eq
 800b35a:	782c      	ldrbeq	r4, [r5, #0]
 800b35c:	1cb5      	addeq	r5, r6, #2
 800b35e:	e7ca      	b.n	800b2f6 <_strtol_l.constprop.0+0x3a>
 800b360:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b364:	f1bc 0f19 	cmp.w	ip, #25
 800b368:	d801      	bhi.n	800b36e <_strtol_l.constprop.0+0xb2>
 800b36a:	3c37      	subs	r4, #55	; 0x37
 800b36c:	e7e2      	b.n	800b334 <_strtol_l.constprop.0+0x78>
 800b36e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b372:	f1bc 0f19 	cmp.w	ip, #25
 800b376:	d804      	bhi.n	800b382 <_strtol_l.constprop.0+0xc6>
 800b378:	3c57      	subs	r4, #87	; 0x57
 800b37a:	e7db      	b.n	800b334 <_strtol_l.constprop.0+0x78>
 800b37c:	f04f 3eff 	mov.w	lr, #4294967295
 800b380:	e7e6      	b.n	800b350 <_strtol_l.constprop.0+0x94>
 800b382:	f1be 3fff 	cmp.w	lr, #4294967295
 800b386:	d105      	bne.n	800b394 <_strtol_l.constprop.0+0xd8>
 800b388:	2322      	movs	r3, #34	; 0x22
 800b38a:	6003      	str	r3, [r0, #0]
 800b38c:	4646      	mov	r6, r8
 800b38e:	b942      	cbnz	r2, 800b3a2 <_strtol_l.constprop.0+0xe6>
 800b390:	4630      	mov	r0, r6
 800b392:	e79e      	b.n	800b2d2 <_strtol_l.constprop.0+0x16>
 800b394:	b107      	cbz	r7, 800b398 <_strtol_l.constprop.0+0xdc>
 800b396:	4276      	negs	r6, r6
 800b398:	2a00      	cmp	r2, #0
 800b39a:	d0f9      	beq.n	800b390 <_strtol_l.constprop.0+0xd4>
 800b39c:	f1be 0f00 	cmp.w	lr, #0
 800b3a0:	d000      	beq.n	800b3a4 <_strtol_l.constprop.0+0xe8>
 800b3a2:	1e69      	subs	r1, r5, #1
 800b3a4:	6011      	str	r1, [r2, #0]
 800b3a6:	e7f3      	b.n	800b390 <_strtol_l.constprop.0+0xd4>
 800b3a8:	2430      	movs	r4, #48	; 0x30
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1b1      	bne.n	800b312 <_strtol_l.constprop.0+0x56>
 800b3ae:	2308      	movs	r3, #8
 800b3b0:	e7af      	b.n	800b312 <_strtol_l.constprop.0+0x56>
 800b3b2:	2c30      	cmp	r4, #48	; 0x30
 800b3b4:	d0a5      	beq.n	800b302 <_strtol_l.constprop.0+0x46>
 800b3b6:	230a      	movs	r3, #10
 800b3b8:	e7ab      	b.n	800b312 <_strtol_l.constprop.0+0x56>
 800b3ba:	bf00      	nop
 800b3bc:	0804dff3 	.word	0x0804dff3

0800b3c0 <_strtol_r>:
 800b3c0:	f7ff bf7c 	b.w	800b2bc <_strtol_l.constprop.0>

0800b3c4 <strtol>:
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	460a      	mov	r2, r1
 800b3c8:	4601      	mov	r1, r0
 800b3ca:	4802      	ldr	r0, [pc, #8]	; (800b3d4 <strtol+0x10>)
 800b3cc:	6800      	ldr	r0, [r0, #0]
 800b3ce:	f7ff bf75 	b.w	800b2bc <_strtol_l.constprop.0>
 800b3d2:	bf00      	nop
 800b3d4:	200001e0 	.word	0x200001e0

0800b3d8 <std>:
 800b3d8:	2300      	movs	r3, #0
 800b3da:	b510      	push	{r4, lr}
 800b3dc:	4604      	mov	r4, r0
 800b3de:	e9c0 3300 	strd	r3, r3, [r0]
 800b3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3e6:	6083      	str	r3, [r0, #8]
 800b3e8:	8181      	strh	r1, [r0, #12]
 800b3ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b3ec:	81c2      	strh	r2, [r0, #14]
 800b3ee:	6183      	str	r3, [r0, #24]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	2208      	movs	r2, #8
 800b3f4:	305c      	adds	r0, #92	; 0x5c
 800b3f6:	f000 fa45 	bl	800b884 <memset>
 800b3fa:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <std+0x58>)
 800b3fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b3fe:	4b0d      	ldr	r3, [pc, #52]	; (800b434 <std+0x5c>)
 800b400:	62a3      	str	r3, [r4, #40]	; 0x28
 800b402:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <std+0x60>)
 800b404:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b406:	4b0d      	ldr	r3, [pc, #52]	; (800b43c <std+0x64>)
 800b408:	6323      	str	r3, [r4, #48]	; 0x30
 800b40a:	4b0d      	ldr	r3, [pc, #52]	; (800b440 <std+0x68>)
 800b40c:	6224      	str	r4, [r4, #32]
 800b40e:	429c      	cmp	r4, r3
 800b410:	d006      	beq.n	800b420 <std+0x48>
 800b412:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b416:	4294      	cmp	r4, r2
 800b418:	d002      	beq.n	800b420 <std+0x48>
 800b41a:	33d0      	adds	r3, #208	; 0xd0
 800b41c:	429c      	cmp	r4, r3
 800b41e:	d105      	bne.n	800b42c <std+0x54>
 800b420:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b428:	f000 bac6 	b.w	800b9b8 <__retarget_lock_init_recursive>
 800b42c:	bd10      	pop	{r4, pc}
 800b42e:	bf00      	nop
 800b430:	0800b6d1 	.word	0x0800b6d1
 800b434:	0800b6f7 	.word	0x0800b6f7
 800b438:	0800b72f 	.word	0x0800b72f
 800b43c:	0800b753 	.word	0x0800b753
 800b440:	200006a8 	.word	0x200006a8

0800b444 <stdio_exit_handler>:
 800b444:	4a02      	ldr	r2, [pc, #8]	; (800b450 <stdio_exit_handler+0xc>)
 800b446:	4903      	ldr	r1, [pc, #12]	; (800b454 <stdio_exit_handler+0x10>)
 800b448:	4803      	ldr	r0, [pc, #12]	; (800b458 <stdio_exit_handler+0x14>)
 800b44a:	f000 b869 	b.w	800b520 <_fwalk_sglue>
 800b44e:	bf00      	nop
 800b450:	20000188 	.word	0x20000188
 800b454:	0800ca0d 	.word	0x0800ca0d
 800b458:	20000194 	.word	0x20000194

0800b45c <cleanup_stdio>:
 800b45c:	6841      	ldr	r1, [r0, #4]
 800b45e:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <cleanup_stdio+0x34>)
 800b460:	4299      	cmp	r1, r3
 800b462:	b510      	push	{r4, lr}
 800b464:	4604      	mov	r4, r0
 800b466:	d001      	beq.n	800b46c <cleanup_stdio+0x10>
 800b468:	f001 fad0 	bl	800ca0c <_fflush_r>
 800b46c:	68a1      	ldr	r1, [r4, #8]
 800b46e:	4b09      	ldr	r3, [pc, #36]	; (800b494 <cleanup_stdio+0x38>)
 800b470:	4299      	cmp	r1, r3
 800b472:	d002      	beq.n	800b47a <cleanup_stdio+0x1e>
 800b474:	4620      	mov	r0, r4
 800b476:	f001 fac9 	bl	800ca0c <_fflush_r>
 800b47a:	68e1      	ldr	r1, [r4, #12]
 800b47c:	4b06      	ldr	r3, [pc, #24]	; (800b498 <cleanup_stdio+0x3c>)
 800b47e:	4299      	cmp	r1, r3
 800b480:	d004      	beq.n	800b48c <cleanup_stdio+0x30>
 800b482:	4620      	mov	r0, r4
 800b484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b488:	f001 bac0 	b.w	800ca0c <_fflush_r>
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	bf00      	nop
 800b490:	200006a8 	.word	0x200006a8
 800b494:	20000710 	.word	0x20000710
 800b498:	20000778 	.word	0x20000778

0800b49c <global_stdio_init.part.0>:
 800b49c:	b510      	push	{r4, lr}
 800b49e:	4b0b      	ldr	r3, [pc, #44]	; (800b4cc <global_stdio_init.part.0+0x30>)
 800b4a0:	4c0b      	ldr	r4, [pc, #44]	; (800b4d0 <global_stdio_init.part.0+0x34>)
 800b4a2:	4a0c      	ldr	r2, [pc, #48]	; (800b4d4 <global_stdio_init.part.0+0x38>)
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	2104      	movs	r1, #4
 800b4ac:	f7ff ff94 	bl	800b3d8 <std>
 800b4b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	2109      	movs	r1, #9
 800b4b8:	f7ff ff8e 	bl	800b3d8 <std>
 800b4bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4c6:	2112      	movs	r1, #18
 800b4c8:	f7ff bf86 	b.w	800b3d8 <std>
 800b4cc:	200007e0 	.word	0x200007e0
 800b4d0:	200006a8 	.word	0x200006a8
 800b4d4:	0800b445 	.word	0x0800b445

0800b4d8 <__sfp_lock_acquire>:
 800b4d8:	4801      	ldr	r0, [pc, #4]	; (800b4e0 <__sfp_lock_acquire+0x8>)
 800b4da:	f000 ba6e 	b.w	800b9ba <__retarget_lock_acquire_recursive>
 800b4de:	bf00      	nop
 800b4e0:	200007e9 	.word	0x200007e9

0800b4e4 <__sfp_lock_release>:
 800b4e4:	4801      	ldr	r0, [pc, #4]	; (800b4ec <__sfp_lock_release+0x8>)
 800b4e6:	f000 ba69 	b.w	800b9bc <__retarget_lock_release_recursive>
 800b4ea:	bf00      	nop
 800b4ec:	200007e9 	.word	0x200007e9

0800b4f0 <__sinit>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	f7ff fff0 	bl	800b4d8 <__sfp_lock_acquire>
 800b4f8:	6a23      	ldr	r3, [r4, #32]
 800b4fa:	b11b      	cbz	r3, 800b504 <__sinit+0x14>
 800b4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b500:	f7ff bff0 	b.w	800b4e4 <__sfp_lock_release>
 800b504:	4b04      	ldr	r3, [pc, #16]	; (800b518 <__sinit+0x28>)
 800b506:	6223      	str	r3, [r4, #32]
 800b508:	4b04      	ldr	r3, [pc, #16]	; (800b51c <__sinit+0x2c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1f5      	bne.n	800b4fc <__sinit+0xc>
 800b510:	f7ff ffc4 	bl	800b49c <global_stdio_init.part.0>
 800b514:	e7f2      	b.n	800b4fc <__sinit+0xc>
 800b516:	bf00      	nop
 800b518:	0800b45d 	.word	0x0800b45d
 800b51c:	200007e0 	.word	0x200007e0

0800b520 <_fwalk_sglue>:
 800b520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b524:	4607      	mov	r7, r0
 800b526:	4688      	mov	r8, r1
 800b528:	4614      	mov	r4, r2
 800b52a:	2600      	movs	r6, #0
 800b52c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b530:	f1b9 0901 	subs.w	r9, r9, #1
 800b534:	d505      	bpl.n	800b542 <_fwalk_sglue+0x22>
 800b536:	6824      	ldr	r4, [r4, #0]
 800b538:	2c00      	cmp	r4, #0
 800b53a:	d1f7      	bne.n	800b52c <_fwalk_sglue+0xc>
 800b53c:	4630      	mov	r0, r6
 800b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b542:	89ab      	ldrh	r3, [r5, #12]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d907      	bls.n	800b558 <_fwalk_sglue+0x38>
 800b548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b54c:	3301      	adds	r3, #1
 800b54e:	d003      	beq.n	800b558 <_fwalk_sglue+0x38>
 800b550:	4629      	mov	r1, r5
 800b552:	4638      	mov	r0, r7
 800b554:	47c0      	blx	r8
 800b556:	4306      	orrs	r6, r0
 800b558:	3568      	adds	r5, #104	; 0x68
 800b55a:	e7e9      	b.n	800b530 <_fwalk_sglue+0x10>

0800b55c <iprintf>:
 800b55c:	b40f      	push	{r0, r1, r2, r3}
 800b55e:	b507      	push	{r0, r1, r2, lr}
 800b560:	4906      	ldr	r1, [pc, #24]	; (800b57c <iprintf+0x20>)
 800b562:	ab04      	add	r3, sp, #16
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	f853 2b04 	ldr.w	r2, [r3], #4
 800b56a:	6881      	ldr	r1, [r0, #8]
 800b56c:	9301      	str	r3, [sp, #4]
 800b56e:	f000 fdcf 	bl	800c110 <_vfiprintf_r>
 800b572:	b003      	add	sp, #12
 800b574:	f85d eb04 	ldr.w	lr, [sp], #4
 800b578:	b004      	add	sp, #16
 800b57a:	4770      	bx	lr
 800b57c:	200001e0 	.word	0x200001e0

0800b580 <_puts_r>:
 800b580:	6a03      	ldr	r3, [r0, #32]
 800b582:	b570      	push	{r4, r5, r6, lr}
 800b584:	6884      	ldr	r4, [r0, #8]
 800b586:	4605      	mov	r5, r0
 800b588:	460e      	mov	r6, r1
 800b58a:	b90b      	cbnz	r3, 800b590 <_puts_r+0x10>
 800b58c:	f7ff ffb0 	bl	800b4f0 <__sinit>
 800b590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b592:	07db      	lsls	r3, r3, #31
 800b594:	d405      	bmi.n	800b5a2 <_puts_r+0x22>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	0598      	lsls	r0, r3, #22
 800b59a:	d402      	bmi.n	800b5a2 <_puts_r+0x22>
 800b59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b59e:	f000 fa0c 	bl	800b9ba <__retarget_lock_acquire_recursive>
 800b5a2:	89a3      	ldrh	r3, [r4, #12]
 800b5a4:	0719      	lsls	r1, r3, #28
 800b5a6:	d513      	bpl.n	800b5d0 <_puts_r+0x50>
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	b18b      	cbz	r3, 800b5d0 <_puts_r+0x50>
 800b5ac:	3e01      	subs	r6, #1
 800b5ae:	68a3      	ldr	r3, [r4, #8]
 800b5b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	60a3      	str	r3, [r4, #8]
 800b5b8:	b9e9      	cbnz	r1, 800b5f6 <_puts_r+0x76>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	da2e      	bge.n	800b61c <_puts_r+0x9c>
 800b5be:	4622      	mov	r2, r4
 800b5c0:	210a      	movs	r1, #10
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f000 f8c9 	bl	800b75a <__swbuf_r>
 800b5c8:	3001      	adds	r0, #1
 800b5ca:	d007      	beq.n	800b5dc <_puts_r+0x5c>
 800b5cc:	250a      	movs	r5, #10
 800b5ce:	e007      	b.n	800b5e0 <_puts_r+0x60>
 800b5d0:	4621      	mov	r1, r4
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f000 f8fe 	bl	800b7d4 <__swsetup_r>
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d0e7      	beq.n	800b5ac <_puts_r+0x2c>
 800b5dc:	f04f 35ff 	mov.w	r5, #4294967295
 800b5e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5e2:	07da      	lsls	r2, r3, #31
 800b5e4:	d405      	bmi.n	800b5f2 <_puts_r+0x72>
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	059b      	lsls	r3, r3, #22
 800b5ea:	d402      	bmi.n	800b5f2 <_puts_r+0x72>
 800b5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5ee:	f000 f9e5 	bl	800b9bc <__retarget_lock_release_recursive>
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	bd70      	pop	{r4, r5, r6, pc}
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	da04      	bge.n	800b604 <_puts_r+0x84>
 800b5fa:	69a2      	ldr	r2, [r4, #24]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	dc06      	bgt.n	800b60e <_puts_r+0x8e>
 800b600:	290a      	cmp	r1, #10
 800b602:	d004      	beq.n	800b60e <_puts_r+0x8e>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	1c5a      	adds	r2, r3, #1
 800b608:	6022      	str	r2, [r4, #0]
 800b60a:	7019      	strb	r1, [r3, #0]
 800b60c:	e7cf      	b.n	800b5ae <_puts_r+0x2e>
 800b60e:	4622      	mov	r2, r4
 800b610:	4628      	mov	r0, r5
 800b612:	f000 f8a2 	bl	800b75a <__swbuf_r>
 800b616:	3001      	adds	r0, #1
 800b618:	d1c9      	bne.n	800b5ae <_puts_r+0x2e>
 800b61a:	e7df      	b.n	800b5dc <_puts_r+0x5c>
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	250a      	movs	r5, #10
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	6022      	str	r2, [r4, #0]
 800b624:	701d      	strb	r5, [r3, #0]
 800b626:	e7db      	b.n	800b5e0 <_puts_r+0x60>

0800b628 <puts>:
 800b628:	4b02      	ldr	r3, [pc, #8]	; (800b634 <puts+0xc>)
 800b62a:	4601      	mov	r1, r0
 800b62c:	6818      	ldr	r0, [r3, #0]
 800b62e:	f7ff bfa7 	b.w	800b580 <_puts_r>
 800b632:	bf00      	nop
 800b634:	200001e0 	.word	0x200001e0

0800b638 <siprintf>:
 800b638:	b40e      	push	{r1, r2, r3}
 800b63a:	b500      	push	{lr}
 800b63c:	b09c      	sub	sp, #112	; 0x70
 800b63e:	ab1d      	add	r3, sp, #116	; 0x74
 800b640:	9002      	str	r0, [sp, #8]
 800b642:	9006      	str	r0, [sp, #24]
 800b644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b648:	4809      	ldr	r0, [pc, #36]	; (800b670 <siprintf+0x38>)
 800b64a:	9107      	str	r1, [sp, #28]
 800b64c:	9104      	str	r1, [sp, #16]
 800b64e:	4909      	ldr	r1, [pc, #36]	; (800b674 <siprintf+0x3c>)
 800b650:	f853 2b04 	ldr.w	r2, [r3], #4
 800b654:	9105      	str	r1, [sp, #20]
 800b656:	6800      	ldr	r0, [r0, #0]
 800b658:	9301      	str	r3, [sp, #4]
 800b65a:	a902      	add	r1, sp, #8
 800b65c:	f000 fa5e 	bl	800bb1c <_svfiprintf_r>
 800b660:	9b02      	ldr	r3, [sp, #8]
 800b662:	2200      	movs	r2, #0
 800b664:	701a      	strb	r2, [r3, #0]
 800b666:	b01c      	add	sp, #112	; 0x70
 800b668:	f85d eb04 	ldr.w	lr, [sp], #4
 800b66c:	b003      	add	sp, #12
 800b66e:	4770      	bx	lr
 800b670:	200001e0 	.word	0x200001e0
 800b674:	ffff0208 	.word	0xffff0208

0800b678 <siscanf>:
 800b678:	b40e      	push	{r1, r2, r3}
 800b67a:	b510      	push	{r4, lr}
 800b67c:	b09f      	sub	sp, #124	; 0x7c
 800b67e:	ac21      	add	r4, sp, #132	; 0x84
 800b680:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b684:	f854 2b04 	ldr.w	r2, [r4], #4
 800b688:	9201      	str	r2, [sp, #4]
 800b68a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b68e:	9004      	str	r0, [sp, #16]
 800b690:	9008      	str	r0, [sp, #32]
 800b692:	f7f4 fd9d 	bl	80001d0 <strlen>
 800b696:	4b0c      	ldr	r3, [pc, #48]	; (800b6c8 <siscanf+0x50>)
 800b698:	9005      	str	r0, [sp, #20]
 800b69a:	9009      	str	r0, [sp, #36]	; 0x24
 800b69c:	930d      	str	r3, [sp, #52]	; 0x34
 800b69e:	480b      	ldr	r0, [pc, #44]	; (800b6cc <siscanf+0x54>)
 800b6a0:	9a01      	ldr	r2, [sp, #4]
 800b6a2:	6800      	ldr	r0, [r0, #0]
 800b6a4:	9403      	str	r4, [sp, #12]
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	9311      	str	r3, [sp, #68]	; 0x44
 800b6aa:	9316      	str	r3, [sp, #88]	; 0x58
 800b6ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b6b4:	a904      	add	r1, sp, #16
 800b6b6:	4623      	mov	r3, r4
 800b6b8:	f000 fb88 	bl	800bdcc <__ssvfiscanf_r>
 800b6bc:	b01f      	add	sp, #124	; 0x7c
 800b6be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6c2:	b003      	add	sp, #12
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	0800b6f3 	.word	0x0800b6f3
 800b6cc:	200001e0 	.word	0x200001e0

0800b6d0 <__sread>:
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d8:	f000 f910 	bl	800b8fc <_read_r>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	bfab      	itete	ge
 800b6e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b6e2:	89a3      	ldrhlt	r3, [r4, #12]
 800b6e4:	181b      	addge	r3, r3, r0
 800b6e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b6ea:	bfac      	ite	ge
 800b6ec:	6563      	strge	r3, [r4, #84]	; 0x54
 800b6ee:	81a3      	strhlt	r3, [r4, #12]
 800b6f0:	bd10      	pop	{r4, pc}

0800b6f2 <__seofread>:
 800b6f2:	2000      	movs	r0, #0
 800b6f4:	4770      	bx	lr

0800b6f6 <__swrite>:
 800b6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fa:	461f      	mov	r7, r3
 800b6fc:	898b      	ldrh	r3, [r1, #12]
 800b6fe:	05db      	lsls	r3, r3, #23
 800b700:	4605      	mov	r5, r0
 800b702:	460c      	mov	r4, r1
 800b704:	4616      	mov	r6, r2
 800b706:	d505      	bpl.n	800b714 <__swrite+0x1e>
 800b708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b70c:	2302      	movs	r3, #2
 800b70e:	2200      	movs	r2, #0
 800b710:	f000 f8e2 	bl	800b8d8 <_lseek_r>
 800b714:	89a3      	ldrh	r3, [r4, #12]
 800b716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b71a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b71e:	81a3      	strh	r3, [r4, #12]
 800b720:	4632      	mov	r2, r6
 800b722:	463b      	mov	r3, r7
 800b724:	4628      	mov	r0, r5
 800b726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b72a:	f000 b909 	b.w	800b940 <_write_r>

0800b72e <__sseek>:
 800b72e:	b510      	push	{r4, lr}
 800b730:	460c      	mov	r4, r1
 800b732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b736:	f000 f8cf 	bl	800b8d8 <_lseek_r>
 800b73a:	1c43      	adds	r3, r0, #1
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	bf15      	itete	ne
 800b740:	6560      	strne	r0, [r4, #84]	; 0x54
 800b742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b74a:	81a3      	strheq	r3, [r4, #12]
 800b74c:	bf18      	it	ne
 800b74e:	81a3      	strhne	r3, [r4, #12]
 800b750:	bd10      	pop	{r4, pc}

0800b752 <__sclose>:
 800b752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b756:	f000 b8af 	b.w	800b8b8 <_close_r>

0800b75a <__swbuf_r>:
 800b75a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75c:	460e      	mov	r6, r1
 800b75e:	4614      	mov	r4, r2
 800b760:	4605      	mov	r5, r0
 800b762:	b118      	cbz	r0, 800b76c <__swbuf_r+0x12>
 800b764:	6a03      	ldr	r3, [r0, #32]
 800b766:	b90b      	cbnz	r3, 800b76c <__swbuf_r+0x12>
 800b768:	f7ff fec2 	bl	800b4f0 <__sinit>
 800b76c:	69a3      	ldr	r3, [r4, #24]
 800b76e:	60a3      	str	r3, [r4, #8]
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	071a      	lsls	r2, r3, #28
 800b774:	d525      	bpl.n	800b7c2 <__swbuf_r+0x68>
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	b31b      	cbz	r3, 800b7c2 <__swbuf_r+0x68>
 800b77a:	6823      	ldr	r3, [r4, #0]
 800b77c:	6922      	ldr	r2, [r4, #16]
 800b77e:	1a98      	subs	r0, r3, r2
 800b780:	6963      	ldr	r3, [r4, #20]
 800b782:	b2f6      	uxtb	r6, r6
 800b784:	4283      	cmp	r3, r0
 800b786:	4637      	mov	r7, r6
 800b788:	dc04      	bgt.n	800b794 <__swbuf_r+0x3a>
 800b78a:	4621      	mov	r1, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	f001 f93d 	bl	800ca0c <_fflush_r>
 800b792:	b9e0      	cbnz	r0, 800b7ce <__swbuf_r+0x74>
 800b794:	68a3      	ldr	r3, [r4, #8]
 800b796:	3b01      	subs	r3, #1
 800b798:	60a3      	str	r3, [r4, #8]
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	6022      	str	r2, [r4, #0]
 800b7a0:	701e      	strb	r6, [r3, #0]
 800b7a2:	6962      	ldr	r2, [r4, #20]
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d004      	beq.n	800b7b4 <__swbuf_r+0x5a>
 800b7aa:	89a3      	ldrh	r3, [r4, #12]
 800b7ac:	07db      	lsls	r3, r3, #31
 800b7ae:	d506      	bpl.n	800b7be <__swbuf_r+0x64>
 800b7b0:	2e0a      	cmp	r6, #10
 800b7b2:	d104      	bne.n	800b7be <__swbuf_r+0x64>
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f001 f928 	bl	800ca0c <_fflush_r>
 800b7bc:	b938      	cbnz	r0, 800b7ce <__swbuf_r+0x74>
 800b7be:	4638      	mov	r0, r7
 800b7c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	4628      	mov	r0, r5
 800b7c6:	f000 f805 	bl	800b7d4 <__swsetup_r>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d0d5      	beq.n	800b77a <__swbuf_r+0x20>
 800b7ce:	f04f 37ff 	mov.w	r7, #4294967295
 800b7d2:	e7f4      	b.n	800b7be <__swbuf_r+0x64>

0800b7d4 <__swsetup_r>:
 800b7d4:	b538      	push	{r3, r4, r5, lr}
 800b7d6:	4b2a      	ldr	r3, [pc, #168]	; (800b880 <__swsetup_r+0xac>)
 800b7d8:	4605      	mov	r5, r0
 800b7da:	6818      	ldr	r0, [r3, #0]
 800b7dc:	460c      	mov	r4, r1
 800b7de:	b118      	cbz	r0, 800b7e8 <__swsetup_r+0x14>
 800b7e0:	6a03      	ldr	r3, [r0, #32]
 800b7e2:	b90b      	cbnz	r3, 800b7e8 <__swsetup_r+0x14>
 800b7e4:	f7ff fe84 	bl	800b4f0 <__sinit>
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ee:	0718      	lsls	r0, r3, #28
 800b7f0:	d422      	bmi.n	800b838 <__swsetup_r+0x64>
 800b7f2:	06d9      	lsls	r1, r3, #27
 800b7f4:	d407      	bmi.n	800b806 <__swsetup_r+0x32>
 800b7f6:	2309      	movs	r3, #9
 800b7f8:	602b      	str	r3, [r5, #0]
 800b7fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	f04f 30ff 	mov.w	r0, #4294967295
 800b804:	e034      	b.n	800b870 <__swsetup_r+0x9c>
 800b806:	0758      	lsls	r0, r3, #29
 800b808:	d512      	bpl.n	800b830 <__swsetup_r+0x5c>
 800b80a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b80c:	b141      	cbz	r1, 800b820 <__swsetup_r+0x4c>
 800b80e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b812:	4299      	cmp	r1, r3
 800b814:	d002      	beq.n	800b81c <__swsetup_r+0x48>
 800b816:	4628      	mov	r0, r5
 800b818:	f000 f8da 	bl	800b9d0 <_free_r>
 800b81c:	2300      	movs	r3, #0
 800b81e:	6363      	str	r3, [r4, #52]	; 0x34
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b826:	81a3      	strh	r3, [r4, #12]
 800b828:	2300      	movs	r3, #0
 800b82a:	6063      	str	r3, [r4, #4]
 800b82c:	6923      	ldr	r3, [r4, #16]
 800b82e:	6023      	str	r3, [r4, #0]
 800b830:	89a3      	ldrh	r3, [r4, #12]
 800b832:	f043 0308 	orr.w	r3, r3, #8
 800b836:	81a3      	strh	r3, [r4, #12]
 800b838:	6923      	ldr	r3, [r4, #16]
 800b83a:	b94b      	cbnz	r3, 800b850 <__swsetup_r+0x7c>
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b846:	d003      	beq.n	800b850 <__swsetup_r+0x7c>
 800b848:	4621      	mov	r1, r4
 800b84a:	4628      	mov	r0, r5
 800b84c:	f001 f92c 	bl	800caa8 <__smakebuf_r>
 800b850:	89a0      	ldrh	r0, [r4, #12]
 800b852:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b856:	f010 0301 	ands.w	r3, r0, #1
 800b85a:	d00a      	beq.n	800b872 <__swsetup_r+0x9e>
 800b85c:	2300      	movs	r3, #0
 800b85e:	60a3      	str	r3, [r4, #8]
 800b860:	6963      	ldr	r3, [r4, #20]
 800b862:	425b      	negs	r3, r3
 800b864:	61a3      	str	r3, [r4, #24]
 800b866:	6923      	ldr	r3, [r4, #16]
 800b868:	b943      	cbnz	r3, 800b87c <__swsetup_r+0xa8>
 800b86a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b86e:	d1c4      	bne.n	800b7fa <__swsetup_r+0x26>
 800b870:	bd38      	pop	{r3, r4, r5, pc}
 800b872:	0781      	lsls	r1, r0, #30
 800b874:	bf58      	it	pl
 800b876:	6963      	ldrpl	r3, [r4, #20]
 800b878:	60a3      	str	r3, [r4, #8]
 800b87a:	e7f4      	b.n	800b866 <__swsetup_r+0x92>
 800b87c:	2000      	movs	r0, #0
 800b87e:	e7f7      	b.n	800b870 <__swsetup_r+0x9c>
 800b880:	200001e0 	.word	0x200001e0

0800b884 <memset>:
 800b884:	4402      	add	r2, r0
 800b886:	4603      	mov	r3, r0
 800b888:	4293      	cmp	r3, r2
 800b88a:	d100      	bne.n	800b88e <memset+0xa>
 800b88c:	4770      	bx	lr
 800b88e:	f803 1b01 	strb.w	r1, [r3], #1
 800b892:	e7f9      	b.n	800b888 <memset+0x4>

0800b894 <strncmp>:
 800b894:	b510      	push	{r4, lr}
 800b896:	b16a      	cbz	r2, 800b8b4 <strncmp+0x20>
 800b898:	3901      	subs	r1, #1
 800b89a:	1884      	adds	r4, r0, r2
 800b89c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d103      	bne.n	800b8b0 <strncmp+0x1c>
 800b8a8:	42a0      	cmp	r0, r4
 800b8aa:	d001      	beq.n	800b8b0 <strncmp+0x1c>
 800b8ac:	2a00      	cmp	r2, #0
 800b8ae:	d1f5      	bne.n	800b89c <strncmp+0x8>
 800b8b0:	1ad0      	subs	r0, r2, r3
 800b8b2:	bd10      	pop	{r4, pc}
 800b8b4:	4610      	mov	r0, r2
 800b8b6:	e7fc      	b.n	800b8b2 <strncmp+0x1e>

0800b8b8 <_close_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d06      	ldr	r5, [pc, #24]	; (800b8d4 <_close_r+0x1c>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	602b      	str	r3, [r5, #0]
 800b8c4:	f7f5 fab9 	bl	8000e3a <_close>
 800b8c8:	1c43      	adds	r3, r0, #1
 800b8ca:	d102      	bne.n	800b8d2 <_close_r+0x1a>
 800b8cc:	682b      	ldr	r3, [r5, #0]
 800b8ce:	b103      	cbz	r3, 800b8d2 <_close_r+0x1a>
 800b8d0:	6023      	str	r3, [r4, #0]
 800b8d2:	bd38      	pop	{r3, r4, r5, pc}
 800b8d4:	200007e4 	.word	0x200007e4

0800b8d8 <_lseek_r>:
 800b8d8:	b538      	push	{r3, r4, r5, lr}
 800b8da:	4d07      	ldr	r5, [pc, #28]	; (800b8f8 <_lseek_r+0x20>)
 800b8dc:	4604      	mov	r4, r0
 800b8de:	4608      	mov	r0, r1
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	602a      	str	r2, [r5, #0]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f7f5 face 	bl	8000e88 <_lseek>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_lseek_r+0x1e>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_lseek_r+0x1e>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	200007e4 	.word	0x200007e4

0800b8fc <_read_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4d07      	ldr	r5, [pc, #28]	; (800b91c <_read_r+0x20>)
 800b900:	4604      	mov	r4, r0
 800b902:	4608      	mov	r0, r1
 800b904:	4611      	mov	r1, r2
 800b906:	2200      	movs	r2, #0
 800b908:	602a      	str	r2, [r5, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	f7f5 fa5c 	bl	8000dc8 <_read>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	d102      	bne.n	800b91a <_read_r+0x1e>
 800b914:	682b      	ldr	r3, [r5, #0]
 800b916:	b103      	cbz	r3, 800b91a <_read_r+0x1e>
 800b918:	6023      	str	r3, [r4, #0]
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	200007e4 	.word	0x200007e4

0800b920 <_sbrk_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d06      	ldr	r5, [pc, #24]	; (800b93c <_sbrk_r+0x1c>)
 800b924:	2300      	movs	r3, #0
 800b926:	4604      	mov	r4, r0
 800b928:	4608      	mov	r0, r1
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	f7f5 faba 	bl	8000ea4 <_sbrk>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d102      	bne.n	800b93a <_sbrk_r+0x1a>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	b103      	cbz	r3, 800b93a <_sbrk_r+0x1a>
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	bd38      	pop	{r3, r4, r5, pc}
 800b93c:	200007e4 	.word	0x200007e4

0800b940 <_write_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d07      	ldr	r5, [pc, #28]	; (800b960 <_write_r+0x20>)
 800b944:	4604      	mov	r4, r0
 800b946:	4608      	mov	r0, r1
 800b948:	4611      	mov	r1, r2
 800b94a:	2200      	movs	r2, #0
 800b94c:	602a      	str	r2, [r5, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	f7f5 fa57 	bl	8000e02 <_write>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_write_r+0x1e>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_write_r+0x1e>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	200007e4 	.word	0x200007e4

0800b964 <__errno>:
 800b964:	4b01      	ldr	r3, [pc, #4]	; (800b96c <__errno+0x8>)
 800b966:	6818      	ldr	r0, [r3, #0]
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	200001e0 	.word	0x200001e0

0800b970 <__libc_init_array>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	4d0d      	ldr	r5, [pc, #52]	; (800b9a8 <__libc_init_array+0x38>)
 800b974:	4c0d      	ldr	r4, [pc, #52]	; (800b9ac <__libc_init_array+0x3c>)
 800b976:	1b64      	subs	r4, r4, r5
 800b978:	10a4      	asrs	r4, r4, #2
 800b97a:	2600      	movs	r6, #0
 800b97c:	42a6      	cmp	r6, r4
 800b97e:	d109      	bne.n	800b994 <__libc_init_array+0x24>
 800b980:	4d0b      	ldr	r5, [pc, #44]	; (800b9b0 <__libc_init_array+0x40>)
 800b982:	4c0c      	ldr	r4, [pc, #48]	; (800b9b4 <__libc_init_array+0x44>)
 800b984:	f001 fa36 	bl	800cdf4 <_init>
 800b988:	1b64      	subs	r4, r4, r5
 800b98a:	10a4      	asrs	r4, r4, #2
 800b98c:	2600      	movs	r6, #0
 800b98e:	42a6      	cmp	r6, r4
 800b990:	d105      	bne.n	800b99e <__libc_init_array+0x2e>
 800b992:	bd70      	pop	{r4, r5, r6, pc}
 800b994:	f855 3b04 	ldr.w	r3, [r5], #4
 800b998:	4798      	blx	r3
 800b99a:	3601      	adds	r6, #1
 800b99c:	e7ee      	b.n	800b97c <__libc_init_array+0xc>
 800b99e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9a2:	4798      	blx	r3
 800b9a4:	3601      	adds	r6, #1
 800b9a6:	e7f2      	b.n	800b98e <__libc_init_array+0x1e>
 800b9a8:	0804e144 	.word	0x0804e144
 800b9ac:	0804e144 	.word	0x0804e144
 800b9b0:	0804e144 	.word	0x0804e144
 800b9b4:	0804e148 	.word	0x0804e148

0800b9b8 <__retarget_lock_init_recursive>:
 800b9b8:	4770      	bx	lr

0800b9ba <__retarget_lock_acquire_recursive>:
 800b9ba:	4770      	bx	lr

0800b9bc <__retarget_lock_release_recursive>:
 800b9bc:	4770      	bx	lr

0800b9be <strcpy>:
 800b9be:	4603      	mov	r3, r0
 800b9c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9c4:	f803 2b01 	strb.w	r2, [r3], #1
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	d1f9      	bne.n	800b9c0 <strcpy+0x2>
 800b9cc:	4770      	bx	lr
	...

0800b9d0 <_free_r>:
 800b9d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9d2:	2900      	cmp	r1, #0
 800b9d4:	d044      	beq.n	800ba60 <_free_r+0x90>
 800b9d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9da:	9001      	str	r0, [sp, #4]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f1a1 0404 	sub.w	r4, r1, #4
 800b9e2:	bfb8      	it	lt
 800b9e4:	18e4      	addlt	r4, r4, r3
 800b9e6:	f7ff fc5d 	bl	800b2a4 <__malloc_lock>
 800b9ea:	4a1e      	ldr	r2, [pc, #120]	; (800ba64 <_free_r+0x94>)
 800b9ec:	9801      	ldr	r0, [sp, #4]
 800b9ee:	6813      	ldr	r3, [r2, #0]
 800b9f0:	b933      	cbnz	r3, 800ba00 <_free_r+0x30>
 800b9f2:	6063      	str	r3, [r4, #4]
 800b9f4:	6014      	str	r4, [r2, #0]
 800b9f6:	b003      	add	sp, #12
 800b9f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9fc:	f7ff bc58 	b.w	800b2b0 <__malloc_unlock>
 800ba00:	42a3      	cmp	r3, r4
 800ba02:	d908      	bls.n	800ba16 <_free_r+0x46>
 800ba04:	6825      	ldr	r5, [r4, #0]
 800ba06:	1961      	adds	r1, r4, r5
 800ba08:	428b      	cmp	r3, r1
 800ba0a:	bf01      	itttt	eq
 800ba0c:	6819      	ldreq	r1, [r3, #0]
 800ba0e:	685b      	ldreq	r3, [r3, #4]
 800ba10:	1949      	addeq	r1, r1, r5
 800ba12:	6021      	streq	r1, [r4, #0]
 800ba14:	e7ed      	b.n	800b9f2 <_free_r+0x22>
 800ba16:	461a      	mov	r2, r3
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	b10b      	cbz	r3, 800ba20 <_free_r+0x50>
 800ba1c:	42a3      	cmp	r3, r4
 800ba1e:	d9fa      	bls.n	800ba16 <_free_r+0x46>
 800ba20:	6811      	ldr	r1, [r2, #0]
 800ba22:	1855      	adds	r5, r2, r1
 800ba24:	42a5      	cmp	r5, r4
 800ba26:	d10b      	bne.n	800ba40 <_free_r+0x70>
 800ba28:	6824      	ldr	r4, [r4, #0]
 800ba2a:	4421      	add	r1, r4
 800ba2c:	1854      	adds	r4, r2, r1
 800ba2e:	42a3      	cmp	r3, r4
 800ba30:	6011      	str	r1, [r2, #0]
 800ba32:	d1e0      	bne.n	800b9f6 <_free_r+0x26>
 800ba34:	681c      	ldr	r4, [r3, #0]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	6053      	str	r3, [r2, #4]
 800ba3a:	440c      	add	r4, r1
 800ba3c:	6014      	str	r4, [r2, #0]
 800ba3e:	e7da      	b.n	800b9f6 <_free_r+0x26>
 800ba40:	d902      	bls.n	800ba48 <_free_r+0x78>
 800ba42:	230c      	movs	r3, #12
 800ba44:	6003      	str	r3, [r0, #0]
 800ba46:	e7d6      	b.n	800b9f6 <_free_r+0x26>
 800ba48:	6825      	ldr	r5, [r4, #0]
 800ba4a:	1961      	adds	r1, r4, r5
 800ba4c:	428b      	cmp	r3, r1
 800ba4e:	bf04      	itt	eq
 800ba50:	6819      	ldreq	r1, [r3, #0]
 800ba52:	685b      	ldreq	r3, [r3, #4]
 800ba54:	6063      	str	r3, [r4, #4]
 800ba56:	bf04      	itt	eq
 800ba58:	1949      	addeq	r1, r1, r5
 800ba5a:	6021      	streq	r1, [r4, #0]
 800ba5c:	6054      	str	r4, [r2, #4]
 800ba5e:	e7ca      	b.n	800b9f6 <_free_r+0x26>
 800ba60:	b003      	add	sp, #12
 800ba62:	bd30      	pop	{r4, r5, pc}
 800ba64:	200006a0 	.word	0x200006a0

0800ba68 <__ssputs_r>:
 800ba68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba6c:	688e      	ldr	r6, [r1, #8]
 800ba6e:	461f      	mov	r7, r3
 800ba70:	42be      	cmp	r6, r7
 800ba72:	680b      	ldr	r3, [r1, #0]
 800ba74:	4682      	mov	sl, r0
 800ba76:	460c      	mov	r4, r1
 800ba78:	4690      	mov	r8, r2
 800ba7a:	d82c      	bhi.n	800bad6 <__ssputs_r+0x6e>
 800ba7c:	898a      	ldrh	r2, [r1, #12]
 800ba7e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba82:	d026      	beq.n	800bad2 <__ssputs_r+0x6a>
 800ba84:	6965      	ldr	r5, [r4, #20]
 800ba86:	6909      	ldr	r1, [r1, #16]
 800ba88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba8c:	eba3 0901 	sub.w	r9, r3, r1
 800ba90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba94:	1c7b      	adds	r3, r7, #1
 800ba96:	444b      	add	r3, r9
 800ba98:	106d      	asrs	r5, r5, #1
 800ba9a:	429d      	cmp	r5, r3
 800ba9c:	bf38      	it	cc
 800ba9e:	461d      	movcc	r5, r3
 800baa0:	0553      	lsls	r3, r2, #21
 800baa2:	d527      	bpl.n	800baf4 <__ssputs_r+0x8c>
 800baa4:	4629      	mov	r1, r5
 800baa6:	f7ff fb7d 	bl	800b1a4 <_malloc_r>
 800baaa:	4606      	mov	r6, r0
 800baac:	b360      	cbz	r0, 800bb08 <__ssputs_r+0xa0>
 800baae:	6921      	ldr	r1, [r4, #16]
 800bab0:	464a      	mov	r2, r9
 800bab2:	f001 f8e5 	bl	800cc80 <memcpy>
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800babc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac0:	81a3      	strh	r3, [r4, #12]
 800bac2:	6126      	str	r6, [r4, #16]
 800bac4:	6165      	str	r5, [r4, #20]
 800bac6:	444e      	add	r6, r9
 800bac8:	eba5 0509 	sub.w	r5, r5, r9
 800bacc:	6026      	str	r6, [r4, #0]
 800bace:	60a5      	str	r5, [r4, #8]
 800bad0:	463e      	mov	r6, r7
 800bad2:	42be      	cmp	r6, r7
 800bad4:	d900      	bls.n	800bad8 <__ssputs_r+0x70>
 800bad6:	463e      	mov	r6, r7
 800bad8:	6820      	ldr	r0, [r4, #0]
 800bada:	4632      	mov	r2, r6
 800badc:	4641      	mov	r1, r8
 800bade:	f001 f892 	bl	800cc06 <memmove>
 800bae2:	68a3      	ldr	r3, [r4, #8]
 800bae4:	1b9b      	subs	r3, r3, r6
 800bae6:	60a3      	str	r3, [r4, #8]
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	4433      	add	r3, r6
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	2000      	movs	r0, #0
 800baf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf4:	462a      	mov	r2, r5
 800baf6:	f001 f8d1 	bl	800cc9c <_realloc_r>
 800bafa:	4606      	mov	r6, r0
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d1e0      	bne.n	800bac2 <__ssputs_r+0x5a>
 800bb00:	6921      	ldr	r1, [r4, #16]
 800bb02:	4650      	mov	r0, sl
 800bb04:	f7ff ff64 	bl	800b9d0 <_free_r>
 800bb08:	230c      	movs	r3, #12
 800bb0a:	f8ca 3000 	str.w	r3, [sl]
 800bb0e:	89a3      	ldrh	r3, [r4, #12]
 800bb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb14:	81a3      	strh	r3, [r4, #12]
 800bb16:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1a:	e7e9      	b.n	800baf0 <__ssputs_r+0x88>

0800bb1c <_svfiprintf_r>:
 800bb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	4698      	mov	r8, r3
 800bb22:	898b      	ldrh	r3, [r1, #12]
 800bb24:	061b      	lsls	r3, r3, #24
 800bb26:	b09d      	sub	sp, #116	; 0x74
 800bb28:	4607      	mov	r7, r0
 800bb2a:	460d      	mov	r5, r1
 800bb2c:	4614      	mov	r4, r2
 800bb2e:	d50e      	bpl.n	800bb4e <_svfiprintf_r+0x32>
 800bb30:	690b      	ldr	r3, [r1, #16]
 800bb32:	b963      	cbnz	r3, 800bb4e <_svfiprintf_r+0x32>
 800bb34:	2140      	movs	r1, #64	; 0x40
 800bb36:	f7ff fb35 	bl	800b1a4 <_malloc_r>
 800bb3a:	6028      	str	r0, [r5, #0]
 800bb3c:	6128      	str	r0, [r5, #16]
 800bb3e:	b920      	cbnz	r0, 800bb4a <_svfiprintf_r+0x2e>
 800bb40:	230c      	movs	r3, #12
 800bb42:	603b      	str	r3, [r7, #0]
 800bb44:	f04f 30ff 	mov.w	r0, #4294967295
 800bb48:	e0d0      	b.n	800bcec <_svfiprintf_r+0x1d0>
 800bb4a:	2340      	movs	r3, #64	; 0x40
 800bb4c:	616b      	str	r3, [r5, #20]
 800bb4e:	2300      	movs	r3, #0
 800bb50:	9309      	str	r3, [sp, #36]	; 0x24
 800bb52:	2320      	movs	r3, #32
 800bb54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb58:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb5c:	2330      	movs	r3, #48	; 0x30
 800bb5e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd04 <_svfiprintf_r+0x1e8>
 800bb62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb66:	f04f 0901 	mov.w	r9, #1
 800bb6a:	4623      	mov	r3, r4
 800bb6c:	469a      	mov	sl, r3
 800bb6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb72:	b10a      	cbz	r2, 800bb78 <_svfiprintf_r+0x5c>
 800bb74:	2a25      	cmp	r2, #37	; 0x25
 800bb76:	d1f9      	bne.n	800bb6c <_svfiprintf_r+0x50>
 800bb78:	ebba 0b04 	subs.w	fp, sl, r4
 800bb7c:	d00b      	beq.n	800bb96 <_svfiprintf_r+0x7a>
 800bb7e:	465b      	mov	r3, fp
 800bb80:	4622      	mov	r2, r4
 800bb82:	4629      	mov	r1, r5
 800bb84:	4638      	mov	r0, r7
 800bb86:	f7ff ff6f 	bl	800ba68 <__ssputs_r>
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	f000 80a9 	beq.w	800bce2 <_svfiprintf_r+0x1c6>
 800bb90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb92:	445a      	add	r2, fp
 800bb94:	9209      	str	r2, [sp, #36]	; 0x24
 800bb96:	f89a 3000 	ldrb.w	r3, [sl]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	f000 80a1 	beq.w	800bce2 <_svfiprintf_r+0x1c6>
 800bba0:	2300      	movs	r3, #0
 800bba2:	f04f 32ff 	mov.w	r2, #4294967295
 800bba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbaa:	f10a 0a01 	add.w	sl, sl, #1
 800bbae:	9304      	str	r3, [sp, #16]
 800bbb0:	9307      	str	r3, [sp, #28]
 800bbb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbb6:	931a      	str	r3, [sp, #104]	; 0x68
 800bbb8:	4654      	mov	r4, sl
 800bbba:	2205      	movs	r2, #5
 800bbbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc0:	4850      	ldr	r0, [pc, #320]	; (800bd04 <_svfiprintf_r+0x1e8>)
 800bbc2:	f7f4 fb0d 	bl	80001e0 <memchr>
 800bbc6:	9a04      	ldr	r2, [sp, #16]
 800bbc8:	b9d8      	cbnz	r0, 800bc02 <_svfiprintf_r+0xe6>
 800bbca:	06d0      	lsls	r0, r2, #27
 800bbcc:	bf44      	itt	mi
 800bbce:	2320      	movmi	r3, #32
 800bbd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbd4:	0711      	lsls	r1, r2, #28
 800bbd6:	bf44      	itt	mi
 800bbd8:	232b      	movmi	r3, #43	; 0x2b
 800bbda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbde:	f89a 3000 	ldrb.w	r3, [sl]
 800bbe2:	2b2a      	cmp	r3, #42	; 0x2a
 800bbe4:	d015      	beq.n	800bc12 <_svfiprintf_r+0xf6>
 800bbe6:	9a07      	ldr	r2, [sp, #28]
 800bbe8:	4654      	mov	r4, sl
 800bbea:	2000      	movs	r0, #0
 800bbec:	f04f 0c0a 	mov.w	ip, #10
 800bbf0:	4621      	mov	r1, r4
 800bbf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbf6:	3b30      	subs	r3, #48	; 0x30
 800bbf8:	2b09      	cmp	r3, #9
 800bbfa:	d94d      	bls.n	800bc98 <_svfiprintf_r+0x17c>
 800bbfc:	b1b0      	cbz	r0, 800bc2c <_svfiprintf_r+0x110>
 800bbfe:	9207      	str	r2, [sp, #28]
 800bc00:	e014      	b.n	800bc2c <_svfiprintf_r+0x110>
 800bc02:	eba0 0308 	sub.w	r3, r0, r8
 800bc06:	fa09 f303 	lsl.w	r3, r9, r3
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	46a2      	mov	sl, r4
 800bc10:	e7d2      	b.n	800bbb8 <_svfiprintf_r+0x9c>
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	1d19      	adds	r1, r3, #4
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	9103      	str	r1, [sp, #12]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	bfbb      	ittet	lt
 800bc1e:	425b      	neglt	r3, r3
 800bc20:	f042 0202 	orrlt.w	r2, r2, #2
 800bc24:	9307      	strge	r3, [sp, #28]
 800bc26:	9307      	strlt	r3, [sp, #28]
 800bc28:	bfb8      	it	lt
 800bc2a:	9204      	strlt	r2, [sp, #16]
 800bc2c:	7823      	ldrb	r3, [r4, #0]
 800bc2e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc30:	d10c      	bne.n	800bc4c <_svfiprintf_r+0x130>
 800bc32:	7863      	ldrb	r3, [r4, #1]
 800bc34:	2b2a      	cmp	r3, #42	; 0x2a
 800bc36:	d134      	bne.n	800bca2 <_svfiprintf_r+0x186>
 800bc38:	9b03      	ldr	r3, [sp, #12]
 800bc3a:	1d1a      	adds	r2, r3, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	9203      	str	r2, [sp, #12]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bfb8      	it	lt
 800bc44:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc48:	3402      	adds	r4, #2
 800bc4a:	9305      	str	r3, [sp, #20]
 800bc4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd14 <_svfiprintf_r+0x1f8>
 800bc50:	7821      	ldrb	r1, [r4, #0]
 800bc52:	2203      	movs	r2, #3
 800bc54:	4650      	mov	r0, sl
 800bc56:	f7f4 fac3 	bl	80001e0 <memchr>
 800bc5a:	b138      	cbz	r0, 800bc6c <_svfiprintf_r+0x150>
 800bc5c:	9b04      	ldr	r3, [sp, #16]
 800bc5e:	eba0 000a 	sub.w	r0, r0, sl
 800bc62:	2240      	movs	r2, #64	; 0x40
 800bc64:	4082      	lsls	r2, r0
 800bc66:	4313      	orrs	r3, r2
 800bc68:	3401      	adds	r4, #1
 800bc6a:	9304      	str	r3, [sp, #16]
 800bc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc70:	4825      	ldr	r0, [pc, #148]	; (800bd08 <_svfiprintf_r+0x1ec>)
 800bc72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc76:	2206      	movs	r2, #6
 800bc78:	f7f4 fab2 	bl	80001e0 <memchr>
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	d038      	beq.n	800bcf2 <_svfiprintf_r+0x1d6>
 800bc80:	4b22      	ldr	r3, [pc, #136]	; (800bd0c <_svfiprintf_r+0x1f0>)
 800bc82:	bb1b      	cbnz	r3, 800bccc <_svfiprintf_r+0x1b0>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	3307      	adds	r3, #7
 800bc88:	f023 0307 	bic.w	r3, r3, #7
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	9303      	str	r3, [sp, #12]
 800bc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc92:	4433      	add	r3, r6
 800bc94:	9309      	str	r3, [sp, #36]	; 0x24
 800bc96:	e768      	b.n	800bb6a <_svfiprintf_r+0x4e>
 800bc98:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	2001      	movs	r0, #1
 800bca0:	e7a6      	b.n	800bbf0 <_svfiprintf_r+0xd4>
 800bca2:	2300      	movs	r3, #0
 800bca4:	3401      	adds	r4, #1
 800bca6:	9305      	str	r3, [sp, #20]
 800bca8:	4619      	mov	r1, r3
 800bcaa:	f04f 0c0a 	mov.w	ip, #10
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcb4:	3a30      	subs	r2, #48	; 0x30
 800bcb6:	2a09      	cmp	r2, #9
 800bcb8:	d903      	bls.n	800bcc2 <_svfiprintf_r+0x1a6>
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d0c6      	beq.n	800bc4c <_svfiprintf_r+0x130>
 800bcbe:	9105      	str	r1, [sp, #20]
 800bcc0:	e7c4      	b.n	800bc4c <_svfiprintf_r+0x130>
 800bcc2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e7f0      	b.n	800bcae <_svfiprintf_r+0x192>
 800bccc:	ab03      	add	r3, sp, #12
 800bcce:	9300      	str	r3, [sp, #0]
 800bcd0:	462a      	mov	r2, r5
 800bcd2:	4b0f      	ldr	r3, [pc, #60]	; (800bd10 <_svfiprintf_r+0x1f4>)
 800bcd4:	a904      	add	r1, sp, #16
 800bcd6:	4638      	mov	r0, r7
 800bcd8:	f3af 8000 	nop.w
 800bcdc:	1c42      	adds	r2, r0, #1
 800bcde:	4606      	mov	r6, r0
 800bce0:	d1d6      	bne.n	800bc90 <_svfiprintf_r+0x174>
 800bce2:	89ab      	ldrh	r3, [r5, #12]
 800bce4:	065b      	lsls	r3, r3, #25
 800bce6:	f53f af2d 	bmi.w	800bb44 <_svfiprintf_r+0x28>
 800bcea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcec:	b01d      	add	sp, #116	; 0x74
 800bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf2:	ab03      	add	r3, sp, #12
 800bcf4:	9300      	str	r3, [sp, #0]
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	4b05      	ldr	r3, [pc, #20]	; (800bd10 <_svfiprintf_r+0x1f4>)
 800bcfa:	a904      	add	r1, sp, #16
 800bcfc:	4638      	mov	r0, r7
 800bcfe:	f000 fb8f 	bl	800c420 <_printf_i>
 800bd02:	e7eb      	b.n	800bcdc <_svfiprintf_r+0x1c0>
 800bd04:	0804e0f3 	.word	0x0804e0f3
 800bd08:	0804e0fd 	.word	0x0804e0fd
 800bd0c:	00000000 	.word	0x00000000
 800bd10:	0800ba69 	.word	0x0800ba69
 800bd14:	0804e0f9 	.word	0x0804e0f9

0800bd18 <_sungetc_r>:
 800bd18:	b538      	push	{r3, r4, r5, lr}
 800bd1a:	1c4b      	adds	r3, r1, #1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	d103      	bne.n	800bd28 <_sungetc_r+0x10>
 800bd20:	f04f 35ff 	mov.w	r5, #4294967295
 800bd24:	4628      	mov	r0, r5
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	8993      	ldrh	r3, [r2, #12]
 800bd2a:	f023 0320 	bic.w	r3, r3, #32
 800bd2e:	8193      	strh	r3, [r2, #12]
 800bd30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd32:	6852      	ldr	r2, [r2, #4]
 800bd34:	b2cd      	uxtb	r5, r1
 800bd36:	b18b      	cbz	r3, 800bd5c <_sungetc_r+0x44>
 800bd38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	dd08      	ble.n	800bd50 <_sungetc_r+0x38>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	1e5a      	subs	r2, r3, #1
 800bd42:	6022      	str	r2, [r4, #0]
 800bd44:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd48:	6863      	ldr	r3, [r4, #4]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	6063      	str	r3, [r4, #4]
 800bd4e:	e7e9      	b.n	800bd24 <_sungetc_r+0xc>
 800bd50:	4621      	mov	r1, r4
 800bd52:	f000 ff1e 	bl	800cb92 <__submore>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	d0f1      	beq.n	800bd3e <_sungetc_r+0x26>
 800bd5a:	e7e1      	b.n	800bd20 <_sungetc_r+0x8>
 800bd5c:	6921      	ldr	r1, [r4, #16]
 800bd5e:	6823      	ldr	r3, [r4, #0]
 800bd60:	b151      	cbz	r1, 800bd78 <_sungetc_r+0x60>
 800bd62:	4299      	cmp	r1, r3
 800bd64:	d208      	bcs.n	800bd78 <_sungetc_r+0x60>
 800bd66:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bd6a:	42a9      	cmp	r1, r5
 800bd6c:	d104      	bne.n	800bd78 <_sungetc_r+0x60>
 800bd6e:	3b01      	subs	r3, #1
 800bd70:	3201      	adds	r2, #1
 800bd72:	6023      	str	r3, [r4, #0]
 800bd74:	6062      	str	r2, [r4, #4]
 800bd76:	e7d5      	b.n	800bd24 <_sungetc_r+0xc>
 800bd78:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd80:	6363      	str	r3, [r4, #52]	; 0x34
 800bd82:	2303      	movs	r3, #3
 800bd84:	63a3      	str	r3, [r4, #56]	; 0x38
 800bd86:	4623      	mov	r3, r4
 800bd88:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e7dc      	b.n	800bd4c <_sungetc_r+0x34>

0800bd92 <__ssrefill_r>:
 800bd92:	b510      	push	{r4, lr}
 800bd94:	460c      	mov	r4, r1
 800bd96:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bd98:	b169      	cbz	r1, 800bdb6 <__ssrefill_r+0x24>
 800bd9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd9e:	4299      	cmp	r1, r3
 800bda0:	d001      	beq.n	800bda6 <__ssrefill_r+0x14>
 800bda2:	f7ff fe15 	bl	800b9d0 <_free_r>
 800bda6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bda8:	6063      	str	r3, [r4, #4]
 800bdaa:	2000      	movs	r0, #0
 800bdac:	6360      	str	r0, [r4, #52]	; 0x34
 800bdae:	b113      	cbz	r3, 800bdb6 <__ssrefill_r+0x24>
 800bdb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	bd10      	pop	{r4, pc}
 800bdb6:	6923      	ldr	r3, [r4, #16]
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	2300      	movs	r3, #0
 800bdbc:	6063      	str	r3, [r4, #4]
 800bdbe:	89a3      	ldrh	r3, [r4, #12]
 800bdc0:	f043 0320 	orr.w	r3, r3, #32
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdca:	e7f3      	b.n	800bdb4 <__ssrefill_r+0x22>

0800bdcc <__ssvfiscanf_r>:
 800bdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd0:	460c      	mov	r4, r1
 800bdd2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bddc:	49a6      	ldr	r1, [pc, #664]	; (800c078 <__ssvfiscanf_r+0x2ac>)
 800bdde:	91a0      	str	r1, [sp, #640]	; 0x280
 800bde0:	f10d 0804 	add.w	r8, sp, #4
 800bde4:	49a5      	ldr	r1, [pc, #660]	; (800c07c <__ssvfiscanf_r+0x2b0>)
 800bde6:	4fa6      	ldr	r7, [pc, #664]	; (800c080 <__ssvfiscanf_r+0x2b4>)
 800bde8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c084 <__ssvfiscanf_r+0x2b8>
 800bdec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	91a1      	str	r1, [sp, #644]	; 0x284
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	7813      	ldrb	r3, [r2, #0]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	f000 815a 	beq.w	800c0b2 <__ssvfiscanf_r+0x2e6>
 800bdfe:	5cf9      	ldrb	r1, [r7, r3]
 800be00:	f011 0108 	ands.w	r1, r1, #8
 800be04:	f102 0501 	add.w	r5, r2, #1
 800be08:	d019      	beq.n	800be3e <__ssvfiscanf_r+0x72>
 800be0a:	6863      	ldr	r3, [r4, #4]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd0f      	ble.n	800be30 <__ssvfiscanf_r+0x64>
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	781a      	ldrb	r2, [r3, #0]
 800be14:	5cba      	ldrb	r2, [r7, r2]
 800be16:	0712      	lsls	r2, r2, #28
 800be18:	d401      	bmi.n	800be1e <__ssvfiscanf_r+0x52>
 800be1a:	462a      	mov	r2, r5
 800be1c:	e7eb      	b.n	800bdf6 <__ssvfiscanf_r+0x2a>
 800be1e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800be20:	3201      	adds	r2, #1
 800be22:	9245      	str	r2, [sp, #276]	; 0x114
 800be24:	6862      	ldr	r2, [r4, #4]
 800be26:	3301      	adds	r3, #1
 800be28:	3a01      	subs	r2, #1
 800be2a:	6062      	str	r2, [r4, #4]
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	e7ec      	b.n	800be0a <__ssvfiscanf_r+0x3e>
 800be30:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be32:	4621      	mov	r1, r4
 800be34:	4630      	mov	r0, r6
 800be36:	4798      	blx	r3
 800be38:	2800      	cmp	r0, #0
 800be3a:	d0e9      	beq.n	800be10 <__ssvfiscanf_r+0x44>
 800be3c:	e7ed      	b.n	800be1a <__ssvfiscanf_r+0x4e>
 800be3e:	2b25      	cmp	r3, #37	; 0x25
 800be40:	d012      	beq.n	800be68 <__ssvfiscanf_r+0x9c>
 800be42:	469a      	mov	sl, r3
 800be44:	6863      	ldr	r3, [r4, #4]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f340 8091 	ble.w	800bf6e <__ssvfiscanf_r+0x1a2>
 800be4c:	6822      	ldr	r2, [r4, #0]
 800be4e:	7813      	ldrb	r3, [r2, #0]
 800be50:	4553      	cmp	r3, sl
 800be52:	f040 812e 	bne.w	800c0b2 <__ssvfiscanf_r+0x2e6>
 800be56:	6863      	ldr	r3, [r4, #4]
 800be58:	3b01      	subs	r3, #1
 800be5a:	6063      	str	r3, [r4, #4]
 800be5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800be5e:	3201      	adds	r2, #1
 800be60:	3301      	adds	r3, #1
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	9345      	str	r3, [sp, #276]	; 0x114
 800be66:	e7d8      	b.n	800be1a <__ssvfiscanf_r+0x4e>
 800be68:	9141      	str	r1, [sp, #260]	; 0x104
 800be6a:	9143      	str	r1, [sp, #268]	; 0x10c
 800be6c:	7853      	ldrb	r3, [r2, #1]
 800be6e:	2b2a      	cmp	r3, #42	; 0x2a
 800be70:	bf02      	ittt	eq
 800be72:	2310      	moveq	r3, #16
 800be74:	1c95      	addeq	r5, r2, #2
 800be76:	9341      	streq	r3, [sp, #260]	; 0x104
 800be78:	220a      	movs	r2, #10
 800be7a:	46aa      	mov	sl, r5
 800be7c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800be80:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800be84:	2b09      	cmp	r3, #9
 800be86:	d91c      	bls.n	800bec2 <__ssvfiscanf_r+0xf6>
 800be88:	487e      	ldr	r0, [pc, #504]	; (800c084 <__ssvfiscanf_r+0x2b8>)
 800be8a:	2203      	movs	r2, #3
 800be8c:	f7f4 f9a8 	bl	80001e0 <memchr>
 800be90:	b138      	cbz	r0, 800bea2 <__ssvfiscanf_r+0xd6>
 800be92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800be94:	eba0 0009 	sub.w	r0, r0, r9
 800be98:	2301      	movs	r3, #1
 800be9a:	4083      	lsls	r3, r0
 800be9c:	4313      	orrs	r3, r2
 800be9e:	9341      	str	r3, [sp, #260]	; 0x104
 800bea0:	4655      	mov	r5, sl
 800bea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bea6:	2b78      	cmp	r3, #120	; 0x78
 800bea8:	d806      	bhi.n	800beb8 <__ssvfiscanf_r+0xec>
 800beaa:	2b57      	cmp	r3, #87	; 0x57
 800beac:	d810      	bhi.n	800bed0 <__ssvfiscanf_r+0x104>
 800beae:	2b25      	cmp	r3, #37	; 0x25
 800beb0:	d0c7      	beq.n	800be42 <__ssvfiscanf_r+0x76>
 800beb2:	d857      	bhi.n	800bf64 <__ssvfiscanf_r+0x198>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d065      	beq.n	800bf84 <__ssvfiscanf_r+0x1b8>
 800beb8:	2303      	movs	r3, #3
 800beba:	9347      	str	r3, [sp, #284]	; 0x11c
 800bebc:	230a      	movs	r3, #10
 800bebe:	9342      	str	r3, [sp, #264]	; 0x108
 800bec0:	e076      	b.n	800bfb0 <__ssvfiscanf_r+0x1e4>
 800bec2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bec4:	fb02 1103 	mla	r1, r2, r3, r1
 800bec8:	3930      	subs	r1, #48	; 0x30
 800beca:	9143      	str	r1, [sp, #268]	; 0x10c
 800becc:	4655      	mov	r5, sl
 800bece:	e7d4      	b.n	800be7a <__ssvfiscanf_r+0xae>
 800bed0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bed4:	2a20      	cmp	r2, #32
 800bed6:	d8ef      	bhi.n	800beb8 <__ssvfiscanf_r+0xec>
 800bed8:	a101      	add	r1, pc, #4	; (adr r1, 800bee0 <__ssvfiscanf_r+0x114>)
 800beda:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bede:	bf00      	nop
 800bee0:	0800bf93 	.word	0x0800bf93
 800bee4:	0800beb9 	.word	0x0800beb9
 800bee8:	0800beb9 	.word	0x0800beb9
 800beec:	0800bff1 	.word	0x0800bff1
 800bef0:	0800beb9 	.word	0x0800beb9
 800bef4:	0800beb9 	.word	0x0800beb9
 800bef8:	0800beb9 	.word	0x0800beb9
 800befc:	0800beb9 	.word	0x0800beb9
 800bf00:	0800beb9 	.word	0x0800beb9
 800bf04:	0800beb9 	.word	0x0800beb9
 800bf08:	0800beb9 	.word	0x0800beb9
 800bf0c:	0800c007 	.word	0x0800c007
 800bf10:	0800bfed 	.word	0x0800bfed
 800bf14:	0800bf6b 	.word	0x0800bf6b
 800bf18:	0800bf6b 	.word	0x0800bf6b
 800bf1c:	0800bf6b 	.word	0x0800bf6b
 800bf20:	0800beb9 	.word	0x0800beb9
 800bf24:	0800bfa9 	.word	0x0800bfa9
 800bf28:	0800beb9 	.word	0x0800beb9
 800bf2c:	0800beb9 	.word	0x0800beb9
 800bf30:	0800beb9 	.word	0x0800beb9
 800bf34:	0800beb9 	.word	0x0800beb9
 800bf38:	0800c017 	.word	0x0800c017
 800bf3c:	0800bfe5 	.word	0x0800bfe5
 800bf40:	0800bf8b 	.word	0x0800bf8b
 800bf44:	0800beb9 	.word	0x0800beb9
 800bf48:	0800beb9 	.word	0x0800beb9
 800bf4c:	0800c013 	.word	0x0800c013
 800bf50:	0800beb9 	.word	0x0800beb9
 800bf54:	0800bfed 	.word	0x0800bfed
 800bf58:	0800beb9 	.word	0x0800beb9
 800bf5c:	0800beb9 	.word	0x0800beb9
 800bf60:	0800bf93 	.word	0x0800bf93
 800bf64:	3b45      	subs	r3, #69	; 0x45
 800bf66:	2b02      	cmp	r3, #2
 800bf68:	d8a6      	bhi.n	800beb8 <__ssvfiscanf_r+0xec>
 800bf6a:	2305      	movs	r3, #5
 800bf6c:	e01f      	b.n	800bfae <__ssvfiscanf_r+0x1e2>
 800bf6e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf70:	4621      	mov	r1, r4
 800bf72:	4630      	mov	r0, r6
 800bf74:	4798      	blx	r3
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f43f af68 	beq.w	800be4c <__ssvfiscanf_r+0x80>
 800bf7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	f040 808d 	bne.w	800c09e <__ssvfiscanf_r+0x2d2>
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295
 800bf88:	e08f      	b.n	800c0aa <__ssvfiscanf_r+0x2de>
 800bf8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf8c:	f042 0220 	orr.w	r2, r2, #32
 800bf90:	9241      	str	r2, [sp, #260]	; 0x104
 800bf92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf98:	9241      	str	r2, [sp, #260]	; 0x104
 800bf9a:	2210      	movs	r2, #16
 800bf9c:	2b6f      	cmp	r3, #111	; 0x6f
 800bf9e:	9242      	str	r2, [sp, #264]	; 0x108
 800bfa0:	bf34      	ite	cc
 800bfa2:	2303      	movcc	r3, #3
 800bfa4:	2304      	movcs	r3, #4
 800bfa6:	e002      	b.n	800bfae <__ssvfiscanf_r+0x1e2>
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	9342      	str	r3, [sp, #264]	; 0x108
 800bfac:	2303      	movs	r3, #3
 800bfae:	9347      	str	r3, [sp, #284]	; 0x11c
 800bfb0:	6863      	ldr	r3, [r4, #4]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	dd3d      	ble.n	800c032 <__ssvfiscanf_r+0x266>
 800bfb6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bfb8:	0659      	lsls	r1, r3, #25
 800bfba:	d404      	bmi.n	800bfc6 <__ssvfiscanf_r+0x1fa>
 800bfbc:	6823      	ldr	r3, [r4, #0]
 800bfbe:	781a      	ldrb	r2, [r3, #0]
 800bfc0:	5cba      	ldrb	r2, [r7, r2]
 800bfc2:	0712      	lsls	r2, r2, #28
 800bfc4:	d43c      	bmi.n	800c040 <__ssvfiscanf_r+0x274>
 800bfc6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	dc4b      	bgt.n	800c064 <__ssvfiscanf_r+0x298>
 800bfcc:	466b      	mov	r3, sp
 800bfce:	4622      	mov	r2, r4
 800bfd0:	a941      	add	r1, sp, #260	; 0x104
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f000 fb46 	bl	800c664 <_scanf_chars>
 800bfd8:	2801      	cmp	r0, #1
 800bfda:	d06a      	beq.n	800c0b2 <__ssvfiscanf_r+0x2e6>
 800bfdc:	2802      	cmp	r0, #2
 800bfde:	f47f af1c 	bne.w	800be1a <__ssvfiscanf_r+0x4e>
 800bfe2:	e7cb      	b.n	800bf7c <__ssvfiscanf_r+0x1b0>
 800bfe4:	2308      	movs	r3, #8
 800bfe6:	9342      	str	r3, [sp, #264]	; 0x108
 800bfe8:	2304      	movs	r3, #4
 800bfea:	e7e0      	b.n	800bfae <__ssvfiscanf_r+0x1e2>
 800bfec:	220a      	movs	r2, #10
 800bfee:	e7d5      	b.n	800bf9c <__ssvfiscanf_r+0x1d0>
 800bff0:	4629      	mov	r1, r5
 800bff2:	4640      	mov	r0, r8
 800bff4:	f000 fd94 	bl	800cb20 <__sccl>
 800bff8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bffe:	9341      	str	r3, [sp, #260]	; 0x104
 800c000:	4605      	mov	r5, r0
 800c002:	2301      	movs	r3, #1
 800c004:	e7d3      	b.n	800bfae <__ssvfiscanf_r+0x1e2>
 800c006:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c00c:	9341      	str	r3, [sp, #260]	; 0x104
 800c00e:	2300      	movs	r3, #0
 800c010:	e7cd      	b.n	800bfae <__ssvfiscanf_r+0x1e2>
 800c012:	2302      	movs	r3, #2
 800c014:	e7cb      	b.n	800bfae <__ssvfiscanf_r+0x1e2>
 800c016:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c018:	06c3      	lsls	r3, r0, #27
 800c01a:	f53f aefe 	bmi.w	800be1a <__ssvfiscanf_r+0x4e>
 800c01e:	9b00      	ldr	r3, [sp, #0]
 800c020:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c022:	1d19      	adds	r1, r3, #4
 800c024:	9100      	str	r1, [sp, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	07c0      	lsls	r0, r0, #31
 800c02a:	bf4c      	ite	mi
 800c02c:	801a      	strhmi	r2, [r3, #0]
 800c02e:	601a      	strpl	r2, [r3, #0]
 800c030:	e6f3      	b.n	800be1a <__ssvfiscanf_r+0x4e>
 800c032:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c034:	4621      	mov	r1, r4
 800c036:	4630      	mov	r0, r6
 800c038:	4798      	blx	r3
 800c03a:	2800      	cmp	r0, #0
 800c03c:	d0bb      	beq.n	800bfb6 <__ssvfiscanf_r+0x1ea>
 800c03e:	e79d      	b.n	800bf7c <__ssvfiscanf_r+0x1b0>
 800c040:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c042:	3201      	adds	r2, #1
 800c044:	9245      	str	r2, [sp, #276]	; 0x114
 800c046:	6862      	ldr	r2, [r4, #4]
 800c048:	3a01      	subs	r2, #1
 800c04a:	2a00      	cmp	r2, #0
 800c04c:	6062      	str	r2, [r4, #4]
 800c04e:	dd02      	ble.n	800c056 <__ssvfiscanf_r+0x28a>
 800c050:	3301      	adds	r3, #1
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	e7b2      	b.n	800bfbc <__ssvfiscanf_r+0x1f0>
 800c056:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c058:	4621      	mov	r1, r4
 800c05a:	4630      	mov	r0, r6
 800c05c:	4798      	blx	r3
 800c05e:	2800      	cmp	r0, #0
 800c060:	d0ac      	beq.n	800bfbc <__ssvfiscanf_r+0x1f0>
 800c062:	e78b      	b.n	800bf7c <__ssvfiscanf_r+0x1b0>
 800c064:	2b04      	cmp	r3, #4
 800c066:	dc0f      	bgt.n	800c088 <__ssvfiscanf_r+0x2bc>
 800c068:	466b      	mov	r3, sp
 800c06a:	4622      	mov	r2, r4
 800c06c:	a941      	add	r1, sp, #260	; 0x104
 800c06e:	4630      	mov	r0, r6
 800c070:	f000 fb52 	bl	800c718 <_scanf_i>
 800c074:	e7b0      	b.n	800bfd8 <__ssvfiscanf_r+0x20c>
 800c076:	bf00      	nop
 800c078:	0800bd19 	.word	0x0800bd19
 800c07c:	0800bd93 	.word	0x0800bd93
 800c080:	0804dff3 	.word	0x0804dff3
 800c084:	0804e0f9 	.word	0x0804e0f9
 800c088:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <__ssvfiscanf_r+0x2ec>)
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f43f aec5 	beq.w	800be1a <__ssvfiscanf_r+0x4e>
 800c090:	466b      	mov	r3, sp
 800c092:	4622      	mov	r2, r4
 800c094:	a941      	add	r1, sp, #260	; 0x104
 800c096:	4630      	mov	r0, r6
 800c098:	f3af 8000 	nop.w
 800c09c:	e79c      	b.n	800bfd8 <__ssvfiscanf_r+0x20c>
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c0a4:	bf18      	it	ne
 800c0a6:	f04f 30ff 	movne.w	r0, #4294967295
 800c0aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c0b4:	e7f9      	b.n	800c0aa <__ssvfiscanf_r+0x2de>
 800c0b6:	bf00      	nop
 800c0b8:	00000000 	.word	0x00000000

0800c0bc <__sfputc_r>:
 800c0bc:	6893      	ldr	r3, [r2, #8]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	b410      	push	{r4}
 800c0c4:	6093      	str	r3, [r2, #8]
 800c0c6:	da08      	bge.n	800c0da <__sfputc_r+0x1e>
 800c0c8:	6994      	ldr	r4, [r2, #24]
 800c0ca:	42a3      	cmp	r3, r4
 800c0cc:	db01      	blt.n	800c0d2 <__sfputc_r+0x16>
 800c0ce:	290a      	cmp	r1, #10
 800c0d0:	d103      	bne.n	800c0da <__sfputc_r+0x1e>
 800c0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0d6:	f7ff bb40 	b.w	800b75a <__swbuf_r>
 800c0da:	6813      	ldr	r3, [r2, #0]
 800c0dc:	1c58      	adds	r0, r3, #1
 800c0de:	6010      	str	r0, [r2, #0]
 800c0e0:	7019      	strb	r1, [r3, #0]
 800c0e2:	4608      	mov	r0, r1
 800c0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <__sfputs_r>:
 800c0ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	4614      	mov	r4, r2
 800c0f2:	18d5      	adds	r5, r2, r3
 800c0f4:	42ac      	cmp	r4, r5
 800c0f6:	d101      	bne.n	800c0fc <__sfputs_r+0x12>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e007      	b.n	800c10c <__sfputs_r+0x22>
 800c0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c100:	463a      	mov	r2, r7
 800c102:	4630      	mov	r0, r6
 800c104:	f7ff ffda 	bl	800c0bc <__sfputc_r>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d1f3      	bne.n	800c0f4 <__sfputs_r+0xa>
 800c10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c110 <_vfiprintf_r>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	460d      	mov	r5, r1
 800c116:	b09d      	sub	sp, #116	; 0x74
 800c118:	4614      	mov	r4, r2
 800c11a:	4698      	mov	r8, r3
 800c11c:	4606      	mov	r6, r0
 800c11e:	b118      	cbz	r0, 800c128 <_vfiprintf_r+0x18>
 800c120:	6a03      	ldr	r3, [r0, #32]
 800c122:	b90b      	cbnz	r3, 800c128 <_vfiprintf_r+0x18>
 800c124:	f7ff f9e4 	bl	800b4f0 <__sinit>
 800c128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c12a:	07d9      	lsls	r1, r3, #31
 800c12c:	d405      	bmi.n	800c13a <_vfiprintf_r+0x2a>
 800c12e:	89ab      	ldrh	r3, [r5, #12]
 800c130:	059a      	lsls	r2, r3, #22
 800c132:	d402      	bmi.n	800c13a <_vfiprintf_r+0x2a>
 800c134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c136:	f7ff fc40 	bl	800b9ba <__retarget_lock_acquire_recursive>
 800c13a:	89ab      	ldrh	r3, [r5, #12]
 800c13c:	071b      	lsls	r3, r3, #28
 800c13e:	d501      	bpl.n	800c144 <_vfiprintf_r+0x34>
 800c140:	692b      	ldr	r3, [r5, #16]
 800c142:	b99b      	cbnz	r3, 800c16c <_vfiprintf_r+0x5c>
 800c144:	4629      	mov	r1, r5
 800c146:	4630      	mov	r0, r6
 800c148:	f7ff fb44 	bl	800b7d4 <__swsetup_r>
 800c14c:	b170      	cbz	r0, 800c16c <_vfiprintf_r+0x5c>
 800c14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c150:	07dc      	lsls	r4, r3, #31
 800c152:	d504      	bpl.n	800c15e <_vfiprintf_r+0x4e>
 800c154:	f04f 30ff 	mov.w	r0, #4294967295
 800c158:	b01d      	add	sp, #116	; 0x74
 800c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15e:	89ab      	ldrh	r3, [r5, #12]
 800c160:	0598      	lsls	r0, r3, #22
 800c162:	d4f7      	bmi.n	800c154 <_vfiprintf_r+0x44>
 800c164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c166:	f7ff fc29 	bl	800b9bc <__retarget_lock_release_recursive>
 800c16a:	e7f3      	b.n	800c154 <_vfiprintf_r+0x44>
 800c16c:	2300      	movs	r3, #0
 800c16e:	9309      	str	r3, [sp, #36]	; 0x24
 800c170:	2320      	movs	r3, #32
 800c172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c176:	f8cd 800c 	str.w	r8, [sp, #12]
 800c17a:	2330      	movs	r3, #48	; 0x30
 800c17c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c330 <_vfiprintf_r+0x220>
 800c180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c184:	f04f 0901 	mov.w	r9, #1
 800c188:	4623      	mov	r3, r4
 800c18a:	469a      	mov	sl, r3
 800c18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c190:	b10a      	cbz	r2, 800c196 <_vfiprintf_r+0x86>
 800c192:	2a25      	cmp	r2, #37	; 0x25
 800c194:	d1f9      	bne.n	800c18a <_vfiprintf_r+0x7a>
 800c196:	ebba 0b04 	subs.w	fp, sl, r4
 800c19a:	d00b      	beq.n	800c1b4 <_vfiprintf_r+0xa4>
 800c19c:	465b      	mov	r3, fp
 800c19e:	4622      	mov	r2, r4
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7ff ffa1 	bl	800c0ea <__sfputs_r>
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	f000 80a9 	beq.w	800c300 <_vfiprintf_r+0x1f0>
 800c1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1b0:	445a      	add	r2, fp
 800c1b2:	9209      	str	r2, [sp, #36]	; 0x24
 800c1b4:	f89a 3000 	ldrb.w	r3, [sl]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	f000 80a1 	beq.w	800c300 <_vfiprintf_r+0x1f0>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1c8:	f10a 0a01 	add.w	sl, sl, #1
 800c1cc:	9304      	str	r3, [sp, #16]
 800c1ce:	9307      	str	r3, [sp, #28]
 800c1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1d4:	931a      	str	r3, [sp, #104]	; 0x68
 800c1d6:	4654      	mov	r4, sl
 800c1d8:	2205      	movs	r2, #5
 800c1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1de:	4854      	ldr	r0, [pc, #336]	; (800c330 <_vfiprintf_r+0x220>)
 800c1e0:	f7f3 fffe 	bl	80001e0 <memchr>
 800c1e4:	9a04      	ldr	r2, [sp, #16]
 800c1e6:	b9d8      	cbnz	r0, 800c220 <_vfiprintf_r+0x110>
 800c1e8:	06d1      	lsls	r1, r2, #27
 800c1ea:	bf44      	itt	mi
 800c1ec:	2320      	movmi	r3, #32
 800c1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1f2:	0713      	lsls	r3, r2, #28
 800c1f4:	bf44      	itt	mi
 800c1f6:	232b      	movmi	r3, #43	; 0x2b
 800c1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800c200:	2b2a      	cmp	r3, #42	; 0x2a
 800c202:	d015      	beq.n	800c230 <_vfiprintf_r+0x120>
 800c204:	9a07      	ldr	r2, [sp, #28]
 800c206:	4654      	mov	r4, sl
 800c208:	2000      	movs	r0, #0
 800c20a:	f04f 0c0a 	mov.w	ip, #10
 800c20e:	4621      	mov	r1, r4
 800c210:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c214:	3b30      	subs	r3, #48	; 0x30
 800c216:	2b09      	cmp	r3, #9
 800c218:	d94d      	bls.n	800c2b6 <_vfiprintf_r+0x1a6>
 800c21a:	b1b0      	cbz	r0, 800c24a <_vfiprintf_r+0x13a>
 800c21c:	9207      	str	r2, [sp, #28]
 800c21e:	e014      	b.n	800c24a <_vfiprintf_r+0x13a>
 800c220:	eba0 0308 	sub.w	r3, r0, r8
 800c224:	fa09 f303 	lsl.w	r3, r9, r3
 800c228:	4313      	orrs	r3, r2
 800c22a:	9304      	str	r3, [sp, #16]
 800c22c:	46a2      	mov	sl, r4
 800c22e:	e7d2      	b.n	800c1d6 <_vfiprintf_r+0xc6>
 800c230:	9b03      	ldr	r3, [sp, #12]
 800c232:	1d19      	adds	r1, r3, #4
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	9103      	str	r1, [sp, #12]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	bfbb      	ittet	lt
 800c23c:	425b      	neglt	r3, r3
 800c23e:	f042 0202 	orrlt.w	r2, r2, #2
 800c242:	9307      	strge	r3, [sp, #28]
 800c244:	9307      	strlt	r3, [sp, #28]
 800c246:	bfb8      	it	lt
 800c248:	9204      	strlt	r2, [sp, #16]
 800c24a:	7823      	ldrb	r3, [r4, #0]
 800c24c:	2b2e      	cmp	r3, #46	; 0x2e
 800c24e:	d10c      	bne.n	800c26a <_vfiprintf_r+0x15a>
 800c250:	7863      	ldrb	r3, [r4, #1]
 800c252:	2b2a      	cmp	r3, #42	; 0x2a
 800c254:	d134      	bne.n	800c2c0 <_vfiprintf_r+0x1b0>
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	1d1a      	adds	r2, r3, #4
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	9203      	str	r2, [sp, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bfb8      	it	lt
 800c262:	f04f 33ff 	movlt.w	r3, #4294967295
 800c266:	3402      	adds	r4, #2
 800c268:	9305      	str	r3, [sp, #20]
 800c26a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c340 <_vfiprintf_r+0x230>
 800c26e:	7821      	ldrb	r1, [r4, #0]
 800c270:	2203      	movs	r2, #3
 800c272:	4650      	mov	r0, sl
 800c274:	f7f3 ffb4 	bl	80001e0 <memchr>
 800c278:	b138      	cbz	r0, 800c28a <_vfiprintf_r+0x17a>
 800c27a:	9b04      	ldr	r3, [sp, #16]
 800c27c:	eba0 000a 	sub.w	r0, r0, sl
 800c280:	2240      	movs	r2, #64	; 0x40
 800c282:	4082      	lsls	r2, r0
 800c284:	4313      	orrs	r3, r2
 800c286:	3401      	adds	r4, #1
 800c288:	9304      	str	r3, [sp, #16]
 800c28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c28e:	4829      	ldr	r0, [pc, #164]	; (800c334 <_vfiprintf_r+0x224>)
 800c290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c294:	2206      	movs	r2, #6
 800c296:	f7f3 ffa3 	bl	80001e0 <memchr>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d03f      	beq.n	800c31e <_vfiprintf_r+0x20e>
 800c29e:	4b26      	ldr	r3, [pc, #152]	; (800c338 <_vfiprintf_r+0x228>)
 800c2a0:	bb1b      	cbnz	r3, 800c2ea <_vfiprintf_r+0x1da>
 800c2a2:	9b03      	ldr	r3, [sp, #12]
 800c2a4:	3307      	adds	r3, #7
 800c2a6:	f023 0307 	bic.w	r3, r3, #7
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	9303      	str	r3, [sp, #12]
 800c2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b0:	443b      	add	r3, r7
 800c2b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b4:	e768      	b.n	800c188 <_vfiprintf_r+0x78>
 800c2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	2001      	movs	r0, #1
 800c2be:	e7a6      	b.n	800c20e <_vfiprintf_r+0xfe>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	3401      	adds	r4, #1
 800c2c4:	9305      	str	r3, [sp, #20]
 800c2c6:	4619      	mov	r1, r3
 800c2c8:	f04f 0c0a 	mov.w	ip, #10
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2d2:	3a30      	subs	r2, #48	; 0x30
 800c2d4:	2a09      	cmp	r2, #9
 800c2d6:	d903      	bls.n	800c2e0 <_vfiprintf_r+0x1d0>
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d0c6      	beq.n	800c26a <_vfiprintf_r+0x15a>
 800c2dc:	9105      	str	r1, [sp, #20]
 800c2de:	e7c4      	b.n	800c26a <_vfiprintf_r+0x15a>
 800c2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e7f0      	b.n	800c2cc <_vfiprintf_r+0x1bc>
 800c2ea:	ab03      	add	r3, sp, #12
 800c2ec:	9300      	str	r3, [sp, #0]
 800c2ee:	462a      	mov	r2, r5
 800c2f0:	4b12      	ldr	r3, [pc, #72]	; (800c33c <_vfiprintf_r+0x22c>)
 800c2f2:	a904      	add	r1, sp, #16
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f3af 8000 	nop.w
 800c2fa:	4607      	mov	r7, r0
 800c2fc:	1c78      	adds	r0, r7, #1
 800c2fe:	d1d6      	bne.n	800c2ae <_vfiprintf_r+0x19e>
 800c300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c302:	07d9      	lsls	r1, r3, #31
 800c304:	d405      	bmi.n	800c312 <_vfiprintf_r+0x202>
 800c306:	89ab      	ldrh	r3, [r5, #12]
 800c308:	059a      	lsls	r2, r3, #22
 800c30a:	d402      	bmi.n	800c312 <_vfiprintf_r+0x202>
 800c30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c30e:	f7ff fb55 	bl	800b9bc <__retarget_lock_release_recursive>
 800c312:	89ab      	ldrh	r3, [r5, #12]
 800c314:	065b      	lsls	r3, r3, #25
 800c316:	f53f af1d 	bmi.w	800c154 <_vfiprintf_r+0x44>
 800c31a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c31c:	e71c      	b.n	800c158 <_vfiprintf_r+0x48>
 800c31e:	ab03      	add	r3, sp, #12
 800c320:	9300      	str	r3, [sp, #0]
 800c322:	462a      	mov	r2, r5
 800c324:	4b05      	ldr	r3, [pc, #20]	; (800c33c <_vfiprintf_r+0x22c>)
 800c326:	a904      	add	r1, sp, #16
 800c328:	4630      	mov	r0, r6
 800c32a:	f000 f879 	bl	800c420 <_printf_i>
 800c32e:	e7e4      	b.n	800c2fa <_vfiprintf_r+0x1ea>
 800c330:	0804e0f3 	.word	0x0804e0f3
 800c334:	0804e0fd 	.word	0x0804e0fd
 800c338:	00000000 	.word	0x00000000
 800c33c:	0800c0eb 	.word	0x0800c0eb
 800c340:	0804e0f9 	.word	0x0804e0f9

0800c344 <_printf_common>:
 800c344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c348:	4616      	mov	r6, r2
 800c34a:	4699      	mov	r9, r3
 800c34c:	688a      	ldr	r2, [r1, #8]
 800c34e:	690b      	ldr	r3, [r1, #16]
 800c350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c354:	4293      	cmp	r3, r2
 800c356:	bfb8      	it	lt
 800c358:	4613      	movlt	r3, r2
 800c35a:	6033      	str	r3, [r6, #0]
 800c35c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c360:	4607      	mov	r7, r0
 800c362:	460c      	mov	r4, r1
 800c364:	b10a      	cbz	r2, 800c36a <_printf_common+0x26>
 800c366:	3301      	adds	r3, #1
 800c368:	6033      	str	r3, [r6, #0]
 800c36a:	6823      	ldr	r3, [r4, #0]
 800c36c:	0699      	lsls	r1, r3, #26
 800c36e:	bf42      	ittt	mi
 800c370:	6833      	ldrmi	r3, [r6, #0]
 800c372:	3302      	addmi	r3, #2
 800c374:	6033      	strmi	r3, [r6, #0]
 800c376:	6825      	ldr	r5, [r4, #0]
 800c378:	f015 0506 	ands.w	r5, r5, #6
 800c37c:	d106      	bne.n	800c38c <_printf_common+0x48>
 800c37e:	f104 0a19 	add.w	sl, r4, #25
 800c382:	68e3      	ldr	r3, [r4, #12]
 800c384:	6832      	ldr	r2, [r6, #0]
 800c386:	1a9b      	subs	r3, r3, r2
 800c388:	42ab      	cmp	r3, r5
 800c38a:	dc26      	bgt.n	800c3da <_printf_common+0x96>
 800c38c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c390:	1e13      	subs	r3, r2, #0
 800c392:	6822      	ldr	r2, [r4, #0]
 800c394:	bf18      	it	ne
 800c396:	2301      	movne	r3, #1
 800c398:	0692      	lsls	r2, r2, #26
 800c39a:	d42b      	bmi.n	800c3f4 <_printf_common+0xb0>
 800c39c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	4638      	mov	r0, r7
 800c3a4:	47c0      	blx	r8
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	d01e      	beq.n	800c3e8 <_printf_common+0xa4>
 800c3aa:	6823      	ldr	r3, [r4, #0]
 800c3ac:	6922      	ldr	r2, [r4, #16]
 800c3ae:	f003 0306 	and.w	r3, r3, #6
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	bf02      	ittt	eq
 800c3b6:	68e5      	ldreq	r5, [r4, #12]
 800c3b8:	6833      	ldreq	r3, [r6, #0]
 800c3ba:	1aed      	subeq	r5, r5, r3
 800c3bc:	68a3      	ldr	r3, [r4, #8]
 800c3be:	bf0c      	ite	eq
 800c3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3c4:	2500      	movne	r5, #0
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	bfc4      	itt	gt
 800c3ca:	1a9b      	subgt	r3, r3, r2
 800c3cc:	18ed      	addgt	r5, r5, r3
 800c3ce:	2600      	movs	r6, #0
 800c3d0:	341a      	adds	r4, #26
 800c3d2:	42b5      	cmp	r5, r6
 800c3d4:	d11a      	bne.n	800c40c <_printf_common+0xc8>
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	e008      	b.n	800c3ec <_printf_common+0xa8>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	4652      	mov	r2, sl
 800c3de:	4649      	mov	r1, r9
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	47c0      	blx	r8
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d103      	bne.n	800c3f0 <_printf_common+0xac>
 800c3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	e7c6      	b.n	800c382 <_printf_common+0x3e>
 800c3f4:	18e1      	adds	r1, r4, r3
 800c3f6:	1c5a      	adds	r2, r3, #1
 800c3f8:	2030      	movs	r0, #48	; 0x30
 800c3fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3fe:	4422      	add	r2, r4
 800c400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c408:	3302      	adds	r3, #2
 800c40a:	e7c7      	b.n	800c39c <_printf_common+0x58>
 800c40c:	2301      	movs	r3, #1
 800c40e:	4622      	mov	r2, r4
 800c410:	4649      	mov	r1, r9
 800c412:	4638      	mov	r0, r7
 800c414:	47c0      	blx	r8
 800c416:	3001      	adds	r0, #1
 800c418:	d0e6      	beq.n	800c3e8 <_printf_common+0xa4>
 800c41a:	3601      	adds	r6, #1
 800c41c:	e7d9      	b.n	800c3d2 <_printf_common+0x8e>
	...

0800c420 <_printf_i>:
 800c420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c424:	7e0f      	ldrb	r7, [r1, #24]
 800c426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c428:	2f78      	cmp	r7, #120	; 0x78
 800c42a:	4691      	mov	r9, r2
 800c42c:	4680      	mov	r8, r0
 800c42e:	460c      	mov	r4, r1
 800c430:	469a      	mov	sl, r3
 800c432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c436:	d807      	bhi.n	800c448 <_printf_i+0x28>
 800c438:	2f62      	cmp	r7, #98	; 0x62
 800c43a:	d80a      	bhi.n	800c452 <_printf_i+0x32>
 800c43c:	2f00      	cmp	r7, #0
 800c43e:	f000 80d4 	beq.w	800c5ea <_printf_i+0x1ca>
 800c442:	2f58      	cmp	r7, #88	; 0x58
 800c444:	f000 80c0 	beq.w	800c5c8 <_printf_i+0x1a8>
 800c448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c44c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c450:	e03a      	b.n	800c4c8 <_printf_i+0xa8>
 800c452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c456:	2b15      	cmp	r3, #21
 800c458:	d8f6      	bhi.n	800c448 <_printf_i+0x28>
 800c45a:	a101      	add	r1, pc, #4	; (adr r1, 800c460 <_printf_i+0x40>)
 800c45c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c460:	0800c4b9 	.word	0x0800c4b9
 800c464:	0800c4cd 	.word	0x0800c4cd
 800c468:	0800c449 	.word	0x0800c449
 800c46c:	0800c449 	.word	0x0800c449
 800c470:	0800c449 	.word	0x0800c449
 800c474:	0800c449 	.word	0x0800c449
 800c478:	0800c4cd 	.word	0x0800c4cd
 800c47c:	0800c449 	.word	0x0800c449
 800c480:	0800c449 	.word	0x0800c449
 800c484:	0800c449 	.word	0x0800c449
 800c488:	0800c449 	.word	0x0800c449
 800c48c:	0800c5d1 	.word	0x0800c5d1
 800c490:	0800c4f9 	.word	0x0800c4f9
 800c494:	0800c58b 	.word	0x0800c58b
 800c498:	0800c449 	.word	0x0800c449
 800c49c:	0800c449 	.word	0x0800c449
 800c4a0:	0800c5f3 	.word	0x0800c5f3
 800c4a4:	0800c449 	.word	0x0800c449
 800c4a8:	0800c4f9 	.word	0x0800c4f9
 800c4ac:	0800c449 	.word	0x0800c449
 800c4b0:	0800c449 	.word	0x0800c449
 800c4b4:	0800c593 	.word	0x0800c593
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	1d1a      	adds	r2, r3, #4
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	602a      	str	r2, [r5, #0]
 800c4c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e09f      	b.n	800c60c <_printf_i+0x1ec>
 800c4cc:	6820      	ldr	r0, [r4, #0]
 800c4ce:	682b      	ldr	r3, [r5, #0]
 800c4d0:	0607      	lsls	r7, r0, #24
 800c4d2:	f103 0104 	add.w	r1, r3, #4
 800c4d6:	6029      	str	r1, [r5, #0]
 800c4d8:	d501      	bpl.n	800c4de <_printf_i+0xbe>
 800c4da:	681e      	ldr	r6, [r3, #0]
 800c4dc:	e003      	b.n	800c4e6 <_printf_i+0xc6>
 800c4de:	0646      	lsls	r6, r0, #25
 800c4e0:	d5fb      	bpl.n	800c4da <_printf_i+0xba>
 800c4e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c4e6:	2e00      	cmp	r6, #0
 800c4e8:	da03      	bge.n	800c4f2 <_printf_i+0xd2>
 800c4ea:	232d      	movs	r3, #45	; 0x2d
 800c4ec:	4276      	negs	r6, r6
 800c4ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4f2:	485a      	ldr	r0, [pc, #360]	; (800c65c <_printf_i+0x23c>)
 800c4f4:	230a      	movs	r3, #10
 800c4f6:	e012      	b.n	800c51e <_printf_i+0xfe>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	6820      	ldr	r0, [r4, #0]
 800c4fc:	1d19      	adds	r1, r3, #4
 800c4fe:	6029      	str	r1, [r5, #0]
 800c500:	0605      	lsls	r5, r0, #24
 800c502:	d501      	bpl.n	800c508 <_printf_i+0xe8>
 800c504:	681e      	ldr	r6, [r3, #0]
 800c506:	e002      	b.n	800c50e <_printf_i+0xee>
 800c508:	0641      	lsls	r1, r0, #25
 800c50a:	d5fb      	bpl.n	800c504 <_printf_i+0xe4>
 800c50c:	881e      	ldrh	r6, [r3, #0]
 800c50e:	4853      	ldr	r0, [pc, #332]	; (800c65c <_printf_i+0x23c>)
 800c510:	2f6f      	cmp	r7, #111	; 0x6f
 800c512:	bf0c      	ite	eq
 800c514:	2308      	moveq	r3, #8
 800c516:	230a      	movne	r3, #10
 800c518:	2100      	movs	r1, #0
 800c51a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c51e:	6865      	ldr	r5, [r4, #4]
 800c520:	60a5      	str	r5, [r4, #8]
 800c522:	2d00      	cmp	r5, #0
 800c524:	bfa2      	ittt	ge
 800c526:	6821      	ldrge	r1, [r4, #0]
 800c528:	f021 0104 	bicge.w	r1, r1, #4
 800c52c:	6021      	strge	r1, [r4, #0]
 800c52e:	b90e      	cbnz	r6, 800c534 <_printf_i+0x114>
 800c530:	2d00      	cmp	r5, #0
 800c532:	d04b      	beq.n	800c5cc <_printf_i+0x1ac>
 800c534:	4615      	mov	r5, r2
 800c536:	fbb6 f1f3 	udiv	r1, r6, r3
 800c53a:	fb03 6711 	mls	r7, r3, r1, r6
 800c53e:	5dc7      	ldrb	r7, [r0, r7]
 800c540:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c544:	4637      	mov	r7, r6
 800c546:	42bb      	cmp	r3, r7
 800c548:	460e      	mov	r6, r1
 800c54a:	d9f4      	bls.n	800c536 <_printf_i+0x116>
 800c54c:	2b08      	cmp	r3, #8
 800c54e:	d10b      	bne.n	800c568 <_printf_i+0x148>
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	07de      	lsls	r6, r3, #31
 800c554:	d508      	bpl.n	800c568 <_printf_i+0x148>
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	6861      	ldr	r1, [r4, #4]
 800c55a:	4299      	cmp	r1, r3
 800c55c:	bfde      	ittt	le
 800c55e:	2330      	movle	r3, #48	; 0x30
 800c560:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c564:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c568:	1b52      	subs	r2, r2, r5
 800c56a:	6122      	str	r2, [r4, #16]
 800c56c:	f8cd a000 	str.w	sl, [sp]
 800c570:	464b      	mov	r3, r9
 800c572:	aa03      	add	r2, sp, #12
 800c574:	4621      	mov	r1, r4
 800c576:	4640      	mov	r0, r8
 800c578:	f7ff fee4 	bl	800c344 <_printf_common>
 800c57c:	3001      	adds	r0, #1
 800c57e:	d14a      	bne.n	800c616 <_printf_i+0x1f6>
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	b004      	add	sp, #16
 800c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58a:	6823      	ldr	r3, [r4, #0]
 800c58c:	f043 0320 	orr.w	r3, r3, #32
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	4833      	ldr	r0, [pc, #204]	; (800c660 <_printf_i+0x240>)
 800c594:	2778      	movs	r7, #120	; 0x78
 800c596:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	6829      	ldr	r1, [r5, #0]
 800c59e:	061f      	lsls	r7, r3, #24
 800c5a0:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5a4:	d402      	bmi.n	800c5ac <_printf_i+0x18c>
 800c5a6:	065f      	lsls	r7, r3, #25
 800c5a8:	bf48      	it	mi
 800c5aa:	b2b6      	uxthmi	r6, r6
 800c5ac:	07df      	lsls	r7, r3, #31
 800c5ae:	bf48      	it	mi
 800c5b0:	f043 0320 	orrmi.w	r3, r3, #32
 800c5b4:	6029      	str	r1, [r5, #0]
 800c5b6:	bf48      	it	mi
 800c5b8:	6023      	strmi	r3, [r4, #0]
 800c5ba:	b91e      	cbnz	r6, 800c5c4 <_printf_i+0x1a4>
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	f023 0320 	bic.w	r3, r3, #32
 800c5c2:	6023      	str	r3, [r4, #0]
 800c5c4:	2310      	movs	r3, #16
 800c5c6:	e7a7      	b.n	800c518 <_printf_i+0xf8>
 800c5c8:	4824      	ldr	r0, [pc, #144]	; (800c65c <_printf_i+0x23c>)
 800c5ca:	e7e4      	b.n	800c596 <_printf_i+0x176>
 800c5cc:	4615      	mov	r5, r2
 800c5ce:	e7bd      	b.n	800c54c <_printf_i+0x12c>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	6826      	ldr	r6, [r4, #0]
 800c5d4:	6961      	ldr	r1, [r4, #20]
 800c5d6:	1d18      	adds	r0, r3, #4
 800c5d8:	6028      	str	r0, [r5, #0]
 800c5da:	0635      	lsls	r5, r6, #24
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	d501      	bpl.n	800c5e4 <_printf_i+0x1c4>
 800c5e0:	6019      	str	r1, [r3, #0]
 800c5e2:	e002      	b.n	800c5ea <_printf_i+0x1ca>
 800c5e4:	0670      	lsls	r0, r6, #25
 800c5e6:	d5fb      	bpl.n	800c5e0 <_printf_i+0x1c0>
 800c5e8:	8019      	strh	r1, [r3, #0]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	6123      	str	r3, [r4, #16]
 800c5ee:	4615      	mov	r5, r2
 800c5f0:	e7bc      	b.n	800c56c <_printf_i+0x14c>
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	1d1a      	adds	r2, r3, #4
 800c5f6:	602a      	str	r2, [r5, #0]
 800c5f8:	681d      	ldr	r5, [r3, #0]
 800c5fa:	6862      	ldr	r2, [r4, #4]
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	4628      	mov	r0, r5
 800c600:	f7f3 fdee 	bl	80001e0 <memchr>
 800c604:	b108      	cbz	r0, 800c60a <_printf_i+0x1ea>
 800c606:	1b40      	subs	r0, r0, r5
 800c608:	6060      	str	r0, [r4, #4]
 800c60a:	6863      	ldr	r3, [r4, #4]
 800c60c:	6123      	str	r3, [r4, #16]
 800c60e:	2300      	movs	r3, #0
 800c610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c614:	e7aa      	b.n	800c56c <_printf_i+0x14c>
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	462a      	mov	r2, r5
 800c61a:	4649      	mov	r1, r9
 800c61c:	4640      	mov	r0, r8
 800c61e:	47d0      	blx	sl
 800c620:	3001      	adds	r0, #1
 800c622:	d0ad      	beq.n	800c580 <_printf_i+0x160>
 800c624:	6823      	ldr	r3, [r4, #0]
 800c626:	079b      	lsls	r3, r3, #30
 800c628:	d413      	bmi.n	800c652 <_printf_i+0x232>
 800c62a:	68e0      	ldr	r0, [r4, #12]
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	4298      	cmp	r0, r3
 800c630:	bfb8      	it	lt
 800c632:	4618      	movlt	r0, r3
 800c634:	e7a6      	b.n	800c584 <_printf_i+0x164>
 800c636:	2301      	movs	r3, #1
 800c638:	4632      	mov	r2, r6
 800c63a:	4649      	mov	r1, r9
 800c63c:	4640      	mov	r0, r8
 800c63e:	47d0      	blx	sl
 800c640:	3001      	adds	r0, #1
 800c642:	d09d      	beq.n	800c580 <_printf_i+0x160>
 800c644:	3501      	adds	r5, #1
 800c646:	68e3      	ldr	r3, [r4, #12]
 800c648:	9903      	ldr	r1, [sp, #12]
 800c64a:	1a5b      	subs	r3, r3, r1
 800c64c:	42ab      	cmp	r3, r5
 800c64e:	dcf2      	bgt.n	800c636 <_printf_i+0x216>
 800c650:	e7eb      	b.n	800c62a <_printf_i+0x20a>
 800c652:	2500      	movs	r5, #0
 800c654:	f104 0619 	add.w	r6, r4, #25
 800c658:	e7f5      	b.n	800c646 <_printf_i+0x226>
 800c65a:	bf00      	nop
 800c65c:	0804e104 	.word	0x0804e104
 800c660:	0804e115 	.word	0x0804e115

0800c664 <_scanf_chars>:
 800c664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c668:	4615      	mov	r5, r2
 800c66a:	688a      	ldr	r2, [r1, #8]
 800c66c:	4680      	mov	r8, r0
 800c66e:	460c      	mov	r4, r1
 800c670:	b932      	cbnz	r2, 800c680 <_scanf_chars+0x1c>
 800c672:	698a      	ldr	r2, [r1, #24]
 800c674:	2a00      	cmp	r2, #0
 800c676:	bf0c      	ite	eq
 800c678:	2201      	moveq	r2, #1
 800c67a:	f04f 32ff 	movne.w	r2, #4294967295
 800c67e:	608a      	str	r2, [r1, #8]
 800c680:	6822      	ldr	r2, [r4, #0]
 800c682:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c714 <_scanf_chars+0xb0>
 800c686:	06d1      	lsls	r1, r2, #27
 800c688:	bf5f      	itttt	pl
 800c68a:	681a      	ldrpl	r2, [r3, #0]
 800c68c:	1d11      	addpl	r1, r2, #4
 800c68e:	6019      	strpl	r1, [r3, #0]
 800c690:	6816      	ldrpl	r6, [r2, #0]
 800c692:	2700      	movs	r7, #0
 800c694:	69a0      	ldr	r0, [r4, #24]
 800c696:	b188      	cbz	r0, 800c6bc <_scanf_chars+0x58>
 800c698:	2801      	cmp	r0, #1
 800c69a:	d107      	bne.n	800c6ac <_scanf_chars+0x48>
 800c69c:	682a      	ldr	r2, [r5, #0]
 800c69e:	7811      	ldrb	r1, [r2, #0]
 800c6a0:	6962      	ldr	r2, [r4, #20]
 800c6a2:	5c52      	ldrb	r2, [r2, r1]
 800c6a4:	b952      	cbnz	r2, 800c6bc <_scanf_chars+0x58>
 800c6a6:	2f00      	cmp	r7, #0
 800c6a8:	d031      	beq.n	800c70e <_scanf_chars+0xaa>
 800c6aa:	e022      	b.n	800c6f2 <_scanf_chars+0x8e>
 800c6ac:	2802      	cmp	r0, #2
 800c6ae:	d120      	bne.n	800c6f2 <_scanf_chars+0x8e>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c6b8:	071b      	lsls	r3, r3, #28
 800c6ba:	d41a      	bmi.n	800c6f2 <_scanf_chars+0x8e>
 800c6bc:	6823      	ldr	r3, [r4, #0]
 800c6be:	06da      	lsls	r2, r3, #27
 800c6c0:	bf5e      	ittt	pl
 800c6c2:	682b      	ldrpl	r3, [r5, #0]
 800c6c4:	781b      	ldrbpl	r3, [r3, #0]
 800c6c6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c6ca:	682a      	ldr	r2, [r5, #0]
 800c6cc:	686b      	ldr	r3, [r5, #4]
 800c6ce:	3201      	adds	r2, #1
 800c6d0:	602a      	str	r2, [r5, #0]
 800c6d2:	68a2      	ldr	r2, [r4, #8]
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	3a01      	subs	r2, #1
 800c6d8:	606b      	str	r3, [r5, #4]
 800c6da:	3701      	adds	r7, #1
 800c6dc:	60a2      	str	r2, [r4, #8]
 800c6de:	b142      	cbz	r2, 800c6f2 <_scanf_chars+0x8e>
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	dcd7      	bgt.n	800c694 <_scanf_chars+0x30>
 800c6e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	4640      	mov	r0, r8
 800c6ec:	4798      	blx	r3
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d0d0      	beq.n	800c694 <_scanf_chars+0x30>
 800c6f2:	6823      	ldr	r3, [r4, #0]
 800c6f4:	f013 0310 	ands.w	r3, r3, #16
 800c6f8:	d105      	bne.n	800c706 <_scanf_chars+0xa2>
 800c6fa:	68e2      	ldr	r2, [r4, #12]
 800c6fc:	3201      	adds	r2, #1
 800c6fe:	60e2      	str	r2, [r4, #12]
 800c700:	69a2      	ldr	r2, [r4, #24]
 800c702:	b102      	cbz	r2, 800c706 <_scanf_chars+0xa2>
 800c704:	7033      	strb	r3, [r6, #0]
 800c706:	6923      	ldr	r3, [r4, #16]
 800c708:	443b      	add	r3, r7
 800c70a:	6123      	str	r3, [r4, #16]
 800c70c:	2000      	movs	r0, #0
 800c70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c712:	bf00      	nop
 800c714:	0804dff3 	.word	0x0804dff3

0800c718 <_scanf_i>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	4698      	mov	r8, r3
 800c71e:	4b74      	ldr	r3, [pc, #464]	; (800c8f0 <_scanf_i+0x1d8>)
 800c720:	460c      	mov	r4, r1
 800c722:	4682      	mov	sl, r0
 800c724:	4616      	mov	r6, r2
 800c726:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c72a:	b087      	sub	sp, #28
 800c72c:	ab03      	add	r3, sp, #12
 800c72e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c732:	4b70      	ldr	r3, [pc, #448]	; (800c8f4 <_scanf_i+0x1dc>)
 800c734:	69a1      	ldr	r1, [r4, #24]
 800c736:	4a70      	ldr	r2, [pc, #448]	; (800c8f8 <_scanf_i+0x1e0>)
 800c738:	2903      	cmp	r1, #3
 800c73a:	bf18      	it	ne
 800c73c:	461a      	movne	r2, r3
 800c73e:	68a3      	ldr	r3, [r4, #8]
 800c740:	9201      	str	r2, [sp, #4]
 800c742:	1e5a      	subs	r2, r3, #1
 800c744:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c748:	bf88      	it	hi
 800c74a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c74e:	4627      	mov	r7, r4
 800c750:	bf82      	ittt	hi
 800c752:	eb03 0905 	addhi.w	r9, r3, r5
 800c756:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c75a:	60a3      	strhi	r3, [r4, #8]
 800c75c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c760:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c764:	bf98      	it	ls
 800c766:	f04f 0900 	movls.w	r9, #0
 800c76a:	6023      	str	r3, [r4, #0]
 800c76c:	463d      	mov	r5, r7
 800c76e:	f04f 0b00 	mov.w	fp, #0
 800c772:	6831      	ldr	r1, [r6, #0]
 800c774:	ab03      	add	r3, sp, #12
 800c776:	7809      	ldrb	r1, [r1, #0]
 800c778:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c77c:	2202      	movs	r2, #2
 800c77e:	f7f3 fd2f 	bl	80001e0 <memchr>
 800c782:	b328      	cbz	r0, 800c7d0 <_scanf_i+0xb8>
 800c784:	f1bb 0f01 	cmp.w	fp, #1
 800c788:	d159      	bne.n	800c83e <_scanf_i+0x126>
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	b92a      	cbnz	r2, 800c79a <_scanf_i+0x82>
 800c78e:	6822      	ldr	r2, [r4, #0]
 800c790:	2308      	movs	r3, #8
 800c792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c796:	6063      	str	r3, [r4, #4]
 800c798:	6022      	str	r2, [r4, #0]
 800c79a:	6822      	ldr	r2, [r4, #0]
 800c79c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c7a0:	6022      	str	r2, [r4, #0]
 800c7a2:	68a2      	ldr	r2, [r4, #8]
 800c7a4:	1e51      	subs	r1, r2, #1
 800c7a6:	60a1      	str	r1, [r4, #8]
 800c7a8:	b192      	cbz	r2, 800c7d0 <_scanf_i+0xb8>
 800c7aa:	6832      	ldr	r2, [r6, #0]
 800c7ac:	1c51      	adds	r1, r2, #1
 800c7ae:	6031      	str	r1, [r6, #0]
 800c7b0:	7812      	ldrb	r2, [r2, #0]
 800c7b2:	f805 2b01 	strb.w	r2, [r5], #1
 800c7b6:	6872      	ldr	r2, [r6, #4]
 800c7b8:	3a01      	subs	r2, #1
 800c7ba:	2a00      	cmp	r2, #0
 800c7bc:	6072      	str	r2, [r6, #4]
 800c7be:	dc07      	bgt.n	800c7d0 <_scanf_i+0xb8>
 800c7c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c7c4:	4631      	mov	r1, r6
 800c7c6:	4650      	mov	r0, sl
 800c7c8:	4790      	blx	r2
 800c7ca:	2800      	cmp	r0, #0
 800c7cc:	f040 8085 	bne.w	800c8da <_scanf_i+0x1c2>
 800c7d0:	f10b 0b01 	add.w	fp, fp, #1
 800c7d4:	f1bb 0f03 	cmp.w	fp, #3
 800c7d8:	d1cb      	bne.n	800c772 <_scanf_i+0x5a>
 800c7da:	6863      	ldr	r3, [r4, #4]
 800c7dc:	b90b      	cbnz	r3, 800c7e2 <_scanf_i+0xca>
 800c7de:	230a      	movs	r3, #10
 800c7e0:	6063      	str	r3, [r4, #4]
 800c7e2:	6863      	ldr	r3, [r4, #4]
 800c7e4:	4945      	ldr	r1, [pc, #276]	; (800c8fc <_scanf_i+0x1e4>)
 800c7e6:	6960      	ldr	r0, [r4, #20]
 800c7e8:	1ac9      	subs	r1, r1, r3
 800c7ea:	f000 f999 	bl	800cb20 <__sccl>
 800c7ee:	f04f 0b00 	mov.w	fp, #0
 800c7f2:	68a3      	ldr	r3, [r4, #8]
 800c7f4:	6822      	ldr	r2, [r4, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d03d      	beq.n	800c876 <_scanf_i+0x15e>
 800c7fa:	6831      	ldr	r1, [r6, #0]
 800c7fc:	6960      	ldr	r0, [r4, #20]
 800c7fe:	f891 c000 	ldrb.w	ip, [r1]
 800c802:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c806:	2800      	cmp	r0, #0
 800c808:	d035      	beq.n	800c876 <_scanf_i+0x15e>
 800c80a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c80e:	d124      	bne.n	800c85a <_scanf_i+0x142>
 800c810:	0510      	lsls	r0, r2, #20
 800c812:	d522      	bpl.n	800c85a <_scanf_i+0x142>
 800c814:	f10b 0b01 	add.w	fp, fp, #1
 800c818:	f1b9 0f00 	cmp.w	r9, #0
 800c81c:	d003      	beq.n	800c826 <_scanf_i+0x10e>
 800c81e:	3301      	adds	r3, #1
 800c820:	f109 39ff 	add.w	r9, r9, #4294967295
 800c824:	60a3      	str	r3, [r4, #8]
 800c826:	6873      	ldr	r3, [r6, #4]
 800c828:	3b01      	subs	r3, #1
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	6073      	str	r3, [r6, #4]
 800c82e:	dd1b      	ble.n	800c868 <_scanf_i+0x150>
 800c830:	6833      	ldr	r3, [r6, #0]
 800c832:	3301      	adds	r3, #1
 800c834:	6033      	str	r3, [r6, #0]
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	3b01      	subs	r3, #1
 800c83a:	60a3      	str	r3, [r4, #8]
 800c83c:	e7d9      	b.n	800c7f2 <_scanf_i+0xda>
 800c83e:	f1bb 0f02 	cmp.w	fp, #2
 800c842:	d1ae      	bne.n	800c7a2 <_scanf_i+0x8a>
 800c844:	6822      	ldr	r2, [r4, #0]
 800c846:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c84a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c84e:	d1bf      	bne.n	800c7d0 <_scanf_i+0xb8>
 800c850:	2310      	movs	r3, #16
 800c852:	6063      	str	r3, [r4, #4]
 800c854:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c858:	e7a2      	b.n	800c7a0 <_scanf_i+0x88>
 800c85a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c85e:	6022      	str	r2, [r4, #0]
 800c860:	780b      	ldrb	r3, [r1, #0]
 800c862:	f805 3b01 	strb.w	r3, [r5], #1
 800c866:	e7de      	b.n	800c826 <_scanf_i+0x10e>
 800c868:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c86c:	4631      	mov	r1, r6
 800c86e:	4650      	mov	r0, sl
 800c870:	4798      	blx	r3
 800c872:	2800      	cmp	r0, #0
 800c874:	d0df      	beq.n	800c836 <_scanf_i+0x11e>
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	05d9      	lsls	r1, r3, #23
 800c87a:	d50d      	bpl.n	800c898 <_scanf_i+0x180>
 800c87c:	42bd      	cmp	r5, r7
 800c87e:	d909      	bls.n	800c894 <_scanf_i+0x17c>
 800c880:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c884:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c888:	4632      	mov	r2, r6
 800c88a:	4650      	mov	r0, sl
 800c88c:	4798      	blx	r3
 800c88e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c892:	464d      	mov	r5, r9
 800c894:	42bd      	cmp	r5, r7
 800c896:	d028      	beq.n	800c8ea <_scanf_i+0x1d2>
 800c898:	6822      	ldr	r2, [r4, #0]
 800c89a:	f012 0210 	ands.w	r2, r2, #16
 800c89e:	d113      	bne.n	800c8c8 <_scanf_i+0x1b0>
 800c8a0:	702a      	strb	r2, [r5, #0]
 800c8a2:	6863      	ldr	r3, [r4, #4]
 800c8a4:	9e01      	ldr	r6, [sp, #4]
 800c8a6:	4639      	mov	r1, r7
 800c8a8:	4650      	mov	r0, sl
 800c8aa:	47b0      	blx	r6
 800c8ac:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b0:	6821      	ldr	r1, [r4, #0]
 800c8b2:	1d1a      	adds	r2, r3, #4
 800c8b4:	f8c8 2000 	str.w	r2, [r8]
 800c8b8:	f011 0f20 	tst.w	r1, #32
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	d00f      	beq.n	800c8e0 <_scanf_i+0x1c8>
 800c8c0:	6018      	str	r0, [r3, #0]
 800c8c2:	68e3      	ldr	r3, [r4, #12]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	60e3      	str	r3, [r4, #12]
 800c8c8:	6923      	ldr	r3, [r4, #16]
 800c8ca:	1bed      	subs	r5, r5, r7
 800c8cc:	445d      	add	r5, fp
 800c8ce:	442b      	add	r3, r5
 800c8d0:	6123      	str	r3, [r4, #16]
 800c8d2:	2000      	movs	r0, #0
 800c8d4:	b007      	add	sp, #28
 800c8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8da:	f04f 0b00 	mov.w	fp, #0
 800c8de:	e7ca      	b.n	800c876 <_scanf_i+0x15e>
 800c8e0:	07ca      	lsls	r2, r1, #31
 800c8e2:	bf4c      	ite	mi
 800c8e4:	8018      	strhmi	r0, [r3, #0]
 800c8e6:	6018      	strpl	r0, [r3, #0]
 800c8e8:	e7eb      	b.n	800c8c2 <_scanf_i+0x1aa>
 800c8ea:	2001      	movs	r0, #1
 800c8ec:	e7f2      	b.n	800c8d4 <_scanf_i+0x1bc>
 800c8ee:	bf00      	nop
 800c8f0:	0800d010 	.word	0x0800d010
 800c8f4:	0800cde1 	.word	0x0800cde1
 800c8f8:	0800b3c1 	.word	0x0800b3c1
 800c8fc:	0804e136 	.word	0x0804e136

0800c900 <__sflush_r>:
 800c900:	898a      	ldrh	r2, [r1, #12]
 800c902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c906:	4605      	mov	r5, r0
 800c908:	0710      	lsls	r0, r2, #28
 800c90a:	460c      	mov	r4, r1
 800c90c:	d458      	bmi.n	800c9c0 <__sflush_r+0xc0>
 800c90e:	684b      	ldr	r3, [r1, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	dc05      	bgt.n	800c920 <__sflush_r+0x20>
 800c914:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c916:	2b00      	cmp	r3, #0
 800c918:	dc02      	bgt.n	800c920 <__sflush_r+0x20>
 800c91a:	2000      	movs	r0, #0
 800c91c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c922:	2e00      	cmp	r6, #0
 800c924:	d0f9      	beq.n	800c91a <__sflush_r+0x1a>
 800c926:	2300      	movs	r3, #0
 800c928:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c92c:	682f      	ldr	r7, [r5, #0]
 800c92e:	6a21      	ldr	r1, [r4, #32]
 800c930:	602b      	str	r3, [r5, #0]
 800c932:	d032      	beq.n	800c99a <__sflush_r+0x9a>
 800c934:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	075a      	lsls	r2, r3, #29
 800c93a:	d505      	bpl.n	800c948 <__sflush_r+0x48>
 800c93c:	6863      	ldr	r3, [r4, #4]
 800c93e:	1ac0      	subs	r0, r0, r3
 800c940:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c942:	b10b      	cbz	r3, 800c948 <__sflush_r+0x48>
 800c944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c946:	1ac0      	subs	r0, r0, r3
 800c948:	2300      	movs	r3, #0
 800c94a:	4602      	mov	r2, r0
 800c94c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c94e:	6a21      	ldr	r1, [r4, #32]
 800c950:	4628      	mov	r0, r5
 800c952:	47b0      	blx	r6
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	89a3      	ldrh	r3, [r4, #12]
 800c958:	d106      	bne.n	800c968 <__sflush_r+0x68>
 800c95a:	6829      	ldr	r1, [r5, #0]
 800c95c:	291d      	cmp	r1, #29
 800c95e:	d82b      	bhi.n	800c9b8 <__sflush_r+0xb8>
 800c960:	4a29      	ldr	r2, [pc, #164]	; (800ca08 <__sflush_r+0x108>)
 800c962:	410a      	asrs	r2, r1
 800c964:	07d6      	lsls	r6, r2, #31
 800c966:	d427      	bmi.n	800c9b8 <__sflush_r+0xb8>
 800c968:	2200      	movs	r2, #0
 800c96a:	6062      	str	r2, [r4, #4]
 800c96c:	04d9      	lsls	r1, r3, #19
 800c96e:	6922      	ldr	r2, [r4, #16]
 800c970:	6022      	str	r2, [r4, #0]
 800c972:	d504      	bpl.n	800c97e <__sflush_r+0x7e>
 800c974:	1c42      	adds	r2, r0, #1
 800c976:	d101      	bne.n	800c97c <__sflush_r+0x7c>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	b903      	cbnz	r3, 800c97e <__sflush_r+0x7e>
 800c97c:	6560      	str	r0, [r4, #84]	; 0x54
 800c97e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c980:	602f      	str	r7, [r5, #0]
 800c982:	2900      	cmp	r1, #0
 800c984:	d0c9      	beq.n	800c91a <__sflush_r+0x1a>
 800c986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c98a:	4299      	cmp	r1, r3
 800c98c:	d002      	beq.n	800c994 <__sflush_r+0x94>
 800c98e:	4628      	mov	r0, r5
 800c990:	f7ff f81e 	bl	800b9d0 <_free_r>
 800c994:	2000      	movs	r0, #0
 800c996:	6360      	str	r0, [r4, #52]	; 0x34
 800c998:	e7c0      	b.n	800c91c <__sflush_r+0x1c>
 800c99a:	2301      	movs	r3, #1
 800c99c:	4628      	mov	r0, r5
 800c99e:	47b0      	blx	r6
 800c9a0:	1c41      	adds	r1, r0, #1
 800c9a2:	d1c8      	bne.n	800c936 <__sflush_r+0x36>
 800c9a4:	682b      	ldr	r3, [r5, #0]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d0c5      	beq.n	800c936 <__sflush_r+0x36>
 800c9aa:	2b1d      	cmp	r3, #29
 800c9ac:	d001      	beq.n	800c9b2 <__sflush_r+0xb2>
 800c9ae:	2b16      	cmp	r3, #22
 800c9b0:	d101      	bne.n	800c9b6 <__sflush_r+0xb6>
 800c9b2:	602f      	str	r7, [r5, #0]
 800c9b4:	e7b1      	b.n	800c91a <__sflush_r+0x1a>
 800c9b6:	89a3      	ldrh	r3, [r4, #12]
 800c9b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9bc:	81a3      	strh	r3, [r4, #12]
 800c9be:	e7ad      	b.n	800c91c <__sflush_r+0x1c>
 800c9c0:	690f      	ldr	r7, [r1, #16]
 800c9c2:	2f00      	cmp	r7, #0
 800c9c4:	d0a9      	beq.n	800c91a <__sflush_r+0x1a>
 800c9c6:	0793      	lsls	r3, r2, #30
 800c9c8:	680e      	ldr	r6, [r1, #0]
 800c9ca:	bf08      	it	eq
 800c9cc:	694b      	ldreq	r3, [r1, #20]
 800c9ce:	600f      	str	r7, [r1, #0]
 800c9d0:	bf18      	it	ne
 800c9d2:	2300      	movne	r3, #0
 800c9d4:	eba6 0807 	sub.w	r8, r6, r7
 800c9d8:	608b      	str	r3, [r1, #8]
 800c9da:	f1b8 0f00 	cmp.w	r8, #0
 800c9de:	dd9c      	ble.n	800c91a <__sflush_r+0x1a>
 800c9e0:	6a21      	ldr	r1, [r4, #32]
 800c9e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9e4:	4643      	mov	r3, r8
 800c9e6:	463a      	mov	r2, r7
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	47b0      	blx	r6
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	dc06      	bgt.n	800c9fe <__sflush_r+0xfe>
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9f6:	81a3      	strh	r3, [r4, #12]
 800c9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fc:	e78e      	b.n	800c91c <__sflush_r+0x1c>
 800c9fe:	4407      	add	r7, r0
 800ca00:	eba8 0800 	sub.w	r8, r8, r0
 800ca04:	e7e9      	b.n	800c9da <__sflush_r+0xda>
 800ca06:	bf00      	nop
 800ca08:	dfbffffe 	.word	0xdfbffffe

0800ca0c <_fflush_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	690b      	ldr	r3, [r1, #16]
 800ca10:	4605      	mov	r5, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	b913      	cbnz	r3, 800ca1c <_fflush_r+0x10>
 800ca16:	2500      	movs	r5, #0
 800ca18:	4628      	mov	r0, r5
 800ca1a:	bd38      	pop	{r3, r4, r5, pc}
 800ca1c:	b118      	cbz	r0, 800ca26 <_fflush_r+0x1a>
 800ca1e:	6a03      	ldr	r3, [r0, #32]
 800ca20:	b90b      	cbnz	r3, 800ca26 <_fflush_r+0x1a>
 800ca22:	f7fe fd65 	bl	800b4f0 <__sinit>
 800ca26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d0f3      	beq.n	800ca16 <_fflush_r+0xa>
 800ca2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca30:	07d0      	lsls	r0, r2, #31
 800ca32:	d404      	bmi.n	800ca3e <_fflush_r+0x32>
 800ca34:	0599      	lsls	r1, r3, #22
 800ca36:	d402      	bmi.n	800ca3e <_fflush_r+0x32>
 800ca38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca3a:	f7fe ffbe 	bl	800b9ba <__retarget_lock_acquire_recursive>
 800ca3e:	4628      	mov	r0, r5
 800ca40:	4621      	mov	r1, r4
 800ca42:	f7ff ff5d 	bl	800c900 <__sflush_r>
 800ca46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca48:	07da      	lsls	r2, r3, #31
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	d4e4      	bmi.n	800ca18 <_fflush_r+0xc>
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	059b      	lsls	r3, r3, #22
 800ca52:	d4e1      	bmi.n	800ca18 <_fflush_r+0xc>
 800ca54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca56:	f7fe ffb1 	bl	800b9bc <__retarget_lock_release_recursive>
 800ca5a:	e7dd      	b.n	800ca18 <_fflush_r+0xc>

0800ca5c <__swhatbuf_r>:
 800ca5c:	b570      	push	{r4, r5, r6, lr}
 800ca5e:	460c      	mov	r4, r1
 800ca60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca64:	2900      	cmp	r1, #0
 800ca66:	b096      	sub	sp, #88	; 0x58
 800ca68:	4615      	mov	r5, r2
 800ca6a:	461e      	mov	r6, r3
 800ca6c:	da0d      	bge.n	800ca8a <__swhatbuf_r+0x2e>
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca74:	f04f 0100 	mov.w	r1, #0
 800ca78:	bf0c      	ite	eq
 800ca7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca7e:	2340      	movne	r3, #64	; 0x40
 800ca80:	2000      	movs	r0, #0
 800ca82:	6031      	str	r1, [r6, #0]
 800ca84:	602b      	str	r3, [r5, #0]
 800ca86:	b016      	add	sp, #88	; 0x58
 800ca88:	bd70      	pop	{r4, r5, r6, pc}
 800ca8a:	466a      	mov	r2, sp
 800ca8c:	f000 f8d6 	bl	800cc3c <_fstat_r>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	dbec      	blt.n	800ca6e <__swhatbuf_r+0x12>
 800ca94:	9901      	ldr	r1, [sp, #4]
 800ca96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ca9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ca9e:	4259      	negs	r1, r3
 800caa0:	4159      	adcs	r1, r3
 800caa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caa6:	e7eb      	b.n	800ca80 <__swhatbuf_r+0x24>

0800caa8 <__smakebuf_r>:
 800caa8:	898b      	ldrh	r3, [r1, #12]
 800caaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caac:	079d      	lsls	r5, r3, #30
 800caae:	4606      	mov	r6, r0
 800cab0:	460c      	mov	r4, r1
 800cab2:	d507      	bpl.n	800cac4 <__smakebuf_r+0x1c>
 800cab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	6123      	str	r3, [r4, #16]
 800cabc:	2301      	movs	r3, #1
 800cabe:	6163      	str	r3, [r4, #20]
 800cac0:	b002      	add	sp, #8
 800cac2:	bd70      	pop	{r4, r5, r6, pc}
 800cac4:	ab01      	add	r3, sp, #4
 800cac6:	466a      	mov	r2, sp
 800cac8:	f7ff ffc8 	bl	800ca5c <__swhatbuf_r>
 800cacc:	9900      	ldr	r1, [sp, #0]
 800cace:	4605      	mov	r5, r0
 800cad0:	4630      	mov	r0, r6
 800cad2:	f7fe fb67 	bl	800b1a4 <_malloc_r>
 800cad6:	b948      	cbnz	r0, 800caec <__smakebuf_r+0x44>
 800cad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cadc:	059a      	lsls	r2, r3, #22
 800cade:	d4ef      	bmi.n	800cac0 <__smakebuf_r+0x18>
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	f043 0302 	orr.w	r3, r3, #2
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	e7e3      	b.n	800cab4 <__smakebuf_r+0xc>
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	6020      	str	r0, [r4, #0]
 800caf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caf4:	81a3      	strh	r3, [r4, #12]
 800caf6:	9b00      	ldr	r3, [sp, #0]
 800caf8:	6163      	str	r3, [r4, #20]
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	6120      	str	r0, [r4, #16]
 800cafe:	b15b      	cbz	r3, 800cb18 <__smakebuf_r+0x70>
 800cb00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb04:	4630      	mov	r0, r6
 800cb06:	f000 f8ab 	bl	800cc60 <_isatty_r>
 800cb0a:	b128      	cbz	r0, 800cb18 <__smakebuf_r+0x70>
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	f023 0303 	bic.w	r3, r3, #3
 800cb12:	f043 0301 	orr.w	r3, r3, #1
 800cb16:	81a3      	strh	r3, [r4, #12]
 800cb18:	89a3      	ldrh	r3, [r4, #12]
 800cb1a:	431d      	orrs	r5, r3
 800cb1c:	81a5      	strh	r5, [r4, #12]
 800cb1e:	e7cf      	b.n	800cac0 <__smakebuf_r+0x18>

0800cb20 <__sccl>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	780b      	ldrb	r3, [r1, #0]
 800cb24:	4604      	mov	r4, r0
 800cb26:	2b5e      	cmp	r3, #94	; 0x5e
 800cb28:	bf0b      	itete	eq
 800cb2a:	784b      	ldrbeq	r3, [r1, #1]
 800cb2c:	1c4a      	addne	r2, r1, #1
 800cb2e:	1c8a      	addeq	r2, r1, #2
 800cb30:	2100      	movne	r1, #0
 800cb32:	bf08      	it	eq
 800cb34:	2101      	moveq	r1, #1
 800cb36:	3801      	subs	r0, #1
 800cb38:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800cb3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cb40:	42a8      	cmp	r0, r5
 800cb42:	d1fb      	bne.n	800cb3c <__sccl+0x1c>
 800cb44:	b90b      	cbnz	r3, 800cb4a <__sccl+0x2a>
 800cb46:	1e50      	subs	r0, r2, #1
 800cb48:	bd70      	pop	{r4, r5, r6, pc}
 800cb4a:	f081 0101 	eor.w	r1, r1, #1
 800cb4e:	54e1      	strb	r1, [r4, r3]
 800cb50:	4610      	mov	r0, r2
 800cb52:	4602      	mov	r2, r0
 800cb54:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cb58:	2d2d      	cmp	r5, #45	; 0x2d
 800cb5a:	d005      	beq.n	800cb68 <__sccl+0x48>
 800cb5c:	2d5d      	cmp	r5, #93	; 0x5d
 800cb5e:	d016      	beq.n	800cb8e <__sccl+0x6e>
 800cb60:	2d00      	cmp	r5, #0
 800cb62:	d0f1      	beq.n	800cb48 <__sccl+0x28>
 800cb64:	462b      	mov	r3, r5
 800cb66:	e7f2      	b.n	800cb4e <__sccl+0x2e>
 800cb68:	7846      	ldrb	r6, [r0, #1]
 800cb6a:	2e5d      	cmp	r6, #93	; 0x5d
 800cb6c:	d0fa      	beq.n	800cb64 <__sccl+0x44>
 800cb6e:	42b3      	cmp	r3, r6
 800cb70:	dcf8      	bgt.n	800cb64 <__sccl+0x44>
 800cb72:	3002      	adds	r0, #2
 800cb74:	461a      	mov	r2, r3
 800cb76:	3201      	adds	r2, #1
 800cb78:	4296      	cmp	r6, r2
 800cb7a:	54a1      	strb	r1, [r4, r2]
 800cb7c:	dcfb      	bgt.n	800cb76 <__sccl+0x56>
 800cb7e:	1af2      	subs	r2, r6, r3
 800cb80:	3a01      	subs	r2, #1
 800cb82:	1c5d      	adds	r5, r3, #1
 800cb84:	42b3      	cmp	r3, r6
 800cb86:	bfa8      	it	ge
 800cb88:	2200      	movge	r2, #0
 800cb8a:	18ab      	adds	r3, r5, r2
 800cb8c:	e7e1      	b.n	800cb52 <__sccl+0x32>
 800cb8e:	4610      	mov	r0, r2
 800cb90:	e7da      	b.n	800cb48 <__sccl+0x28>

0800cb92 <__submore>:
 800cb92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb96:	460c      	mov	r4, r1
 800cb98:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800cb9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb9e:	4299      	cmp	r1, r3
 800cba0:	d11d      	bne.n	800cbde <__submore+0x4c>
 800cba2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800cba6:	f7fe fafd 	bl	800b1a4 <_malloc_r>
 800cbaa:	b918      	cbnz	r0, 800cbb4 <__submore+0x22>
 800cbac:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbb8:	63a3      	str	r3, [r4, #56]	; 0x38
 800cbba:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800cbbe:	6360      	str	r0, [r4, #52]	; 0x34
 800cbc0:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800cbc4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cbc8:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800cbcc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cbd0:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800cbd4:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800cbd8:	6020      	str	r0, [r4, #0]
 800cbda:	2000      	movs	r0, #0
 800cbdc:	e7e8      	b.n	800cbb0 <__submore+0x1e>
 800cbde:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cbe0:	0077      	lsls	r7, r6, #1
 800cbe2:	463a      	mov	r2, r7
 800cbe4:	f000 f85a 	bl	800cc9c <_realloc_r>
 800cbe8:	4605      	mov	r5, r0
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d0de      	beq.n	800cbac <__submore+0x1a>
 800cbee:	eb00 0806 	add.w	r8, r0, r6
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	4632      	mov	r2, r6
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	f000 f842 	bl	800cc80 <memcpy>
 800cbfc:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800cc00:	f8c4 8000 	str.w	r8, [r4]
 800cc04:	e7e9      	b.n	800cbda <__submore+0x48>

0800cc06 <memmove>:
 800cc06:	4288      	cmp	r0, r1
 800cc08:	b510      	push	{r4, lr}
 800cc0a:	eb01 0402 	add.w	r4, r1, r2
 800cc0e:	d902      	bls.n	800cc16 <memmove+0x10>
 800cc10:	4284      	cmp	r4, r0
 800cc12:	4623      	mov	r3, r4
 800cc14:	d807      	bhi.n	800cc26 <memmove+0x20>
 800cc16:	1e43      	subs	r3, r0, #1
 800cc18:	42a1      	cmp	r1, r4
 800cc1a:	d008      	beq.n	800cc2e <memmove+0x28>
 800cc1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc24:	e7f8      	b.n	800cc18 <memmove+0x12>
 800cc26:	4402      	add	r2, r0
 800cc28:	4601      	mov	r1, r0
 800cc2a:	428a      	cmp	r2, r1
 800cc2c:	d100      	bne.n	800cc30 <memmove+0x2a>
 800cc2e:	bd10      	pop	{r4, pc}
 800cc30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc38:	e7f7      	b.n	800cc2a <memmove+0x24>
	...

0800cc3c <_fstat_r>:
 800cc3c:	b538      	push	{r3, r4, r5, lr}
 800cc3e:	4d07      	ldr	r5, [pc, #28]	; (800cc5c <_fstat_r+0x20>)
 800cc40:	2300      	movs	r3, #0
 800cc42:	4604      	mov	r4, r0
 800cc44:	4608      	mov	r0, r1
 800cc46:	4611      	mov	r1, r2
 800cc48:	602b      	str	r3, [r5, #0]
 800cc4a:	f7f4 f902 	bl	8000e52 <_fstat>
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	d102      	bne.n	800cc58 <_fstat_r+0x1c>
 800cc52:	682b      	ldr	r3, [r5, #0]
 800cc54:	b103      	cbz	r3, 800cc58 <_fstat_r+0x1c>
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	bd38      	pop	{r3, r4, r5, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200007e4 	.word	0x200007e4

0800cc60 <_isatty_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4d06      	ldr	r5, [pc, #24]	; (800cc7c <_isatty_r+0x1c>)
 800cc64:	2300      	movs	r3, #0
 800cc66:	4604      	mov	r4, r0
 800cc68:	4608      	mov	r0, r1
 800cc6a:	602b      	str	r3, [r5, #0]
 800cc6c:	f7f4 f901 	bl	8000e72 <_isatty>
 800cc70:	1c43      	adds	r3, r0, #1
 800cc72:	d102      	bne.n	800cc7a <_isatty_r+0x1a>
 800cc74:	682b      	ldr	r3, [r5, #0]
 800cc76:	b103      	cbz	r3, 800cc7a <_isatty_r+0x1a>
 800cc78:	6023      	str	r3, [r4, #0]
 800cc7a:	bd38      	pop	{r3, r4, r5, pc}
 800cc7c:	200007e4 	.word	0x200007e4

0800cc80 <memcpy>:
 800cc80:	440a      	add	r2, r1
 800cc82:	4291      	cmp	r1, r2
 800cc84:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc88:	d100      	bne.n	800cc8c <memcpy+0xc>
 800cc8a:	4770      	bx	lr
 800cc8c:	b510      	push	{r4, lr}
 800cc8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc96:	4291      	cmp	r1, r2
 800cc98:	d1f9      	bne.n	800cc8e <memcpy+0xe>
 800cc9a:	bd10      	pop	{r4, pc}

0800cc9c <_realloc_r>:
 800cc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cca0:	4680      	mov	r8, r0
 800cca2:	4614      	mov	r4, r2
 800cca4:	460e      	mov	r6, r1
 800cca6:	b921      	cbnz	r1, 800ccb2 <_realloc_r+0x16>
 800cca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccac:	4611      	mov	r1, r2
 800ccae:	f7fe ba79 	b.w	800b1a4 <_malloc_r>
 800ccb2:	b92a      	cbnz	r2, 800ccc0 <_realloc_r+0x24>
 800ccb4:	f7fe fe8c 	bl	800b9d0 <_free_r>
 800ccb8:	4625      	mov	r5, r4
 800ccba:	4628      	mov	r0, r5
 800ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc0:	f000 f890 	bl	800cde4 <_malloc_usable_size_r>
 800ccc4:	4284      	cmp	r4, r0
 800ccc6:	4607      	mov	r7, r0
 800ccc8:	d802      	bhi.n	800ccd0 <_realloc_r+0x34>
 800ccca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccce:	d812      	bhi.n	800ccf6 <_realloc_r+0x5a>
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	f7fe fa66 	bl	800b1a4 <_malloc_r>
 800ccd8:	4605      	mov	r5, r0
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d0ed      	beq.n	800ccba <_realloc_r+0x1e>
 800ccde:	42bc      	cmp	r4, r7
 800cce0:	4622      	mov	r2, r4
 800cce2:	4631      	mov	r1, r6
 800cce4:	bf28      	it	cs
 800cce6:	463a      	movcs	r2, r7
 800cce8:	f7ff ffca 	bl	800cc80 <memcpy>
 800ccec:	4631      	mov	r1, r6
 800ccee:	4640      	mov	r0, r8
 800ccf0:	f7fe fe6e 	bl	800b9d0 <_free_r>
 800ccf4:	e7e1      	b.n	800ccba <_realloc_r+0x1e>
 800ccf6:	4635      	mov	r5, r6
 800ccf8:	e7df      	b.n	800ccba <_realloc_r+0x1e>
	...

0800ccfc <_strtoul_l.constprop.0>:
 800ccfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd00:	4f36      	ldr	r7, [pc, #216]	; (800cddc <_strtoul_l.constprop.0+0xe0>)
 800cd02:	4686      	mov	lr, r0
 800cd04:	460d      	mov	r5, r1
 800cd06:	4628      	mov	r0, r5
 800cd08:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd0c:	5d3e      	ldrb	r6, [r7, r4]
 800cd0e:	f016 0608 	ands.w	r6, r6, #8
 800cd12:	d1f8      	bne.n	800cd06 <_strtoul_l.constprop.0+0xa>
 800cd14:	2c2d      	cmp	r4, #45	; 0x2d
 800cd16:	d130      	bne.n	800cd7a <_strtoul_l.constprop.0+0x7e>
 800cd18:	782c      	ldrb	r4, [r5, #0]
 800cd1a:	2601      	movs	r6, #1
 800cd1c:	1c85      	adds	r5, r0, #2
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d057      	beq.n	800cdd2 <_strtoul_l.constprop.0+0xd6>
 800cd22:	2b10      	cmp	r3, #16
 800cd24:	d109      	bne.n	800cd3a <_strtoul_l.constprop.0+0x3e>
 800cd26:	2c30      	cmp	r4, #48	; 0x30
 800cd28:	d107      	bne.n	800cd3a <_strtoul_l.constprop.0+0x3e>
 800cd2a:	7828      	ldrb	r0, [r5, #0]
 800cd2c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cd30:	2858      	cmp	r0, #88	; 0x58
 800cd32:	d149      	bne.n	800cdc8 <_strtoul_l.constprop.0+0xcc>
 800cd34:	786c      	ldrb	r4, [r5, #1]
 800cd36:	2310      	movs	r3, #16
 800cd38:	3502      	adds	r5, #2
 800cd3a:	f04f 38ff 	mov.w	r8, #4294967295
 800cd3e:	2700      	movs	r7, #0
 800cd40:	fbb8 f8f3 	udiv	r8, r8, r3
 800cd44:	fb03 f908 	mul.w	r9, r3, r8
 800cd48:	ea6f 0909 	mvn.w	r9, r9
 800cd4c:	4638      	mov	r0, r7
 800cd4e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cd52:	f1bc 0f09 	cmp.w	ip, #9
 800cd56:	d815      	bhi.n	800cd84 <_strtoul_l.constprop.0+0x88>
 800cd58:	4664      	mov	r4, ip
 800cd5a:	42a3      	cmp	r3, r4
 800cd5c:	dd23      	ble.n	800cda6 <_strtoul_l.constprop.0+0xaa>
 800cd5e:	f1b7 3fff 	cmp.w	r7, #4294967295
 800cd62:	d007      	beq.n	800cd74 <_strtoul_l.constprop.0+0x78>
 800cd64:	4580      	cmp	r8, r0
 800cd66:	d31b      	bcc.n	800cda0 <_strtoul_l.constprop.0+0xa4>
 800cd68:	d101      	bne.n	800cd6e <_strtoul_l.constprop.0+0x72>
 800cd6a:	45a1      	cmp	r9, r4
 800cd6c:	db18      	blt.n	800cda0 <_strtoul_l.constprop.0+0xa4>
 800cd6e:	fb00 4003 	mla	r0, r0, r3, r4
 800cd72:	2701      	movs	r7, #1
 800cd74:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd78:	e7e9      	b.n	800cd4e <_strtoul_l.constprop.0+0x52>
 800cd7a:	2c2b      	cmp	r4, #43	; 0x2b
 800cd7c:	bf04      	itt	eq
 800cd7e:	782c      	ldrbeq	r4, [r5, #0]
 800cd80:	1c85      	addeq	r5, r0, #2
 800cd82:	e7cc      	b.n	800cd1e <_strtoul_l.constprop.0+0x22>
 800cd84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cd88:	f1bc 0f19 	cmp.w	ip, #25
 800cd8c:	d801      	bhi.n	800cd92 <_strtoul_l.constprop.0+0x96>
 800cd8e:	3c37      	subs	r4, #55	; 0x37
 800cd90:	e7e3      	b.n	800cd5a <_strtoul_l.constprop.0+0x5e>
 800cd92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cd96:	f1bc 0f19 	cmp.w	ip, #25
 800cd9a:	d804      	bhi.n	800cda6 <_strtoul_l.constprop.0+0xaa>
 800cd9c:	3c57      	subs	r4, #87	; 0x57
 800cd9e:	e7dc      	b.n	800cd5a <_strtoul_l.constprop.0+0x5e>
 800cda0:	f04f 37ff 	mov.w	r7, #4294967295
 800cda4:	e7e6      	b.n	800cd74 <_strtoul_l.constprop.0+0x78>
 800cda6:	1c7b      	adds	r3, r7, #1
 800cda8:	d106      	bne.n	800cdb8 <_strtoul_l.constprop.0+0xbc>
 800cdaa:	2322      	movs	r3, #34	; 0x22
 800cdac:	f8ce 3000 	str.w	r3, [lr]
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	b932      	cbnz	r2, 800cdc2 <_strtoul_l.constprop.0+0xc6>
 800cdb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdb8:	b106      	cbz	r6, 800cdbc <_strtoul_l.constprop.0+0xc0>
 800cdba:	4240      	negs	r0, r0
 800cdbc:	2a00      	cmp	r2, #0
 800cdbe:	d0f9      	beq.n	800cdb4 <_strtoul_l.constprop.0+0xb8>
 800cdc0:	b107      	cbz	r7, 800cdc4 <_strtoul_l.constprop.0+0xc8>
 800cdc2:	1e69      	subs	r1, r5, #1
 800cdc4:	6011      	str	r1, [r2, #0]
 800cdc6:	e7f5      	b.n	800cdb4 <_strtoul_l.constprop.0+0xb8>
 800cdc8:	2430      	movs	r4, #48	; 0x30
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d1b5      	bne.n	800cd3a <_strtoul_l.constprop.0+0x3e>
 800cdce:	2308      	movs	r3, #8
 800cdd0:	e7b3      	b.n	800cd3a <_strtoul_l.constprop.0+0x3e>
 800cdd2:	2c30      	cmp	r4, #48	; 0x30
 800cdd4:	d0a9      	beq.n	800cd2a <_strtoul_l.constprop.0+0x2e>
 800cdd6:	230a      	movs	r3, #10
 800cdd8:	e7af      	b.n	800cd3a <_strtoul_l.constprop.0+0x3e>
 800cdda:	bf00      	nop
 800cddc:	0804dff3 	.word	0x0804dff3

0800cde0 <_strtoul_r>:
 800cde0:	f7ff bf8c 	b.w	800ccfc <_strtoul_l.constprop.0>

0800cde4 <_malloc_usable_size_r>:
 800cde4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cde8:	1f18      	subs	r0, r3, #4
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	bfbc      	itt	lt
 800cdee:	580b      	ldrlt	r3, [r1, r0]
 800cdf0:	18c0      	addlt	r0, r0, r3
 800cdf2:	4770      	bx	lr

0800cdf4 <_init>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr

0800ce00 <_fini>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	bf00      	nop
 800ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce06:	bc08      	pop	{r3}
 800ce08:	469e      	mov	lr, r3
 800ce0a:	4770      	bx	lr
